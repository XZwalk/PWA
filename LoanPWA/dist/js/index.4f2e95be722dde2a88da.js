/*!
 * 
 *   @build time: 2019/02/14 18:59:11
 * 
 */!function(t){var e={};function r(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(i,n,function(e){return t[e]}.bind(null,n));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r(1),r(2);var i,n=r(3),o=(i=n)&&i.__esModule?i:{default:i},a=r(4),s=r(5),c=r(6),h=r(7),l=r(8),f=r(9);$("#secretKey").val(localStorage.getItem("myLoanSecretKey")),document.getElementById("changeKey").onclick=function(){"undefined"!=typeof Storage?localStorage.setItem("myLoanSecretKey",$("#secretKey").val()):document.getElementById("result").innerHTML="抱歉！您的浏览器不支持 Web Storage ..."},null!=navigator.serviceWorker&&navigator.serviceWorker.register("sw.js").then(function(t){console.log("Registered events at scope: ",t.scope)});var u=document.getElementById("secretKey").value;function v(t){if(!t||0===t.length)return"";if(!u||0===u.length)return"";var e=o.default.enc.Utf8.parse(u),r=o.default.AES.decrypt(t,e,{mode:o.default.mode.ECB,padding:o.default.pad.ZeroPadding});try{return o.default.enc.Utf8.stringify(r).toString()}catch(t){return""}}16!==u.length&&(u=""),(0,a.handleBusinessLoanTotalResponse)(function(t){if((t=v(t))&&0!==t.length){t=t.replace(/\u0000/g,"");var e=JSON.parse(t);$("#bus-total-bank").html("中国农业银行股份有限公司杭州解放路支行"),$("#bus-total-rate").html("5.635%"),$("#bus-total-fine-rate").html("8.4525%"),$("#bus-total-pay-style").html("等额本息"),$("#bus-total-principal").html(e[0].dLonAmt),$("#bus-total-balance").html(e[0].dCurBal),$("#bus-total-firstDate").html(e[0].sLonDat),$("#bus-total-endDate").html(e[0].sExpDat)}else $("#bus-total-div").css({display:"none"})}),(0,s.handleBusinessRepaymentPlanResponse)(function(){}),(0,c.handleFundLoanTotalResponse)(function(t){if((t=v(t))&&0!==t.length){t=t.replace(/\u0000/g,"");var e=JSON.parse(t);$("#fund-total-bank").html(e.loanBank),$("#fund-total-rate").html(e.loanRate),$("#fund-total-fine-rate").html(e.punishRate),$("#fund-total-pay-style").html("等额本息"),$("#fund-total-principal").html(e.loanAmount),$("#fund-total-balance").html(e.remainAmount),$("#fund-total-firstDate").html(e.loanBeginDate),$("#fund-total-endDate").html(e.loanEndDate)}else $("#fund-total-div").css({display:"none"})}),(0,h.handleFundRepaymentPlanResponse)(function(){}),(0,l.handleCarLoanTotalResponse)(function(t){if((t=v(t))&&0!==t.length){t=t.replace(/\u0000/g,"");var e=JSON.parse(t).INFBDY.WCLNQLN1Z1[0];$("#car-total-bank").html("中国招商银行股份有限公司杭州深蓝支行"),$("#car-total-rate").html(e.RATEXE),$("#car-total-fine-rate").html("暂无"),$("#car-total-pay-style").html("等额本息"),$("#car-total-principal").html(e.USDAMT),$("#car-total-balance").html(e.CPTSUM),$("#car-total-firstDate").html(e.BILUPD),$("#car-total-endDate").html(e.ENDDTE)}else $("#car-total-div").css({display:"none"})}),(0,f.handleCarRepaymentPlanResponse)(function(){})},function(t,e,r){},function(t,e,r){},function(t,e,r){"use strict";var i,n,o,a,s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};a=function(){var t,e,r,i,n,o,a,s,c,h,l=l||function(t,e){var r=Object.create||function(){function t(){}return function(e){var r;return t.prototype=e,r=new t,t.prototype=null,r}}(),i={},n=i.lib={},o=n.Base={extend:function(t){var e=r(this);return t&&e.mixIn(t),e.hasOwnProperty("init")&&this.init!==e.init||(e.init=function(){e.$super.init.apply(this,arguments)}),e.init.prototype=e,e.$super=this,e},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var e in t)t.hasOwnProperty(e)&&(this[e]=t[e]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},a=n.WordArray=o.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:4*t.length},toString:function(t){return(t||c).stringify(this)},concat:function(t){var e=this.words,r=t.words,i=this.sigBytes,n=t.sigBytes;if(this.clamp(),i%4)for(var o=0;o<n;o++){var a=r[o>>>2]>>>24-o%4*8&255;e[i+o>>>2]|=a<<24-(i+o)%4*8}else for(o=0;o<n;o+=4)e[i+o>>>2]=r[o>>>2];return this.sigBytes+=n,this},clamp:function(){var e=this.words,r=this.sigBytes;e[r>>>2]&=4294967295<<32-r%4*8,e.length=t.ceil(r/4)},clone:function(){var t=o.clone.call(this);return t.words=this.words.slice(0),t},random:function(e){for(var r,i=[],n=function(e){e=e;var r=987654321,i=4294967295;return function(){var n=((r=36969*(65535&r)+(r>>16)&i)<<16)+(e=18e3*(65535&e)+(e>>16)&i)&i;return n/=4294967296,(n+=.5)*(t.random()>.5?1:-1)}},o=0;o<e;o+=4){var s=n(4294967296*(r||t.random()));r=987654071*s(),i.push(4294967296*s()|0)}return new a.init(i,e)}}),s=i.enc={},c=s.Hex={stringify:function(t){for(var e=t.words,r=t.sigBytes,i=[],n=0;n<r;n++){var o=e[n>>>2]>>>24-n%4*8&255;i.push((o>>>4).toString(16)),i.push((15&o).toString(16))}return i.join("")},parse:function(t){for(var e=t.length,r=[],i=0;i<e;i+=2)r[i>>>3]|=parseInt(t.substr(i,2),16)<<24-i%8*4;return new a.init(r,e/2)}},h=s.Latin1={stringify:function(t){for(var e=t.words,r=t.sigBytes,i=[],n=0;n<r;n++){var o=e[n>>>2]>>>24-n%4*8&255;i.push(String.fromCharCode(o))}return i.join("")},parse:function(t){for(var e=t.length,r=[],i=0;i<e;i++)r[i>>>2]|=(255&t.charCodeAt(i))<<24-i%4*8;return new a.init(r,e)}},l=s.Utf8={stringify:function(t){try{return decodeURIComponent(escape(h.stringify(t)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function(t){return h.parse(unescape(encodeURIComponent(t)))}},f=n.BufferedBlockAlgorithm=o.extend({reset:function(){this._data=new a.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=l.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(e){var r=this._data,i=r.words,n=r.sigBytes,o=this.blockSize,s=n/(4*o),c=(s=e?t.ceil(s):t.max((0|s)-this._minBufferSize,0))*o,h=t.min(4*c,n);if(c){for(var l=0;l<c;l+=o)this._doProcessBlock(i,l);var f=i.splice(0,c);r.sigBytes-=h}return new a.init(f,h)},clone:function(){var t=o.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0}),u=(n.Hasher=f.extend({cfg:o.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){f.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(t){return function(e,r){return new t.init(r).finalize(e)}},_createHmacHelper:function(t){return function(e,r){return new u.HMAC.init(t,r).finalize(e)}}}),i.algo={});return i}(Math);return function(){var t=l,e=t.lib.WordArray;t.enc.Base64={stringify:function(t){var e=t.words,r=t.sigBytes,i=this._map;t.clamp();for(var n=[],o=0;o<r;o+=3)for(var a=(e[o>>>2]>>>24-o%4*8&255)<<16|(e[o+1>>>2]>>>24-(o+1)%4*8&255)<<8|e[o+2>>>2]>>>24-(o+2)%4*8&255,s=0;s<4&&o+.75*s<r;s++)n.push(i.charAt(a>>>6*(3-s)&63));var c=i.charAt(64);if(c)for(;n.length%4;)n.push(c);return n.join("")},parse:function(t){var r=t.length,i=this._map,n=this._reverseMap;if(!n){n=this._reverseMap=[];for(var o=0;o<i.length;o++)n[i.charCodeAt(o)]=o}var a=i.charAt(64);if(a){var s=t.indexOf(a);-1!==s&&(r=s)}return function(t,r,i){for(var n=[],o=0,a=0;a<r;a++)if(a%4){var s=i[t.charCodeAt(a-1)]<<a%4*2,c=i[t.charCodeAt(a)]>>>6-a%4*2;n[o>>>2]|=(s|c)<<24-o%4*8,o++}return e.create(n,o)}(t,r,n)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}}(),function(t){var e=l,r=e.lib,i=r.WordArray,n=r.Hasher,o=e.algo,a=[];!function(){for(var e=0;e<64;e++)a[e]=4294967296*t.abs(t.sin(e+1))|0}();var s=o.MD5=n.extend({_doReset:function(){this._hash=new i.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(t,e){for(var r=0;r<16;r++){var i=e+r,n=t[i];t[i]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8)}var o=this._hash.words,s=t[e+0],l=t[e+1],v=t[e+2],d=t[e+3],p=t[e+4],y=t[e+5],g=t[e+6],w=t[e+7],B=t[e+8],m=t[e+9],x=t[e+10],S=t[e+11],C=t[e+12],R=t[e+13],D=t[e+14],b=t[e+15],k=o[0],V=o[1],O=o[2],M=o[3];k=c(k,V,O,M,s,7,a[0]),M=c(M,k,V,O,l,12,a[1]),O=c(O,M,k,V,v,17,a[2]),V=c(V,O,M,k,d,22,a[3]),k=c(k,V,O,M,p,7,a[4]),M=c(M,k,V,O,y,12,a[5]),O=c(O,M,k,V,g,17,a[6]),V=c(V,O,M,k,w,22,a[7]),k=c(k,V,O,M,B,7,a[8]),M=c(M,k,V,O,m,12,a[9]),O=c(O,M,k,V,x,17,a[10]),V=c(V,O,M,k,S,22,a[11]),k=c(k,V,O,M,C,7,a[12]),M=c(M,k,V,O,R,12,a[13]),O=c(O,M,k,V,D,17,a[14]),k=h(k,V=c(V,O,M,k,b,22,a[15]),O,M,l,5,a[16]),M=h(M,k,V,O,g,9,a[17]),O=h(O,M,k,V,S,14,a[18]),V=h(V,O,M,k,s,20,a[19]),k=h(k,V,O,M,y,5,a[20]),M=h(M,k,V,O,x,9,a[21]),O=h(O,M,k,V,b,14,a[22]),V=h(V,O,M,k,p,20,a[23]),k=h(k,V,O,M,m,5,a[24]),M=h(M,k,V,O,D,9,a[25]),O=h(O,M,k,V,d,14,a[26]),V=h(V,O,M,k,B,20,a[27]),k=h(k,V,O,M,R,5,a[28]),M=h(M,k,V,O,v,9,a[29]),O=h(O,M,k,V,w,14,a[30]),k=f(k,V=h(V,O,M,k,C,20,a[31]),O,M,y,4,a[32]),M=f(M,k,V,O,B,11,a[33]),O=f(O,M,k,V,S,16,a[34]),V=f(V,O,M,k,D,23,a[35]),k=f(k,V,O,M,l,4,a[36]),M=f(M,k,V,O,p,11,a[37]),O=f(O,M,k,V,w,16,a[38]),V=f(V,O,M,k,x,23,a[39]),k=f(k,V,O,M,R,4,a[40]),M=f(M,k,V,O,s,11,a[41]),O=f(O,M,k,V,d,16,a[42]),V=f(V,O,M,k,g,23,a[43]),k=f(k,V,O,M,m,4,a[44]),M=f(M,k,V,O,C,11,a[45]),O=f(O,M,k,V,b,16,a[46]),k=u(k,V=f(V,O,M,k,v,23,a[47]),O,M,s,6,a[48]),M=u(M,k,V,O,w,10,a[49]),O=u(O,M,k,V,D,15,a[50]),V=u(V,O,M,k,y,21,a[51]),k=u(k,V,O,M,C,6,a[52]),M=u(M,k,V,O,d,10,a[53]),O=u(O,M,k,V,x,15,a[54]),V=u(V,O,M,k,l,21,a[55]),k=u(k,V,O,M,B,6,a[56]),M=u(M,k,V,O,b,10,a[57]),O=u(O,M,k,V,g,15,a[58]),V=u(V,O,M,k,R,21,a[59]),k=u(k,V,O,M,p,6,a[60]),M=u(M,k,V,O,S,10,a[61]),O=u(O,M,k,V,v,15,a[62]),V=u(V,O,M,k,m,21,a[63]),o[0]=o[0]+k|0,o[1]=o[1]+V|0,o[2]=o[2]+O|0,o[3]=o[3]+M|0},_doFinalize:function(){var e=this._data,r=e.words,i=8*this._nDataBytes,n=8*e.sigBytes;r[n>>>5]|=128<<24-n%32;var o=t.floor(i/4294967296),a=i;r[15+(n+64>>>9<<4)]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),r[14+(n+64>>>9<<4)]=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),e.sigBytes=4*(r.length+1),this._process();for(var s=this._hash,c=s.words,h=0;h<4;h++){var l=c[h];c[h]=16711935&(l<<8|l>>>24)|4278255360&(l<<24|l>>>8)}return s},clone:function(){var t=n.clone.call(this);return t._hash=this._hash.clone(),t}});function c(t,e,r,i,n,o,a){var s=t+(e&r|~e&i)+n+a;return(s<<o|s>>>32-o)+e}function h(t,e,r,i,n,o,a){var s=t+(e&i|r&~i)+n+a;return(s<<o|s>>>32-o)+e}function f(t,e,r,i,n,o,a){var s=t+(e^r^i)+n+a;return(s<<o|s>>>32-o)+e}function u(t,e,r,i,n,o,a){var s=t+(r^(e|~i))+n+a;return(s<<o|s>>>32-o)+e}e.MD5=n._createHelper(s),e.HmacMD5=n._createHmacHelper(s)}(Math),e=(t=l).lib,r=e.WordArray,i=e.Hasher,n=t.algo,o=[],a=n.SHA1=i.extend({_doReset:function(){this._hash=new r.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var r=this._hash.words,i=r[0],n=r[1],a=r[2],s=r[3],c=r[4],h=0;h<80;h++){if(h<16)o[h]=0|t[e+h];else{var l=o[h-3]^o[h-8]^o[h-14]^o[h-16];o[h]=l<<1|l>>>31}var f=(i<<5|i>>>27)+c+o[h];f+=h<20?1518500249+(n&a|~n&s):h<40?1859775393+(n^a^s):h<60?(n&a|n&s|a&s)-1894007588:(n^a^s)-899497514,c=s,s=a,a=n<<30|n>>>2,n=i,i=f}r[0]=r[0]+i|0,r[1]=r[1]+n|0,r[2]=r[2]+a|0,r[3]=r[3]+s|0,r[4]=r[4]+c|0},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;return e[i>>>5]|=128<<24-i%32,e[14+(i+64>>>9<<4)]=Math.floor(r/4294967296),e[15+(i+64>>>9<<4)]=r,t.sigBytes=4*e.length,this._process(),this._hash},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}}),t.SHA1=i._createHelper(a),t.HmacSHA1=i._createHmacHelper(a),function(t){var e=l,r=e.lib,i=r.WordArray,n=r.Hasher,o=e.algo,a=[],s=[];!function(){function e(e){for(var r=t.sqrt(e),i=2;i<=r;i++)if(!(e%i))return!1;return!0}function r(t){return 4294967296*(t-(0|t))|0}for(var i=2,n=0;n<64;)e(i)&&(n<8&&(a[n]=r(t.pow(i,.5))),s[n]=r(t.pow(i,1/3)),n++),i++}();var c=[],h=o.SHA256=n.extend({_doReset:function(){this._hash=new i.init(a.slice(0))},_doProcessBlock:function(t,e){for(var r=this._hash.words,i=r[0],n=r[1],o=r[2],a=r[3],h=r[4],l=r[5],f=r[6],u=r[7],v=0;v<64;v++){if(v<16)c[v]=0|t[e+v];else{var d=c[v-15],p=(d<<25|d>>>7)^(d<<14|d>>>18)^d>>>3,y=c[v-2],g=(y<<15|y>>>17)^(y<<13|y>>>19)^y>>>10;c[v]=p+c[v-7]+g+c[v-16]}var w=i&n^i&o^n&o,B=(i<<30|i>>>2)^(i<<19|i>>>13)^(i<<10|i>>>22),m=u+((h<<26|h>>>6)^(h<<21|h>>>11)^(h<<7|h>>>25))+(h&l^~h&f)+s[v]+c[v];u=f,f=l,l=h,h=a+m|0,a=o,o=n,n=i,i=m+(B+w)|0}r[0]=r[0]+i|0,r[1]=r[1]+n|0,r[2]=r[2]+o|0,r[3]=r[3]+a|0,r[4]=r[4]+h|0,r[5]=r[5]+l|0,r[6]=r[6]+f|0,r[7]=r[7]+u|0},_doFinalize:function(){var e=this._data,r=e.words,i=8*this._nDataBytes,n=8*e.sigBytes;return r[n>>>5]|=128<<24-n%32,r[14+(n+64>>>9<<4)]=t.floor(i/4294967296),r[15+(n+64>>>9<<4)]=i,e.sigBytes=4*r.length,this._process(),this._hash},clone:function(){var t=n.clone.call(this);return t._hash=this._hash.clone(),t}});e.SHA256=n._createHelper(h),e.HmacSHA256=n._createHmacHelper(h)}(Math),function(){var t=l,e=t.lib.WordArray,r=t.enc;r.Utf16=r.Utf16BE={stringify:function(t){for(var e=t.words,r=t.sigBytes,i=[],n=0;n<r;n+=2){var o=e[n>>>2]>>>16-n%4*8&65535;i.push(String.fromCharCode(o))}return i.join("")},parse:function(t){for(var r=t.length,i=[],n=0;n<r;n++)i[n>>>1]|=t.charCodeAt(n)<<16-n%2*16;return e.create(i,2*r)}};function i(t){return t<<8&4278255360|t>>>8&16711935}r.Utf16LE={stringify:function(t){for(var e=t.words,r=t.sigBytes,n=[],o=0;o<r;o+=2){var a=i(e[o>>>2]>>>16-o%4*8&65535);n.push(String.fromCharCode(a))}return n.join("")},parse:function(t){for(var r=t.length,n=[],o=0;o<r;o++)n[o>>>1]|=i(t.charCodeAt(o)<<16-o%2*16);return e.create(n,2*r)}}}(),function(){if("function"==typeof ArrayBuffer){var t=l.lib.WordArray,e=t.init;(t.init=function(t){if(t instanceof ArrayBuffer&&(t=new Uint8Array(t)),(t instanceof Int8Array||"undefined"!=typeof Uint8ClampedArray&&t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array)&&(t=new Uint8Array(t.buffer,t.byteOffset,t.byteLength)),t instanceof Uint8Array){for(var r=t.byteLength,i=[],n=0;n<r;n++)i[n>>>2]|=t[n]<<24-n%4*8;e.call(this,i,r)}else e.apply(this,arguments)}).prototype=t}}(),
/** @preserve
 (c) 2012 by Cédric Mesnil. All rights reserved.
 	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
     - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
function(t){var e=l,r=e.lib,i=r.WordArray,n=r.Hasher,o=e.algo,a=i.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),s=i.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),c=i.create([11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),h=i.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),f=i.create([0,1518500249,1859775393,2400959708,2840853838]),u=i.create([1352829926,1548603684,1836072691,2053994217,0]),v=o.RIPEMD160=n.extend({_doReset:function(){this._hash=i.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var r=0;r<16;r++){var i=e+r,n=t[i];t[i]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8)}var o,l,v,m,x,S,C,R,D,b,k,V=this._hash.words,O=f.words,M=u.words,z=a.words,H=s.words,G=c.words,U=h.words;S=o=V[0],C=l=V[1],R=v=V[2],D=m=V[3],b=x=V[4];for(r=0;r<80;r+=1)k=o+t[e+z[r]]|0,k+=r<16?d(l,v,m)+O[0]:r<32?p(l,v,m)+O[1]:r<48?y(l,v,m)+O[2]:r<64?g(l,v,m)+O[3]:w(l,v,m)+O[4],k=(k=B(k|=0,G[r]))+x|0,o=x,x=m,m=B(v,10),v=l,l=k,k=S+t[e+H[r]]|0,k+=r<16?w(C,R,D)+M[0]:r<32?g(C,R,D)+M[1]:r<48?y(C,R,D)+M[2]:r<64?p(C,R,D)+M[3]:d(C,R,D)+M[4],k=(k=B(k|=0,U[r]))+b|0,S=b,b=D,D=B(R,10),R=C,C=k;k=V[1]+v+D|0,V[1]=V[2]+m+b|0,V[2]=V[3]+x+S|0,V[3]=V[4]+o+C|0,V[4]=V[0]+l+R|0,V[0]=k},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;e[i>>>5]|=128<<24-i%32,e[14+(i+64>>>9<<4)]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8),t.sigBytes=4*(e.length+1),this._process();for(var n=this._hash,o=n.words,a=0;a<5;a++){var s=o[a];o[a]=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8)}return n},clone:function(){var t=n.clone.call(this);return t._hash=this._hash.clone(),t}});function d(t,e,r){return t^e^r}function p(t,e,r){return t&e|~t&r}function y(t,e,r){return(t|~e)^r}function g(t,e,r){return t&r|e&~r}function w(t,e,r){return t^(e|~r)}function B(t,e){return t<<e|t>>>32-e}e.RIPEMD160=n._createHelper(v),e.HmacRIPEMD160=n._createHmacHelper(v)}(Math),function(){var t=l,e=t.lib.Base,r=t.enc.Utf8;t.algo.HMAC=e.extend({init:function(t,e){t=this._hasher=new t.init,"string"==typeof e&&(e=r.parse(e));var i=t.blockSize,n=4*i;e.sigBytes>n&&(e=t.finalize(e)),e.clamp();for(var o=this._oKey=e.clone(),a=this._iKey=e.clone(),s=o.words,c=a.words,h=0;h<i;h++)s[h]^=1549556828,c[h]^=909522486;o.sigBytes=a.sigBytes=n,this.reset()},reset:function(){var t=this._hasher;t.reset(),t.update(this._iKey)},update:function(t){return this._hasher.update(t),this},finalize:function(t){var e=this._hasher,r=e.finalize(t);return e.reset(),e.finalize(this._oKey.clone().concat(r))}})}(),function(){var t=l,e=t.lib,r=e.Base,i=e.WordArray,n=t.algo,o=n.SHA1,a=n.HMAC,s=n.PBKDF2=r.extend({cfg:r.extend({keySize:4,hasher:o,iterations:1}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var r=this.cfg,n=a.create(r.hasher,t),o=i.create(),s=i.create([1]),c=o.words,h=s.words,l=r.keySize,f=r.iterations;c.length<l;){var u=n.update(e).finalize(s);n.reset();for(var v=u.words,d=v.length,p=u,y=1;y<f;y++){p=n.finalize(p),n.reset();for(var g=p.words,w=0;w<d;w++)v[w]^=g[w]}o.concat(u),h[0]++}return o.sigBytes=4*l,o}});t.PBKDF2=function(t,e,r){return s.create(r).compute(t,e)}}(),function(){var t=l,e=t.lib,r=e.Base,i=e.WordArray,n=t.algo,o=n.MD5,a=n.EvpKDF=r.extend({cfg:r.extend({keySize:4,hasher:o,iterations:1}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var r=this.cfg,n=r.hasher.create(),o=i.create(),a=o.words,s=r.keySize,c=r.iterations;a.length<s;){h&&n.update(h);var h=n.update(t).finalize(e);n.reset();for(var l=1;l<c;l++)h=n.finalize(h),n.reset();o.concat(h)}return o.sigBytes=4*s,o}});t.EvpKDF=function(t,e,r){return a.create(r).compute(t,e)}}(),function(){var t=l,e=t.lib.WordArray,r=t.algo,i=r.SHA256,n=r.SHA224=i.extend({_doReset:function(){this._hash=new e.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var t=i._doFinalize.call(this);return t.sigBytes-=4,t}});t.SHA224=i._createHelper(n),t.HmacSHA224=i._createHmacHelper(n)}(),function(t){var e=l,r=e.lib,i=r.Base,n=r.WordArray,o=e.x64={};o.Word=i.extend({init:function(t,e){this.high=t,this.low=e}}),o.WordArray=i.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:8*t.length},toX32:function(){for(var t=this.words,e=t.length,r=[],i=0;i<e;i++){var o=t[i];r.push(o.high),r.push(o.low)}return n.create(r,this.sigBytes)},clone:function(){for(var t=i.clone.call(this),e=t.words=this.words.slice(0),r=e.length,n=0;n<r;n++)e[n]=e[n].clone();return t}})}(),function(t){var e=l,r=e.lib,i=r.WordArray,n=r.Hasher,o=e.x64.Word,a=e.algo,s=[],c=[],h=[];!function(){for(var t=1,e=0,r=0;r<24;r++){s[t+5*e]=(r+1)*(r+2)/2%64;var i=(2*t+3*e)%5;t=e%5,e=i}for(t=0;t<5;t++)for(e=0;e<5;e++)c[t+5*e]=e+(2*t+3*e)%5*5;for(var n=1,a=0;a<24;a++){for(var l=0,f=0,u=0;u<7;u++){if(1&n){var v=(1<<u)-1;v<32?f^=1<<v:l^=1<<v-32}128&n?n=n<<1^113:n<<=1}h[a]=o.create(l,f)}}();var f=[];!function(){for(var t=0;t<25;t++)f[t]=o.create()}();var u=a.SHA3=n.extend({cfg:n.cfg.extend({outputLength:512}),_doReset:function(){for(var t=this._state=[],e=0;e<25;e++)t[e]=new o.init;this.blockSize=(1600-2*this.cfg.outputLength)/32},_doProcessBlock:function(t,e){for(var r=this._state,i=this.blockSize/2,n=0;n<i;n++){var o=t[e+2*n],a=t[e+2*n+1];o=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),a=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),(V=r[n]).high^=a,V.low^=o}for(var l=0;l<24;l++){for(var u=0;u<5;u++){for(var v=0,d=0,p=0;p<5;p++){v^=(V=r[u+5*p]).high,d^=V.low}var y=f[u];y.high=v,y.low=d}for(u=0;u<5;u++){var g=f[(u+4)%5],w=f[(u+1)%5],B=w.high,m=w.low;for(v=g.high^(B<<1|m>>>31),d=g.low^(m<<1|B>>>31),p=0;p<5;p++){(V=r[u+5*p]).high^=v,V.low^=d}}for(var x=1;x<25;x++){var S=(V=r[x]).high,C=V.low,R=s[x];if(R<32)v=S<<R|C>>>32-R,d=C<<R|S>>>32-R;else v=C<<R-32|S>>>64-R,d=S<<R-32|C>>>64-R;var D=f[c[x]];D.high=v,D.low=d}var b=f[0],k=r[0];b.high=k.high,b.low=k.low;for(u=0;u<5;u++)for(p=0;p<5;p++){var V=r[x=u+5*p],O=f[x],M=f[(u+1)%5+5*p],z=f[(u+2)%5+5*p];V.high=O.high^~M.high&z.high,V.low=O.low^~M.low&z.low}V=r[0];var H=h[l];V.high^=H.high,V.low^=H.low}},_doFinalize:function(){var e=this._data,r=e.words,n=(this._nDataBytes,8*e.sigBytes),o=32*this.blockSize;r[n>>>5]|=1<<24-n%32,r[(t.ceil((n+1)/o)*o>>>5)-1]|=128,e.sigBytes=4*r.length,this._process();for(var a=this._state,s=this.cfg.outputLength/8,c=s/8,h=[],l=0;l<c;l++){var f=a[l],u=f.high,v=f.low;u=16711935&(u<<8|u>>>24)|4278255360&(u<<24|u>>>8),v=16711935&(v<<8|v>>>24)|4278255360&(v<<24|v>>>8),h.push(v),h.push(u)}return new i.init(h,s)},clone:function(){for(var t=n.clone.call(this),e=t._state=this._state.slice(0),r=0;r<25;r++)e[r]=e[r].clone();return t}});e.SHA3=n._createHelper(u),e.HmacSHA3=n._createHmacHelper(u)}(Math),function(){var t=l,e=t.lib.Hasher,r=t.x64,i=r.Word,n=r.WordArray,o=t.algo;function a(){return i.create.apply(i,arguments)}var s=[a(1116352408,3609767458),a(1899447441,602891725),a(3049323471,3964484399),a(3921009573,2173295548),a(961987163,4081628472),a(1508970993,3053834265),a(2453635748,2937671579),a(2870763221,3664609560),a(3624381080,2734883394),a(310598401,1164996542),a(607225278,1323610764),a(1426881987,3590304994),a(1925078388,4068182383),a(2162078206,991336113),a(2614888103,633803317),a(3248222580,3479774868),a(3835390401,2666613458),a(4022224774,944711139),a(264347078,2341262773),a(604807628,2007800933),a(770255983,1495990901),a(1249150122,1856431235),a(1555081692,3175218132),a(1996064986,2198950837),a(2554220882,3999719339),a(2821834349,766784016),a(2952996808,2566594879),a(3210313671,3203337956),a(3336571891,1034457026),a(3584528711,2466948901),a(113926993,3758326383),a(338241895,168717936),a(666307205,1188179964),a(773529912,1546045734),a(1294757372,1522805485),a(1396182291,2643833823),a(1695183700,2343527390),a(1986661051,1014477480),a(2177026350,1206759142),a(2456956037,344077627),a(2730485921,1290863460),a(2820302411,3158454273),a(3259730800,3505952657),a(3345764771,106217008),a(3516065817,3606008344),a(3600352804,1432725776),a(4094571909,1467031594),a(275423344,851169720),a(430227734,3100823752),a(506948616,1363258195),a(659060556,3750685593),a(883997877,3785050280),a(958139571,3318307427),a(1322822218,3812723403),a(1537002063,2003034995),a(1747873779,3602036899),a(1955562222,1575990012),a(2024104815,1125592928),a(2227730452,2716904306),a(2361852424,442776044),a(2428436474,593698344),a(2756734187,3733110249),a(3204031479,2999351573),a(3329325298,3815920427),a(3391569614,3928383900),a(3515267271,566280711),a(3940187606,3454069534),a(4118630271,4000239992),a(116418474,1914138554),a(174292421,2731055270),a(289380356,3203993006),a(460393269,320620315),a(685471733,587496836),a(852142971,1086792851),a(1017036298,365543100),a(1126000580,2618297676),a(1288033470,3409855158),a(1501505948,4234509866),a(1607167915,987167468),a(1816402316,1246189591)],c=[];!function(){for(var t=0;t<80;t++)c[t]=a()}();var h=o.SHA512=e.extend({_doReset:function(){this._hash=new n.init([new i.init(1779033703,4089235720),new i.init(3144134277,2227873595),new i.init(1013904242,4271175723),new i.init(2773480762,1595750129),new i.init(1359893119,2917565137),new i.init(2600822924,725511199),new i.init(528734635,4215389547),new i.init(1541459225,327033209)])},_doProcessBlock:function(t,e){for(var r=this._hash.words,i=r[0],n=r[1],o=r[2],a=r[3],h=r[4],l=r[5],f=r[6],u=r[7],v=i.high,d=i.low,p=n.high,y=n.low,g=o.high,w=o.low,B=a.high,m=a.low,x=h.high,S=h.low,C=l.high,R=l.low,D=f.high,b=f.low,k=u.high,V=u.low,O=v,M=d,z=p,H=y,G=g,U=w,A=B,F=m,P=x,Q=S,E=C,W=R,N=D,j=b,q=k,T=V,I=0;I<80;I++){var Z=c[I];if(I<16)var L=Z.high=0|t[e+2*I],Y=Z.low=0|t[e+2*I+1];else{var X=c[I-15],K=X.high,J=X.low,_=(K>>>1|J<<31)^(K>>>8|J<<24)^K>>>7,$=(J>>>1|K<<31)^(J>>>8|K<<24)^(J>>>7|K<<25),tt=c[I-2],et=tt.high,rt=tt.low,it=(et>>>19|rt<<13)^(et<<3|rt>>>29)^et>>>6,nt=(rt>>>19|et<<13)^(rt<<3|et>>>29)^(rt>>>6|et<<26),ot=c[I-7],at=ot.high,st=ot.low,ct=c[I-16],ht=ct.high,lt=ct.low;L=(L=(L=_+at+((Y=$+st)>>>0<$>>>0?1:0))+it+((Y=Y+nt)>>>0<nt>>>0?1:0))+ht+((Y=Y+lt)>>>0<lt>>>0?1:0);Z.high=L,Z.low=Y}var ft,ut=P&E^~P&N,vt=Q&W^~Q&j,dt=O&z^O&G^z&G,pt=M&H^M&U^H&U,yt=(O>>>28|M<<4)^(O<<30|M>>>2)^(O<<25|M>>>7),gt=(M>>>28|O<<4)^(M<<30|O>>>2)^(M<<25|O>>>7),wt=(P>>>14|Q<<18)^(P>>>18|Q<<14)^(P<<23|Q>>>9),Bt=(Q>>>14|P<<18)^(Q>>>18|P<<14)^(Q<<23|P>>>9),mt=s[I],xt=mt.high,St=mt.low,Ct=q+wt+((ft=T+Bt)>>>0<T>>>0?1:0),Rt=gt+pt;q=N,T=j,N=E,j=W,E=P,W=Q,P=A+(Ct=(Ct=(Ct=Ct+ut+((ft=ft+vt)>>>0<vt>>>0?1:0))+xt+((ft=ft+St)>>>0<St>>>0?1:0))+L+((ft=ft+Y)>>>0<Y>>>0?1:0))+((Q=F+ft|0)>>>0<F>>>0?1:0)|0,A=G,F=U,G=z,U=H,z=O,H=M,O=Ct+(yt+dt+(Rt>>>0<gt>>>0?1:0))+((M=ft+Rt|0)>>>0<ft>>>0?1:0)|0}d=i.low=d+M,i.high=v+O+(d>>>0<M>>>0?1:0),y=n.low=y+H,n.high=p+z+(y>>>0<H>>>0?1:0),w=o.low=w+U,o.high=g+G+(w>>>0<U>>>0?1:0),m=a.low=m+F,a.high=B+A+(m>>>0<F>>>0?1:0),S=h.low=S+Q,h.high=x+P+(S>>>0<Q>>>0?1:0),R=l.low=R+W,l.high=C+E+(R>>>0<W>>>0?1:0),b=f.low=b+j,f.high=D+N+(b>>>0<j>>>0?1:0),V=u.low=V+T,u.high=k+q+(V>>>0<T>>>0?1:0)},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;return e[i>>>5]|=128<<24-i%32,e[30+(i+128>>>10<<5)]=Math.floor(r/4294967296),e[31+(i+128>>>10<<5)]=r,t.sigBytes=4*e.length,this._process(),this._hash.toX32()},clone:function(){var t=e.clone.call(this);return t._hash=this._hash.clone(),t},blockSize:32});t.SHA512=e._createHelper(h),t.HmacSHA512=e._createHmacHelper(h)}(),function(){var t=l,e=t.x64,r=e.Word,i=e.WordArray,n=t.algo,o=n.SHA512,a=n.SHA384=o.extend({_doReset:function(){this._hash=new i.init([new r.init(3418070365,3238371032),new r.init(1654270250,914150663),new r.init(2438529370,812702999),new r.init(355462360,4144912697),new r.init(1731405415,4290775857),new r.init(2394180231,1750603025),new r.init(3675008525,1694076839),new r.init(1203062813,3204075428)])},_doFinalize:function(){var t=o._doFinalize.call(this);return t.sigBytes-=16,t}});t.SHA384=o._createHelper(a),t.HmacSHA384=o._createHmacHelper(a)}(),l.lib.Cipher||function(t){var e=l,r=e.lib,i=r.Base,n=r.WordArray,o=r.BufferedBlockAlgorithm,a=e.enc,s=(a.Utf8,a.Base64),c=e.algo.EvpKDF,h=r.Cipher=o.extend({cfg:i.extend(),createEncryptor:function(t,e){return this.create(this._ENC_XFORM_MODE,t,e)},createDecryptor:function(t,e){return this.create(this._DEC_XFORM_MODE,t,e)},init:function(t,e,r){this.cfg=this.cfg.extend(r),this._xformMode=t,this._key=e,this.reset()},reset:function(){o.reset.call(this),this._doReset()},process:function(t){return this._append(t),this._process()},finalize:function(t){return t&&this._append(t),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){function t(t){return"string"==typeof t?B:g}return function(e){return{encrypt:function(r,i,n){return t(i).encrypt(e,r,i,n)},decrypt:function(r,i,n){return t(i).decrypt(e,r,i,n)}}}}()}),f=(r.StreamCipher=h.extend({_doFinalize:function(){return this._process(!0)},blockSize:1}),e.mode={}),u=r.BlockCipherMode=i.extend({createEncryptor:function(t,e){return this.Encryptor.create(t,e)},createDecryptor:function(t,e){return this.Decryptor.create(t,e)},init:function(t,e){this._cipher=t,this._iv=e}}),v=f.CBC=function(){var e=u.extend();function r(e,r,i){var n=this._iv;if(n){var o=n;this._iv=t}else o=this._prevBlock;for(var a=0;a<i;a++)e[r+a]^=o[a]}return e.Encryptor=e.extend({processBlock:function(t,e){var i=this._cipher,n=i.blockSize;r.call(this,t,e,n),i.encryptBlock(t,e),this._prevBlock=t.slice(e,e+n)}}),e.Decryptor=e.extend({processBlock:function(t,e){var i=this._cipher,n=i.blockSize,o=t.slice(e,e+n);i.decryptBlock(t,e),r.call(this,t,e,n),this._prevBlock=o}}),e}(),d=(e.pad={}).Pkcs7={pad:function(t,e){for(var r=4*e,i=r-t.sigBytes%r,o=i<<24|i<<16|i<<8|i,a=[],s=0;s<i;s+=4)a.push(o);var c=n.create(a,i);t.concat(c)},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},p=(r.BlockCipher=h.extend({cfg:h.cfg.extend({mode:v,padding:d}),reset:function(){h.reset.call(this);var t=this.cfg,e=t.iv,r=t.mode;if(this._xformMode==this._ENC_XFORM_MODE)var i=r.createEncryptor;else{i=r.createDecryptor;this._minBufferSize=1}this._mode&&this._mode.__creator==i?this._mode.init(this,e&&e.words):(this._mode=i.call(r,this,e&&e.words),this._mode.__creator=i)},_doProcessBlock:function(t,e){this._mode.processBlock(t,e)},_doFinalize:function(){var t=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){t.pad(this._data,this.blockSize);var e=this._process(!0)}else{e=this._process(!0);t.unpad(e)}return e},blockSize:4}),r.CipherParams=i.extend({init:function(t){this.mixIn(t)},toString:function(t){return(t||this.formatter).stringify(this)}})),y=(e.format={}).OpenSSL={stringify:function(t){var e=t.ciphertext,r=t.salt;if(r)var i=n.create([1398893684,1701076831]).concat(r).concat(e);else i=e;return i.toString(s)},parse:function(t){var e=s.parse(t),r=e.words;if(1398893684==r[0]&&1701076831==r[1]){var i=n.create(r.slice(2,4));r.splice(0,4),e.sigBytes-=16}return p.create({ciphertext:e,salt:i})}},g=r.SerializableCipher=i.extend({cfg:i.extend({format:y}),encrypt:function(t,e,r,i){i=this.cfg.extend(i);var n=t.createEncryptor(r,i),o=n.finalize(e),a=n.cfg;return p.create({ciphertext:o,key:r,iv:a.iv,algorithm:t,mode:a.mode,padding:a.padding,blockSize:t.blockSize,formatter:i.format})},decrypt:function(t,e,r,i){return i=this.cfg.extend(i),e=this._parse(e,i.format),t.createDecryptor(r,i).finalize(e.ciphertext)},_parse:function(t,e){return"string"==typeof t?e.parse(t,this):t}}),w=(e.kdf={}).OpenSSL={execute:function(t,e,r,i){i||(i=n.random(8));var o=c.create({keySize:e+r}).compute(t,i),a=n.create(o.words.slice(e),4*r);return o.sigBytes=4*e,p.create({key:o,iv:a,salt:i})}},B=r.PasswordBasedCipher=g.extend({cfg:g.cfg.extend({kdf:w}),encrypt:function(t,e,r,i){var n=(i=this.cfg.extend(i)).kdf.execute(r,t.keySize,t.ivSize);i.iv=n.iv;var o=g.encrypt.call(this,t,e,n.key,i);return o.mixIn(n),o},decrypt:function(t,e,r,i){i=this.cfg.extend(i),e=this._parse(e,i.format);var n=i.kdf.execute(r,t.keySize,t.ivSize,e.salt);return i.iv=n.iv,g.decrypt.call(this,t,e,n.key,i)}})}(),l.mode.CFB=function(){var t=l.lib.BlockCipherMode.extend();function e(t,e,r,i){var n=this._iv;if(n){var o=n.slice(0);this._iv=void 0}else o=this._prevBlock;i.encryptBlock(o,0);for(var a=0;a<r;a++)t[e+a]^=o[a]}return t.Encryptor=t.extend({processBlock:function(t,r){var i=this._cipher,n=i.blockSize;e.call(this,t,r,n,i),this._prevBlock=t.slice(r,r+n)}}),t.Decryptor=t.extend({processBlock:function(t,r){var i=this._cipher,n=i.blockSize,o=t.slice(r,r+n);e.call(this,t,r,n,i),this._prevBlock=o}}),t}(),l.mode.ECB=((s=l.lib.BlockCipherMode.extend()).Encryptor=s.extend({processBlock:function(t,e){this._cipher.encryptBlock(t,e)}}),s.Decryptor=s.extend({processBlock:function(t,e){this._cipher.decryptBlock(t,e)}}),s),l.pad.AnsiX923={pad:function(t,e){var r=t.sigBytes,i=4*e,n=i-r%i,o=r+n-1;t.clamp(),t.words[o>>>2]|=n<<24-o%4*8,t.sigBytes+=n},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},l.pad.Iso10126={pad:function(t,e){var r=4*e,i=r-t.sigBytes%r;t.concat(l.lib.WordArray.random(i-1)).concat(l.lib.WordArray.create([i<<24],1))},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},l.pad.Iso97971={pad:function(t,e){t.concat(l.lib.WordArray.create([2147483648],1)),l.pad.ZeroPadding.pad(t,e)},unpad:function(t){l.pad.ZeroPadding.unpad(t),t.sigBytes--}},l.mode.OFB=(c=l.lib.BlockCipherMode.extend(),h=c.Encryptor=c.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize,n=this._iv,o=this._keystream;n&&(o=this._keystream=n.slice(0),this._iv=void 0),r.encryptBlock(o,0);for(var a=0;a<i;a++)t[e+a]^=o[a]}}),c.Decryptor=h,c),l.pad.NoPadding={pad:function(){},unpad:function(){}},function(t){var e=l,r=e.lib.CipherParams,i=e.enc.Hex;e.format.Hex={stringify:function(t){return t.ciphertext.toString(i)},parse:function(t){var e=i.parse(t);return r.create({ciphertext:e})}}}(),function(){var t=l,e=t.lib.BlockCipher,r=t.algo,i=[],n=[],o=[],a=[],s=[],c=[],h=[],f=[],u=[],v=[];!function(){for(var t=[],e=0;e<256;e++)t[e]=e<128?e<<1:e<<1^283;var r=0,l=0;for(e=0;e<256;e++){var d=l^l<<1^l<<2^l<<3^l<<4;d=d>>>8^255&d^99,i[r]=d,n[d]=r;var p=t[r],y=t[p],g=t[y],w=257*t[d]^16843008*d;o[r]=w<<24|w>>>8,a[r]=w<<16|w>>>16,s[r]=w<<8|w>>>24,c[r]=w;w=16843009*g^65537*y^257*p^16843008*r;h[d]=w<<24|w>>>8,f[d]=w<<16|w>>>16,u[d]=w<<8|w>>>24,v[d]=w,r?(r=p^t[t[t[g^p]]],l^=t[t[l]]):r=l=1}}();var d=[0,1,2,4,8,16,32,64,128,27,54],p=r.AES=e.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var t=this._keyPriorReset=this._key,e=t.words,r=t.sigBytes/4,n=4*((this._nRounds=r+6)+1),o=this._keySchedule=[],a=0;a<n;a++)if(a<r)o[a]=e[a];else{var s=o[a-1];a%r?r>6&&a%r==4&&(s=i[s>>>24]<<24|i[s>>>16&255]<<16|i[s>>>8&255]<<8|i[255&s]):(s=i[(s=s<<8|s>>>24)>>>24]<<24|i[s>>>16&255]<<16|i[s>>>8&255]<<8|i[255&s],s^=d[a/r|0]<<24),o[a]=o[a-r]^s}for(var c=this._invKeySchedule=[],l=0;l<n;l++){a=n-l;if(l%4)s=o[a];else s=o[a-4];c[l]=l<4||a<=4?s:h[i[s>>>24]]^f[i[s>>>16&255]]^u[i[s>>>8&255]]^v[i[255&s]]}}},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._keySchedule,o,a,s,c,i)},decryptBlock:function(t,e){var r=t[e+1];t[e+1]=t[e+3],t[e+3]=r,this._doCryptBlock(t,e,this._invKeySchedule,h,f,u,v,n);r=t[e+1];t[e+1]=t[e+3],t[e+3]=r},_doCryptBlock:function(t,e,r,i,n,o,a,s){for(var c=this._nRounds,h=t[e]^r[0],l=t[e+1]^r[1],f=t[e+2]^r[2],u=t[e+3]^r[3],v=4,d=1;d<c;d++){var p=i[h>>>24]^n[l>>>16&255]^o[f>>>8&255]^a[255&u]^r[v++],y=i[l>>>24]^n[f>>>16&255]^o[u>>>8&255]^a[255&h]^r[v++],g=i[f>>>24]^n[u>>>16&255]^o[h>>>8&255]^a[255&l]^r[v++],w=i[u>>>24]^n[h>>>16&255]^o[l>>>8&255]^a[255&f]^r[v++];h=p,l=y,f=g,u=w}p=(s[h>>>24]<<24|s[l>>>16&255]<<16|s[f>>>8&255]<<8|s[255&u])^r[v++],y=(s[l>>>24]<<24|s[f>>>16&255]<<16|s[u>>>8&255]<<8|s[255&h])^r[v++],g=(s[f>>>24]<<24|s[u>>>16&255]<<16|s[h>>>8&255]<<8|s[255&l])^r[v++],w=(s[u>>>24]<<24|s[h>>>16&255]<<16|s[l>>>8&255]<<8|s[255&f])^r[v++];t[e]=p,t[e+1]=y,t[e+2]=g,t[e+3]=w},keySize:8});t.AES=e._createHelper(p)}(),function(){var t=l,e=t.lib,r=e.WordArray,i=e.BlockCipher,n=t.algo,o=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],a=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],s=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],c=[{0:8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{0:1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{0:260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{0:2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{0:128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{0:268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{0:1048576,16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{0:134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],h=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],f=n.DES=i.extend({_doReset:function(){for(var t=this._key.words,e=[],r=0;r<56;r++){var i=o[r]-1;e[r]=t[i>>>5]>>>31-i%32&1}for(var n=this._subKeys=[],c=0;c<16;c++){var h=n[c]=[],l=s[c];for(r=0;r<24;r++)h[r/6|0]|=e[(a[r]-1+l)%28]<<31-r%6,h[4+(r/6|0)]|=e[28+(a[r+24]-1+l)%28]<<31-r%6;h[0]=h[0]<<1|h[0]>>>31;for(r=1;r<7;r++)h[r]=h[r]>>>4*(r-1)+3;h[7]=h[7]<<5|h[7]>>>27}var f=this._invSubKeys=[];for(r=0;r<16;r++)f[r]=n[15-r]},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._subKeys)},decryptBlock:function(t,e){this._doCryptBlock(t,e,this._invSubKeys)},_doCryptBlock:function(t,e,r){this._lBlock=t[e],this._rBlock=t[e+1],u.call(this,4,252645135),u.call(this,16,65535),v.call(this,2,858993459),v.call(this,8,16711935),u.call(this,1,1431655765);for(var i=0;i<16;i++){for(var n=r[i],o=this._lBlock,a=this._rBlock,s=0,l=0;l<8;l++)s|=c[l][((a^n[l])&h[l])>>>0];this._lBlock=a,this._rBlock=o^s}var f=this._lBlock;this._lBlock=this._rBlock,this._rBlock=f,u.call(this,1,1431655765),v.call(this,8,16711935),v.call(this,2,858993459),u.call(this,16,65535),u.call(this,4,252645135),t[e]=this._lBlock,t[e+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});function u(t,e){var r=(this._lBlock>>>t^this._rBlock)&e;this._rBlock^=r,this._lBlock^=r<<t}function v(t,e){var r=(this._rBlock>>>t^this._lBlock)&e;this._lBlock^=r,this._rBlock^=r<<t}t.DES=i._createHelper(f);var d=n.TripleDES=i.extend({_doReset:function(){var t=this._key.words;this._des1=f.createEncryptor(r.create(t.slice(0,2))),this._des2=f.createEncryptor(r.create(t.slice(2,4))),this._des3=f.createEncryptor(r.create(t.slice(4,6)))},encryptBlock:function(t,e){this._des1.encryptBlock(t,e),this._des2.decryptBlock(t,e),this._des3.encryptBlock(t,e)},decryptBlock:function(t,e){this._des3.decryptBlock(t,e),this._des2.encryptBlock(t,e),this._des1.decryptBlock(t,e)},keySize:6,ivSize:2,blockSize:2});t.TripleDES=i._createHelper(d)}(),function(){var t=l,e=t.lib.StreamCipher,r=t.algo,i=r.RC4=e.extend({_doReset:function(){for(var t=this._key,e=t.words,r=t.sigBytes,i=this._S=[],n=0;n<256;n++)i[n]=n;n=0;for(var o=0;n<256;n++){var a=n%r,s=e[a>>>2]>>>24-a%4*8&255;o=(o+i[n]+s)%256;var c=i[n];i[n]=i[o],i[o]=c}this._i=this._j=0},_doProcessBlock:function(t,e){t[e]^=n.call(this)},keySize:8,ivSize:0});function n(){for(var t=this._S,e=this._i,r=this._j,i=0,n=0;n<4;n++){r=(r+t[e=(e+1)%256])%256;var o=t[e];t[e]=t[r],t[r]=o,i|=t[(t[e]+t[r])%256]<<24-8*n}return this._i=e,this._j=r,i}t.RC4=e._createHelper(i);var o=r.RC4Drop=i.extend({cfg:i.cfg.extend({drop:192}),_doReset:function(){i._doReset.call(this);for(var t=this.cfg.drop;t>0;t--)n.call(this)}});t.RC4Drop=e._createHelper(o)}(),
/** @preserve
  * Counter block mode compatible with  Dr Brian Gladman fileenc.c
  * derived from CryptoJS.mode.CTR
  * Jan Hruby jhruby.web@gmail.com
  */
l.mode.CTRGladman=function(){var t=l.lib.BlockCipherMode.extend();function e(t){if(255==(t>>24&255)){var e=t>>16&255,r=t>>8&255,i=255&t;255===e?(e=0,255===r?(r=0,255===i?i=0:++i):++r):++e,t=0,t+=e<<16,t+=r<<8,t+=i}else t+=1<<24;return t}var r=t.Encryptor=t.extend({processBlock:function(t,r){var i=this._cipher,n=i.blockSize,o=this._iv,a=this._counter;o&&(a=this._counter=o.slice(0),this._iv=void 0),function(t){0===(t[0]=e(t[0]))&&(t[1]=e(t[1]))}(a);var s=a.slice(0);i.encryptBlock(s,0);for(var c=0;c<n;c++)t[r+c]^=s[c]}});return t.Decryptor=r,t}(),function(){var t=l,e=t.lib.StreamCipher,r=t.algo,i=[],n=[],o=[],a=r.Rabbit=e.extend({_doReset:function(){for(var t=this._key.words,e=this.cfg.iv,r=0;r<4;r++)t[r]=16711935&(t[r]<<8|t[r]>>>24)|4278255360&(t[r]<<24|t[r]>>>8);var i=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],n=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]];this._b=0;for(r=0;r<4;r++)s.call(this);for(r=0;r<8;r++)n[r]^=i[r+4&7];if(e){var o=e.words,a=o[0],c=o[1],h=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),l=16711935&(c<<8|c>>>24)|4278255360&(c<<24|c>>>8),f=h>>>16|4294901760&l,u=l<<16|65535&h;n[0]^=h,n[1]^=f,n[2]^=l,n[3]^=u,n[4]^=h,n[5]^=f,n[6]^=l,n[7]^=u;for(r=0;r<4;r++)s.call(this)}},_doProcessBlock:function(t,e){var r=this._X;s.call(this),i[0]=r[0]^r[5]>>>16^r[3]<<16,i[1]=r[2]^r[7]>>>16^r[5]<<16,i[2]=r[4]^r[1]>>>16^r[7]<<16,i[3]=r[6]^r[3]>>>16^r[1]<<16;for(var n=0;n<4;n++)i[n]=16711935&(i[n]<<8|i[n]>>>24)|4278255360&(i[n]<<24|i[n]>>>8),t[e+n]^=i[n]},blockSize:4,ivSize:2});function s(){for(var t=this._X,e=this._C,r=0;r<8;r++)n[r]=e[r];e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<n[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<n[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<n[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<n[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<n[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<n[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<n[6]>>>0?1:0)|0,this._b=e[7]>>>0<n[7]>>>0?1:0;for(r=0;r<8;r++){var i=t[r]+e[r],a=65535&i,s=i>>>16,c=((a*a>>>17)+a*s>>>15)+s*s,h=((4294901760&i)*i|0)+((65535&i)*i|0);o[r]=c^h}t[0]=o[0]+(o[7]<<16|o[7]>>>16)+(o[6]<<16|o[6]>>>16)|0,t[1]=o[1]+(o[0]<<8|o[0]>>>24)+o[7]|0,t[2]=o[2]+(o[1]<<16|o[1]>>>16)+(o[0]<<16|o[0]>>>16)|0,t[3]=o[3]+(o[2]<<8|o[2]>>>24)+o[1]|0,t[4]=o[4]+(o[3]<<16|o[3]>>>16)+(o[2]<<16|o[2]>>>16)|0,t[5]=o[5]+(o[4]<<8|o[4]>>>24)+o[3]|0,t[6]=o[6]+(o[5]<<16|o[5]>>>16)+(o[4]<<16|o[4]>>>16)|0,t[7]=o[7]+(o[6]<<8|o[6]>>>24)+o[5]|0}t.Rabbit=e._createHelper(a)}(),l.mode.CTR=function(){var t=l.lib.BlockCipherMode.extend(),e=t.Encryptor=t.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize,n=this._iv,o=this._counter;n&&(o=this._counter=n.slice(0),this._iv=void 0);var a=o.slice(0);r.encryptBlock(a,0),o[i-1]=o[i-1]+1|0;for(var s=0;s<i;s++)t[e+s]^=a[s]}});return t.Decryptor=e,t}(),function(){var t=l,e=t.lib.StreamCipher,r=t.algo,i=[],n=[],o=[],a=r.RabbitLegacy=e.extend({_doReset:function(){var t=this._key.words,e=this.cfg.iv,r=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],i=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]];this._b=0;for(var n=0;n<4;n++)s.call(this);for(n=0;n<8;n++)i[n]^=r[n+4&7];if(e){var o=e.words,a=o[0],c=o[1],h=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),l=16711935&(c<<8|c>>>24)|4278255360&(c<<24|c>>>8),f=h>>>16|4294901760&l,u=l<<16|65535&h;i[0]^=h,i[1]^=f,i[2]^=l,i[3]^=u,i[4]^=h,i[5]^=f,i[6]^=l,i[7]^=u;for(n=0;n<4;n++)s.call(this)}},_doProcessBlock:function(t,e){var r=this._X;s.call(this),i[0]=r[0]^r[5]>>>16^r[3]<<16,i[1]=r[2]^r[7]>>>16^r[5]<<16,i[2]=r[4]^r[1]>>>16^r[7]<<16,i[3]=r[6]^r[3]>>>16^r[1]<<16;for(var n=0;n<4;n++)i[n]=16711935&(i[n]<<8|i[n]>>>24)|4278255360&(i[n]<<24|i[n]>>>8),t[e+n]^=i[n]},blockSize:4,ivSize:2});function s(){for(var t=this._X,e=this._C,r=0;r<8;r++)n[r]=e[r];e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<n[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<n[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<n[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<n[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<n[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<n[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<n[6]>>>0?1:0)|0,this._b=e[7]>>>0<n[7]>>>0?1:0;for(r=0;r<8;r++){var i=t[r]+e[r],a=65535&i,s=i>>>16,c=((a*a>>>17)+a*s>>>15)+s*s,h=((4294901760&i)*i|0)+((65535&i)*i|0);o[r]=c^h}t[0]=o[0]+(o[7]<<16|o[7]>>>16)+(o[6]<<16|o[6]>>>16)|0,t[1]=o[1]+(o[0]<<8|o[0]>>>24)+o[7]|0,t[2]=o[2]+(o[1]<<16|o[1]>>>16)+(o[0]<<16|o[0]>>>16)|0,t[3]=o[3]+(o[2]<<8|o[2]>>>24)+o[1]|0,t[4]=o[4]+(o[3]<<16|o[3]>>>16)+(o[2]<<16|o[2]>>>16)|0,t[5]=o[5]+(o[4]<<8|o[4]>>>24)+o[3]|0,t[6]=o[6]+(o[5]<<16|o[5]>>>16)+(o[4]<<16|o[4]>>>16)|0,t[7]=o[7]+(o[6]<<8|o[6]>>>24)+o[5]|0}t.RabbitLegacy=e._createHelper(a)}(),l.pad.ZeroPadding={pad:function(t,e){var r=4*e;t.clamp(),t.sigBytes+=r-(t.sigBytes%r||r)},unpad:function(t){for(var e=t.words,r=t.sigBytes-1;!(e[r>>>2]>>>24-r%4*8&255);)r--;t.sigBytes=r+1}},l},"object"===s(e)?t.exports=e=a():(n=[],void 0===(o="function"==typeof(i=a)?i.apply(e,n):i)||(t.exports=o))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i="do/XV13+4SDaIerzOzVbBB9Hv7N8yJSyg5h4X25DqUujiI0Ti6wgxSnnwFEFrAKfC/x08NMlw5fKdC9jOHi7pqM8AOnJ1WOXvAdH47t/51PHGT3O5zWcjleS6kUGpx4Y04ax9MHvt6uBb9NHvHBhhu4ddJmoHcywgxaYw1ywxriCPFO4OD1l73fQlX9hiUAeu8QavG8MY1ZugWdTMA6rVSrtvyJw6pOXC/vt2ViDbiM=";e.handleBusinessLoanTotalResponse=function(t){t(i)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i="";e.handleBusinessRepaymentPlanResponse=function(t){t(i)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i="6cHn+k/UV7bRTq4m4XSosTe5/VKWzXmsfSRMpoSfYkpB0bfIqaisj3nudQIH/OfgInX7TGa+7+HfgrB2epjGl+HklZ8NTVhLUY5Mxvvov0NqJNNdaCQz+Q3fjA5qysT2yAR7WYVHg5LxvBIYoMaFSGvgmP5ZBhQ9t6cZv8/6N4WjooMZkXA/qk/JUr1xTn5qSm0Gn7sZThEkWlfBjzAtrV825Yrn2mwgj1vZ02G1iEAmsoDRV1NERYPLyS1J4miRuz1SxpihG6BsE9ii+30Rx3uR3WlM5Gwwdrff1vTSTep/M71oBbakvTVZ+mY/ss1C1GiOb46Xy3AI0AC/tFukz1AECPgXs3fVWJHArXfyFnknelV5sntN4XXgfrPhjV6R0/AXpVRdDIEkvnTudo9OTiYXrl756VY/mKoyka9WtXGgJ/9hV93BsRNnTwzQYIkyUCbvHJcqtkBK+amf0j18/2vi7VZVywJT22G5KH1mu+IaxEnnVr8A4bePR1ZutLad6EE+CByoSemxxNeIX6JvoZASmrLlamacTdXnk5Wtd0v95wY1CyZ5+BqNS1xl1cZkIUyquflYFB4BxR8wkjExhrmDqyXdfSAuSTb5FYnM89MRf0Wp5pfXSllMTR36gK8T72p65UceanbSs4p3sRmlC5UBxLYcmPdb8mxQ1E1hkuF6qp00xQx3aJnIng8TVHq0J0oyQ71n6NOF1RRPHMyvrRNIKEQZKitg8OHYJrHNI6+E2z8cU1CnJgrNSC2oqU0mnsSEbe6EGZd0U2UfJdUlaVC7slNMs1dlipDzkcK3ra6/fkdbHqC7xZ54L9ZgSeLnpeRA9Aus7moVx+D5p9NgN12oysBB3HfuZ8kSr0NPkHv1SfjBnTslGAfj1mvcJ6NMm13RxRQoVgppTbBQUK8VOgj+csjg6jbdSuvq6rg/XgoNyf4yi7hvNgNyvI4QcSq61j5UWjmunzu6dRoxlF04B8fz0MfA6NbpngOqb7Qs9FfhfE5+ZKnUsn4owe8C6SRXPcw/oSUBvOFPL3LXvIve2GlSOlkavjdFaaVx6bLpY8SnGjO1cA4TXrbdGM5zzW1EFfG+aRngyAU6esz1rdUQ7yRC1t0fe29Dd7JgKQwTKm3356uUpeDxZbPieDpDYw4zYs3RkEDzBe2pgbx+q0qhJh+R/1DX1T1z//Iwa+LAIbjiuxQQ2vlPfzuLyYfzxB8ZEu3fmwSVjvk8CUqclY/5/IO2Ha6+qeWczxurQU3WRmBD8BJ/tmy5tENMaPOZ0YC6TWAlGd6Sx1W5e4tmidxOPs4hqkn6HXKpN5CbqP74YH3uga9ndj11ACdU1p47VvasxpD7+c5EmMw9pOl9GoWoX5U/uzbH78JH/0OO3NHi2WKy/tgixLcv0h5SCjx+2miwP0PukiLBLLfV6EVZMAbxXXabNqus9s0swSIr7SAqGlouyykNImpSZQX4vFU3J/STX36eVYDfVfQn6WNq80yT6nDFPTrivbnSdE1pTHIQ/iaGmynCDh9AEsqlCvW+l0W9BKgoC4URYLWOJaCSoPLWqsnSZphRMkUfMuooFsScg3s=";e.handleFundLoanTotalResponse=function(t){t(i)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i="huI29cXOKhYJOOvdgJHXbDuNhO88RGE3fw6U5+ZAFjhLEfCOsBmZUcxguCWHoZgw2UKupeT+p7KVpVtvyHB9MV+KlU2WhEtL9omCyKDNIvpbMWzermSNTC7E+oO6ERnbqU0sjh3hMqXjVhSdi2fEcQxoxzKuA/QG+h6kHfLqUel/DWBUld3QcQn3XlKREJNkqS4HwtdKPYsf6ZcRpUuQcIZodnEKn6X1dbBQydFYUkUQQY7IeOSrTxF3d9kGgmA9Xr/6DQzIySekrnTwpXxs7ItODAJceCMapvTulNvFUkq4PzmcIj6pXZ2Sff4shRCG6yITX6+bhKQsZ+g0Gql52voddr7nMHQY3Wf8FbvKPkCzuci7CfusRyT6SAv2k2iCgCuYJRwuQceAFDwSA/SQna4aTa72rqbAcULiQOK6Plgbmi+BVvx0JERZrlqc1fiqX1sDKq9NclESJGU/X1ZGIbTTLo+CsILzV2aS5q7mL/r6L1jFgQAowI+Vs+SWA4SzUg86BrpnFp/xMVeD6fnFEm4lVKu9NBYA/FCx5nV2S3BIy3pTPABghjPkUCwSKzzkLjpoCCD6wVaZ0nmQhDAe+uZCB8nUuAeuTS4eBo/MWHBHCwk/NqpgfPUnSaht1BYGBOYxKcrO9cwdAn5YrVyaENJYuXRwTNhHMnfPt+aYG16WehDPsH7ZHwpktwGS8GUdsXtUyr6s6UBWqTts9fbLq/irJN625MxBx6ZhnEMD2BS/ZRf5cYcC1s0kD+Ato007py2BmBUFl/L6oQ01XhLR3QLV2mlWOD0xgUBN7ffpCjbtyf/lfLbI6JyGBlr5e9rA4rlOKw0V3zvV4B8YPm2uWMCom5OzPmJA1IRgci9BLXyqsHCEUwPTuPKozKEYjj6R2LGZeYFzr9pUKtpudS3Az4i6V8tN5RRG4GAjlEkJvsaD5J+h+QIY2u92sy9Q/qN7VQJKlY0kasY5jbhyfOKbM81lCC1JRPxZtVfw3fAd/jV1KkJoS8ODLSaPCm+EYCDRuo8MYVSl1n8ogjoS1IX1GAI1EQUfmoQVFZNJnJFcNCeJXJBkkke5gw8Pexr2G1JAr+krZaPxyfsbp0xJ6Rhu/K6AIrHgVrG9fcApa5VoV1tn/a2wOk5/RF+pPvH2EvPdJTp1CkvHOxDE3+I7Mflin3JPgBMb3b/qTwmD7ljZF7QoggeND0haSzhrAoCXMRPV1hLDIWbTyKE02DLmPem3BMlQpuC3+PbJqDRv1E7h8CFtqL4bTu3YyzKgUBhAd6Ptb40zV+wsPmsznt33ZEQydBzCDycU5z5W1foaqU0IuouR7yjpgDcLkfqjjSBFw5i526MfIacnm0cG7TgCyxr1gojOy/dWAheX8XHEk8pO2mDfnJZrfriyqSWrvql1lc/9dsGtzu3XYaroB12zhB0DoRjjnQ77X8f0IGHwyWfxhTVKAktDugm2hGR5lwHOwHZkaMJfrIOvhS0mhjponWf3IPcVlwepeWEr+PpV+65yZrtLJWKZJjDSBpKYfarcFK+VNwILZzH5FIeVc4MwX7mYZert7dA6yxluexAETbM79IV/Fo5sY+w6mLkKJxkk5PEV4mLmqO5X3EqNbDF/B9fr/ItODAJceCMapvTulNvFUkrayl8B6/XpiVF6xNHlczllqOn3z2MwZU+XA3N6IRiA1m2gBom9ANsDa/aoXw+PAw2zuci7CfusRyT6SAv2k2iC1rOzbmOAGrMWJOZ+cOgPZHuKsp9l8pyJi3MqVxCB4ih+S/LgN2eAFx9gng5AK8KZX1sDKq9NclESJGU/X1ZGIdkaWFH1ZjKexQCpsn2dLFavL4ov5RV5nz7JnX/ORjeWUg86BrpnFp/xMVeD6fnFEm4lVKu9NBYA/FCx5nV2S3BIy3pTPABghjPkUCwSKzzkYhCrEcpyYmybducQC2431b8y3zYP4AGR0yMuHJcNHKY=";e.handleFundRepaymentPlanResponse=function(t){t(i)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i="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";e.handleCarLoanTotalResponse=function(t){t(i)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i="";e.handleCarRepaymentPlanResponse=function(t){t(i)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2luZGV4L2VudGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvY3J5cHRvLWpzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9kYXRhL2J1c2luZXNzLWxvYW4tdG90YWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2RhdGEvYnVzaW5lc3MtcmVwYXltZW50LXBsYW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2RhdGEvZnVuZC1sb2FuLXRvdGFsLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9kYXRhL2Z1bmQtcmVwYXltZW50LXBsYW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2RhdGEvY2FyLWxvYW4tdG90YWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2RhdGEvY2FyLXJlcGF5bWVudC1wbGFuLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX2NyeXB0b0pzIiwiX2J1c2luZXNzTG9hblRvdGFsIiwiX2J1c2luZXNzUmVwYXltZW50UGxhbiIsIl9mdW5kTG9hblRvdGFsIiwiX2Z1bmRSZXBheW1lbnRQbGFuIiwiX2NhckxvYW5Ub3RhbCIsIl9jYXJSZXBheW1lbnRQbGFuIiwiJCIsInZhbCIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwib25jbGljayIsIlN0b3JhZ2UiLCJzZXRJdGVtIiwiaW5uZXJIVE1MIiwibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsInJlZ2lzdGVyIiwidGhlbiIsInJlZ2lzdHJhdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJzY29wZSIsInNlY3JldEtleSIsImRlY3J5cHRlZERhdGEiLCJhZXNEYXRhIiwibGVuZ3RoIiwiQ3J5cHRvSlMiLCJlbmMiLCJVdGY4IiwicGFyc2UiLCJBRVMiLCJkZWNyeXB0IiwiRUNCIiwicGFkZGluZyIsInBhZCIsIlplcm9QYWRkaW5nIiwic3RyaW5naWZ5IiwidG9TdHJpbmciLCJlIiwiaGFuZGxlQnVzaW5lc3NMb2FuVG90YWxSZXNwb25zZSIsImRhdGEiLCJyZXBsYWNlIiwianNvbkRhdGEiLCJKU09OIiwiaHRtbCIsImRMb25BbXQiLCJkQ3VyQmFsIiwic0xvbkRhdCIsInNFeHBEYXQiLCJjc3MiLCJkaXNwbGF5IiwiaGFuZGxlQnVzaW5lc3NSZXBheW1lbnRQbGFuUmVzcG9uc2UiLCJoYW5kbGVGdW5kTG9hblRvdGFsUmVzcG9uc2UiLCJsb2FuQmFuayIsImxvYW5SYXRlIiwicHVuaXNoUmF0ZSIsImxvYW5BbW91bnQiLCJyZW1haW5BbW91bnQiLCJsb2FuQmVnaW5EYXRlIiwibG9hbkVuZERhdGUiLCJoYW5kbGVGdW5kUmVwYXltZW50UGxhblJlc3BvbnNlIiwiaGFuZGxlQ2FyTG9hblRvdGFsUmVzcG9uc2UiLCJJTkZCRFkiLCJXQ0xOUUxOMVoxIiwiUkFURVhFIiwiVVNEQU1UIiwiQ1BUU1VNIiwiQklMVVBEIiwiRU5ERFRFIiwiaGFuZGxlQ2FyUmVwYXltZW50UGxhblJlc3BvbnNlIiwiZmFjdG9yeSIsIkMiLCJDX2xpYiIsIldvcmRBcnJheSIsIkhhc2hlciIsIkNfYWxnbyIsIlciLCJTSEExIiwiT0ZCIiwiRW5jcnlwdG9yIiwiTWF0aCIsInVuZGVmaW5lZCIsIkYiLCJvYmoiLCJzdWJ0eXBlIiwibGliIiwiQmFzZSIsImV4dGVuZCIsIm92ZXJyaWRlcyIsInRoaXMiLCJtaXhJbiIsImluaXQiLCIkc3VwZXIiLCJhcHBseSIsImFyZ3VtZW50cyIsImluc3RhbmNlIiwicHJvcGVydGllcyIsInByb3BlcnR5TmFtZSIsImNsb25lIiwid29yZHMiLCJzaWdCeXRlcyIsImVuY29kZXIiLCJIZXgiLCJjb25jYXQiLCJ3b3JkQXJyYXkiLCJ0aGlzV29yZHMiLCJ0aGF0V29yZHMiLCJ0aGlzU2lnQnl0ZXMiLCJ0aGF0U2lnQnl0ZXMiLCJjbGFtcCIsInRoYXRCeXRlIiwiY2VpbCIsInNsaWNlIiwicmFuZG9tIiwibkJ5dGVzIiwicmNhY2hlIiwibV93IiwibV96IiwibWFzayIsInJlc3VsdCIsIl9yIiwicHVzaCIsIkNfZW5jIiwiaGV4Q2hhcnMiLCJiaXRlIiwiam9pbiIsImhleFN0ciIsImhleFN0ckxlbmd0aCIsInBhcnNlSW50Iiwic3Vic3RyIiwiTGF0aW4xIiwibGF0aW4xQ2hhcnMiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJsYXRpbjFTdHIiLCJsYXRpbjFTdHJMZW5ndGgiLCJjaGFyQ29kZUF0IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXNjYXBlIiwiRXJyb3IiLCJ1dGY4U3RyIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJCdWZmZXJlZEJsb2NrQWxnb3JpdGhtIiwicmVzZXQiLCJfZGF0YSIsIl9uRGF0YUJ5dGVzIiwiX2FwcGVuZCIsIl9wcm9jZXNzIiwiZG9GbHVzaCIsImRhdGFXb3JkcyIsImRhdGFTaWdCeXRlcyIsImJsb2NrU2l6ZSIsIm5CbG9ja3NSZWFkeSIsIm5Xb3Jkc1JlYWR5IiwibWF4IiwiX21pbkJ1ZmZlclNpemUiLCJuQnl0ZXNSZWFkeSIsIm1pbiIsIm9mZnNldCIsIl9kb1Byb2Nlc3NCbG9jayIsInByb2Nlc3NlZFdvcmRzIiwic3BsaWNlIiwiY2ZnIiwiX2RvUmVzZXQiLCJ1cGRhdGUiLCJtZXNzYWdlVXBkYXRlIiwiZmluYWxpemUiLCJfZG9GaW5hbGl6ZSIsIl9jcmVhdGVIZWxwZXIiLCJoYXNoZXIiLCJtZXNzYWdlIiwiX2NyZWF0ZUhtYWNIZWxwZXIiLCJITUFDIiwiYWxnbyIsIkJhc2U2NCIsIm1hcCIsIl9tYXAiLCJiYXNlNjRDaGFycyIsInRyaXBsZXQiLCJqIiwiY2hhckF0IiwicGFkZGluZ0NoYXIiLCJiYXNlNjRTdHIiLCJiYXNlNjRTdHJMZW5ndGgiLCJyZXZlcnNlTWFwIiwiX3JldmVyc2VNYXAiLCJwYWRkaW5nSW5kZXgiLCJpbmRleE9mIiwiYml0czEiLCJiaXRzMiIsInBhcnNlTG9vcCIsIlQiLCJhYnMiLCJzaW4iLCJNRDUiLCJfaGFzaCIsIk0iLCJvZmZzZXRfaSIsIk1fb2Zmc2V0X2kiLCJIIiwiTV9vZmZzZXRfMCIsIk1fb2Zmc2V0XzEiLCJNX29mZnNldF8yIiwiTV9vZmZzZXRfMyIsIk1fb2Zmc2V0XzQiLCJNX29mZnNldF81IiwiTV9vZmZzZXRfNiIsIk1fb2Zmc2V0XzciLCJNX29mZnNldF84IiwiTV9vZmZzZXRfOSIsIk1fb2Zmc2V0XzEwIiwiTV9vZmZzZXRfMTEiLCJNX29mZnNldF8xMiIsIk1fb2Zmc2V0XzEzIiwiTV9vZmZzZXRfMTQiLCJNX29mZnNldF8xNSIsImEiLCJiIiwiRkYiLCJHRyIsIkhIIiwiSUkiLCJuQml0c1RvdGFsIiwibkJpdHNMZWZ0IiwibkJpdHNUb3RhbEgiLCJmbG9vciIsIm5CaXRzVG90YWxMIiwiaGFzaCIsIkhfaSIsIngiLCJIbWFjTUQ1IiwiSG1hY1NIQTEiLCJLIiwiaXNQcmltZSIsInNxcnROIiwic3FydCIsImZhY3RvciIsImdldEZyYWN0aW9uYWxCaXRzIiwiblByaW1lIiwicG93IiwiU0hBMjU2IiwiZiIsImciLCJoIiwiZ2FtbWEweCIsImdhbW1hMCIsImdhbW1hMXgiLCJnYW1tYTEiLCJtYWoiLCJzaWdtYTAiLCJ0MSIsIkhtYWNTSEEyNTYiLCJVdGYxNiIsIlV0ZjE2QkUiLCJ1dGYxNkNoYXJzIiwiY29kZVBvaW50IiwidXRmMTZTdHIiLCJ1dGYxNlN0ckxlbmd0aCIsInN3YXBFbmRpYW4iLCJ3b3JkIiwiVXRmMTZMRSIsIkFycmF5QnVmZmVyIiwic3VwZXJJbml0IiwidHlwZWRBcnJheSIsIlVpbnQ4QXJyYXkiLCJJbnQ4QXJyYXkiLCJVaW50OENsYW1wZWRBcnJheSIsIkludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJVaW50MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwidHlwZWRBcnJheUJ5dGVMZW5ndGgiLCJfemwiLCJfenIiLCJfc2wiLCJfc3IiLCJfaGwiLCJfaHIiLCJSSVBFTUQxNjAiLCJhbCIsImJsIiwiY2wiLCJkbCIsImVsIiwiYXIiLCJiciIsImNyIiwiZHIiLCJlciIsImhsIiwiaHIiLCJ6bCIsInpyIiwic2wiLCJzciIsImYxIiwiZjIiLCJmMyIsImY0IiwiZjUiLCJyb3RsIiwieSIsInoiLCJIbWFjUklQRU1EMTYwIiwiX2hhc2hlciIsImhhc2hlckJsb2NrU2l6ZSIsImhhc2hlckJsb2NrU2l6ZUJ5dGVzIiwib0tleSIsIl9vS2V5IiwiaUtleSIsIl9pS2V5Iiwib0tleVdvcmRzIiwiaUtleVdvcmRzIiwiaW5uZXJIYXNoIiwiUEJLREYyIiwia2V5U2l6ZSIsIml0ZXJhdGlvbnMiLCJjb21wdXRlIiwicGFzc3dvcmQiLCJzYWx0IiwiaG1hYyIsImRlcml2ZWRLZXkiLCJibG9ja0luZGV4IiwiZGVyaXZlZEtleVdvcmRzIiwiYmxvY2tJbmRleFdvcmRzIiwiYmxvY2siLCJibG9ja1dvcmRzIiwiYmxvY2tXb3Jkc0xlbmd0aCIsImludGVybWVkaWF0ZSIsImludGVybWVkaWF0ZVdvcmRzIiwiRXZwS0RGIiwiU0hBMjI0IiwiSG1hY1NIQTIyNCIsIlgzMldvcmRBcnJheSIsIkNfeDY0IiwieDY0IiwiV29yZCIsImhpZ2giLCJsb3ciLCJ0b1gzMiIsIng2NFdvcmRzIiwieDY0V29yZHNMZW5ndGgiLCJ4MzJXb3JkcyIsIng2NFdvcmQiLCJ3b3Jkc0xlbmd0aCIsIlg2NFdvcmQiLCJSSE9fT0ZGU0VUUyIsIlBJX0lOREVYRVMiLCJST1VORF9DT05TVEFOVFMiLCJuZXdZIiwiTEZTUiIsInJvdW5kQ29uc3RhbnRNc3ciLCJyb3VuZENvbnN0YW50THN3IiwiYml0UG9zaXRpb24iLCJTSEEzIiwib3V0cHV0TGVuZ3RoIiwic3RhdGUiLCJfc3RhdGUiLCJuQmxvY2tTaXplTGFuZXMiLCJNMmkiLCJNMmkxIiwibGFuZSIsInJvdW5kIiwidE1zdyIsInRMc3ciLCJUeCIsIlR4NCIsIlR4MSIsIlR4MU1zdyIsIlR4MUxzdyIsImxhbmVJbmRleCIsImxhbmVNc3ciLCJsYW5lTHN3IiwicmhvT2Zmc2V0IiwiVFBpTGFuZSIsIlQwIiwic3RhdGUwIiwiVExhbmUiLCJUeDFMYW5lIiwiVHgyTGFuZSIsInJvdW5kQ29uc3RhbnQiLCJibG9ja1NpemVCaXRzIiwib3V0cHV0TGVuZ3RoQnl0ZXMiLCJvdXRwdXRMZW5ndGhMYW5lcyIsImhhc2hXb3JkcyIsIkhtYWNTSEEzIiwiWDY0V29yZEFycmF5IiwiWDY0V29yZF9jcmVhdGUiLCJTSEE1MTIiLCJIMCIsIkgxIiwiSDIiLCJIMyIsIkg0IiwiSDUiLCJINiIsIkg3IiwiSDBoIiwiSDBsIiwiSDFoIiwiSDFsIiwiSDJoIiwiSDJsIiwiSDNoIiwiSDNsIiwiSDRoIiwiSDRsIiwiSDVoIiwiSDVsIiwiSDZoIiwiSDZsIiwiSDdoIiwiSDdsIiwiYWgiLCJiaCIsImNoIiwiZGgiLCJlaCIsImZoIiwiZmwiLCJnaCIsImdsIiwiaGgiLCJXaSIsIldpaCIsIldpbCIsImdhbW1hMHhoIiwiZ2FtbWEweGwiLCJnYW1tYTBoIiwiZ2FtbWEwbCIsImdhbW1hMXhoIiwiZ2FtbWExeGwiLCJnYW1tYTFoIiwiZ2FtbWExbCIsIldpNyIsIldpN2giLCJXaTdsIiwiV2kxNiIsIldpMTZoIiwiV2kxNmwiLCJ0MWwiLCJjaGgiLCJjaGwiLCJtYWpoIiwibWFqbCIsInNpZ21hMGgiLCJzaWdtYTBsIiwic2lnbWExaCIsInNpZ21hMWwiLCJLaSIsIktpaCIsIktpbCIsInQxaCIsInQybCIsIkhtYWNTSEE1MTIiLCJTSEEzODQiLCJIbWFjU0hBMzg0IiwiQ2lwaGVyIiwiY3JlYXRlRW5jcnlwdG9yIiwiX0VOQ19YRk9STV9NT0RFIiwiY3JlYXRlRGVjcnlwdG9yIiwiX0RFQ19YRk9STV9NT0RFIiwieGZvcm1Nb2RlIiwiX3hmb3JtTW9kZSIsIl9rZXkiLCJwcm9jZXNzIiwiZGF0YVVwZGF0ZSIsIml2U2l6ZSIsInNlbGVjdENpcGhlclN0cmF0ZWd5IiwiUGFzc3dvcmRCYXNlZENpcGhlciIsIlNlcmlhbGl6YWJsZUNpcGhlciIsImNpcGhlciIsImVuY3J5cHQiLCJjaXBoZXJ0ZXh0IiwiQ19tb2RlIiwiU3RyZWFtQ2lwaGVyIiwiQmxvY2tDaXBoZXJNb2RlIiwiaXYiLCJEZWNyeXB0b3IiLCJfY2lwaGVyIiwiX2l2IiwiQ0JDIiwieG9yQmxvY2siLCJfcHJldkJsb2NrIiwicHJvY2Vzc0Jsb2NrIiwiZW5jcnlwdEJsb2NrIiwidGhpc0Jsb2NrIiwiZGVjcnlwdEJsb2NrIiwiUGtjczciLCJibG9ja1NpemVCeXRlcyIsIm5QYWRkaW5nQnl0ZXMiLCJwYWRkaW5nV29yZCIsInBhZGRpbmdXb3JkcyIsInVucGFkIiwiQ2lwaGVyUGFyYW1zIiwiQmxvY2tDaXBoZXIiLCJtb2RlQ3JlYXRvciIsIl9tb2RlIiwiX19jcmVhdG9yIiwiZmluYWxQcm9jZXNzZWRCbG9ja3MiLCJjaXBoZXJQYXJhbXMiLCJmb3JtYXR0ZXIiLCJPcGVuU1NMRm9ybWF0dGVyIiwiZm9ybWF0IiwiT3BlblNTTCIsIm9wZW5TU0xTdHIiLCJjaXBoZXJ0ZXh0V29yZHMiLCJlbmNyeXB0b3IiLCJjaXBoZXJDZmciLCJhbGdvcml0aG0iLCJfcGFyc2UiLCJPcGVuU1NMS2RmIiwia2RmIiwiZXhlY3V0ZSIsImRlcml2ZWRQYXJhbXMiLCJDRkIiLCJnZW5lcmF0ZUtleXN0cmVhbUFuZEVuY3J5cHQiLCJrZXlzdHJlYW0iLCJBbnNpWDkyMyIsImxhc3RCeXRlUG9zIiwiSXNvMTAxMjYiLCJJc285Nzk3MSIsIl9rZXlzdHJlYW0iLCJOb1BhZGRpbmciLCJpbnB1dCIsIlNCT1giLCJJTlZfU0JPWCIsIlNVQl9NSVhfMCIsIlNVQl9NSVhfMSIsIlNVQl9NSVhfMiIsIlNVQl9NSVhfMyIsIklOVl9TVUJfTUlYXzAiLCJJTlZfU1VCX01JWF8xIiwiSU5WX1NVQl9NSVhfMiIsIklOVl9TVUJfTUlYXzMiLCJ4aSIsInN4IiwieDIiLCJ4NCIsIng4IiwiUkNPTiIsIl9uUm91bmRzIiwiX2tleVByaW9yUmVzZXQiLCJrZXlXb3JkcyIsImtzUm93cyIsImtleVNjaGVkdWxlIiwiX2tleVNjaGVkdWxlIiwia3NSb3ciLCJpbnZLZXlTY2hlZHVsZSIsIl9pbnZLZXlTY2hlZHVsZSIsImludktzUm93IiwiX2RvQ3J5cHRCbG9jayIsIm5Sb3VuZHMiLCJzMCIsInMxIiwiczIiLCJzMyIsInQwIiwidDIiLCJ0MyIsIlBDMSIsIlBDMiIsIkJJVF9TSElGVFMiLCJTQk9YX1AiLCIwIiwiMjY4NDM1NDU2IiwiNTM2ODcwOTEyIiwiODA1MzA2MzY4IiwiMTA3Mzc0MTgyNCIsIjEzNDIxNzcyODAiLCIxNjEwNjEyNzM2IiwiMTg3OTA0ODE5MiIsIjIxNDc0ODM2NDgiLCIyNDE1OTE5MTA0IiwiMjY4NDM1NDU2MCIsIjI5NTI3OTAwMTYiLCIzMjIxMjI1NDcyIiwiMzQ4OTY2MDkyOCIsIjM3NTgwOTYzODQiLCI0MDI2NTMxODQwIiwiMTM0MjE3NzI4IiwiNDAyNjUzMTg0IiwiNjcxMDg4NjQwIiwiOTM5NTI0MDk2IiwiMTIwNzk1OTU1MiIsIjE0NzYzOTUwMDgiLCIxNzQ0ODMwNDY0IiwiMjAxMzI2NTkyMCIsIjIyODE3MDEzNzYiLCIyNTUwMTM2ODMyIiwiMjgxODU3MjI4OCIsIjMwODcwMDc3NDQiLCIzMzU1NDQzMjAwIiwiMzYyMzg3ODY1NiIsIjM4OTIzMTQxMTIiLCI0MTYwNzQ5NTY4IiwiMSIsIjI2ODQzNTQ1NyIsIjUzNjg3MDkxMyIsIjgwNTMwNjM2OSIsIjEwNzM3NDE4MjUiLCIxMzQyMTc3MjgxIiwiMTYxMDYxMjczNyIsIjE4NzkwNDgxOTMiLCIyMTQ3NDgzNjQ5IiwiMjQxNTkxOTEwNSIsIjI2ODQzNTQ1NjEiLCIyOTUyNzkwMDE3IiwiMzIyMTIyNTQ3MyIsIjM0ODk2NjA5MjkiLCIzNzU4MDk2Mzg1IiwiNDAyNjUzMTg0MSIsIjEzNDIxNzcyOSIsIjQwMjY1MzE4NSIsIjY3MTA4ODY0MSIsIjkzOTUyNDA5NyIsIjEyMDc5NTk1NTMiLCIxNDc2Mzk1MDA5IiwiMTc0NDgzMDQ2NSIsIjIwMTMyNjU5MjEiLCIyMjgxNzAxMzc3IiwiMjU1MDEzNjgzMyIsIjI4MTg1NzIyODkiLCIzMDg3MDA3NzQ1IiwiMzM1NTQ0MzIwMSIsIjM2MjM4Nzg2NTciLCIzODkyMzE0MTEzIiwiNDE2MDc0OTU2OSIsIjE2Nzc3MjE2IiwiMzM1NTQ0MzIiLCI1MDMzMTY0OCIsIjY3MTA4ODY0IiwiODM4ODYwODAiLCIxMDA2NjMyOTYiLCIxMTc0NDA1MTIiLCIxNTA5OTQ5NDQiLCIxNjc3NzIxNjAiLCIxODQ1NDkzNzYiLCIyMDEzMjY1OTIiLCIyMTgxMDM4MDgiLCIyMzQ4ODEwMjQiLCIyNTE2NTgyNDAiLCI4Mzg4NjA4IiwiMjUxNjU4MjQiLCI0MTk0MzA0MCIsIjU4NzIwMjU2IiwiNzU0OTc0NzIiLCI5MjI3NDY4OCIsIjEwOTA1MTkwNCIsIjEyNTgyOTEyMCIsIjE0MjYwNjMzNiIsIjE1OTM4MzU1MiIsIjE3NjE2MDc2OCIsIjE5MjkzNzk4NCIsIjIwOTcxNTIwMCIsIjIyNjQ5MjQxNiIsIjI0MzI2OTYzMiIsIjI2MDA0Njg0OCIsIjI4NTIxMjY3MiIsIjMwMTk4OTg4OCIsIjMxODc2NzEwNCIsIjMzNTU0NDMyMCIsIjM1MjMyMTUzNiIsIjM2OTA5ODc1MiIsIjM4NTg3NTk2OCIsIjQxOTQzMDQwMCIsIjQzNjIwNzYxNiIsIjQ1Mjk4NDgzMiIsIjQ2OTc2MjA0OCIsIjQ4NjUzOTI2NCIsIjUwMzMxNjQ4MCIsIjUyMDA5MzY5NiIsIjI3NjgyNDA2NCIsIjI5MzYwMTI4MCIsIjMxMDM3ODQ5NiIsIjMyNzE1NTcxMiIsIjM0MzkzMjkyOCIsIjM2MDcxMDE0NCIsIjM3NzQ4NzM2MCIsIjM5NDI2NDU3NiIsIjQxMTA0MTc5MiIsIjQyNzgxOTAwOCIsIjQ0NDU5NjIyNCIsIjQ2MTM3MzQ0MCIsIjQ3ODE1MDY1NiIsIjQ5NDkyNzg3MiIsIjUxMTcwNTA4OCIsIjUyODQ4MjMwNCIsIjEwNDg1NzYiLCIyMDk3MTUyIiwiMzE0NTcyOCIsIjQxOTQzMDQiLCI1MjQyODgwIiwiNjI5MTQ1NiIsIjczNDAwMzIiLCI5NDM3MTg0IiwiMTA0ODU3NjAiLCIxMTUzNDMzNiIsIjEyNTgyOTEyIiwiMTM2MzE0ODgiLCIxNDY4MDA2NCIsIjE1NzI4NjQwIiwiNTI0Mjg4IiwiMTU3Mjg2NCIsIjI2MjE0NDAiLCIzNjcwMDE2IiwiNDcxODU5MiIsIjU3NjcxNjgiLCI2ODE1NzQ0IiwiNzg2NDMyMCIsIjg5MTI4OTYiLCI5OTYxNDcyIiwiMTEwMTAwNDgiLCIxMjA1ODYyNCIsIjEzMTA3MjAwIiwiMTQxNTU3NzYiLCIxNTIwNDM1MiIsIjE2MjUyOTI4IiwiMTc4MjU3OTIiLCIxODg3NDM2OCIsIjE5OTIyOTQ0IiwiMjA5NzE1MjAiLCIyMjAyMDA5NiIsIjIzMDY4NjcyIiwiMjQxMTcyNDgiLCIyNjIxNDQwMCIsIjI3MjYyOTc2IiwiMjgzMTE1NTIiLCIyOTM2MDEyOCIsIjMwNDA4NzA0IiwiMzE0NTcyODAiLCIzMjUwNTg1NiIsIjE3MzAxNTA0IiwiMTgzNTAwODAiLCIxOTM5ODY1NiIsIjIwNDQ3MjMyIiwiMjE0OTU4MDgiLCIyMjU0NDM4NCIsIjIzNTkyOTYwIiwiMjQ2NDE1MzYiLCIyNTY5MDExMiIsIjI2NzM4Njg4IiwiMjc3ODcyNjQiLCIyODgzNTg0MCIsIjI5ODg0NDE2IiwiMzA5MzI5OTIiLCIzMTk4MTU2OCIsIjMzMDMwMTQ0IiwiNjU1MzYiLCIxMzEwNzIiLCIxOTY2MDgiLCIyNjIxNDQiLCIzMjc2ODAiLCIzOTMyMTYiLCI0NTg3NTIiLCI1ODk4MjQiLCI2NTUzNjAiLCI3MjA4OTYiLCI3ODY0MzIiLCI4NTE5NjgiLCI5MTc1MDQiLCI5ODMwNDAiLCIzMjc2OCIsIjk4MzA0IiwiMTYzODQwIiwiMjI5Mzc2IiwiMjk0OTEyIiwiMzYwNDQ4IiwiNDI1OTg0IiwiNDkxNTIwIiwiNTU3MDU2IiwiNjIyNTkyIiwiNjg4MTI4IiwiNzUzNjY0IiwiODE5MjAwIiwiODg0NzM2IiwiOTUwMjcyIiwiMTAxNTgwOCIsIjExMTQxMTIiLCIxMTc5NjQ4IiwiMTI0NTE4NCIsIjEzMTA3MjAiLCIxMzc2MjU2IiwiMTQ0MTc5MiIsIjE1MDczMjgiLCIxNjM4NDAwIiwiMTcwMzkzNiIsIjE3Njk0NzIiLCIxODM1MDA4IiwiMTkwMDU0NCIsIjE5NjYwODAiLCIyMDMxNjE2IiwiMTA4MTM0NCIsIjExNDY4ODAiLCIxMjEyNDE2IiwiMTI3Nzk1MiIsIjEzNDM0ODgiLCIxNDA5MDI0IiwiMTQ3NDU2MCIsIjE1NDAwOTYiLCIxNjA1NjMyIiwiMTY3MTE2OCIsIjE3MzY3MDQiLCIxODAyMjQwIiwiMTg2Nzc3NiIsIjE5MzMzMTIiLCIxOTk4ODQ4IiwiMjA2NDM4NCIsIjQwOTYiLCI4MTkyIiwiMTIyODgiLCIxNjM4NCIsIjIwNDgwIiwiMjQ1NzYiLCIyODY3MiIsIjM2ODY0IiwiNDA5NjAiLCI0NTA1NiIsIjQ5MTUyIiwiNTMyNDgiLCI1NzM0NCIsIjYxNDQwIiwiMjA0OCIsIjYxNDQiLCIxMDI0MCIsIjE0MzM2IiwiMTg0MzIiLCIyMjUyOCIsIjI2NjI0IiwiMzA3MjAiLCIzNDgxNiIsIjM4OTEyIiwiNDMwMDgiLCI0NzEwNCIsIjUxMjAwIiwiNTUyOTYiLCI1OTM5MiIsIjYzNDg4IiwiNjk2MzIiLCI3MzcyOCIsIjc3ODI0IiwiODE5MjAiLCI4NjAxNiIsIjkwMTEyIiwiOTQyMDgiLCIxMDI0MDAiLCIxMDY0OTYiLCIxMTA1OTIiLCIxMTQ2ODgiLCIxMTg3ODQiLCIxMjI4ODAiLCIxMjY5NzYiLCI2NzU4NCIsIjcxNjgwIiwiNzU3NzYiLCI3OTg3MiIsIjgzOTY4IiwiODgwNjQiLCI5MjE2MCIsIjk2MjU2IiwiMTAwMzUyIiwiMTA0NDQ4IiwiMTA4NTQ0IiwiMTEyNjQwIiwiMTE2NzM2IiwiMTIwODMyIiwiMTI0OTI4IiwiMTI5MDI0IiwiMjU2IiwiNTEyIiwiNzY4IiwiMTAyNCIsIjEyODAiLCIxNTM2IiwiMTc5MiIsIjIzMDQiLCIyNTYwIiwiMjgxNiIsIjMwNzIiLCIzMzI4IiwiMzU4NCIsIjM4NDAiLCIxMjgiLCIzODQiLCI2NDAiLCI4OTYiLCIxMTUyIiwiMTQwOCIsIjE2NjQiLCIxOTIwIiwiMjE3NiIsIjI0MzIiLCIyNjg4IiwiMjk0NCIsIjMyMDAiLCIzNDU2IiwiMzcxMiIsIjM5NjgiLCI0MzUyIiwiNDYwOCIsIjQ4NjQiLCI1MTIwIiwiNTM3NiIsIjU2MzIiLCI1ODg4IiwiNjQwMCIsIjY2NTYiLCI2OTEyIiwiNzE2OCIsIjc0MjQiLCI3NjgwIiwiNzkzNiIsIjQyMjQiLCI0NDgwIiwiNDczNiIsIjQ5OTIiLCI1MjQ4IiwiNTUwNCIsIjU3NjAiLCI2MDE2IiwiNjI3MiIsIjY1MjgiLCI2Nzg0IiwiNzA0MCIsIjcyOTYiLCI3NTUyIiwiNzgwOCIsIjgwNjQiLCIxNiIsIjMyIiwiNDgiLCI2NCIsIjgwIiwiOTYiLCIxMTIiLCIxNDQiLCIxNjAiLCIxNzYiLCIxOTIiLCIyMDgiLCIyMjQiLCIyNDAiLCI4IiwiMjQiLCI0MCIsIjU2IiwiNzIiLCI4OCIsIjEwNCIsIjEyMCIsIjEzNiIsIjE1MiIsIjE2OCIsIjE4NCIsIjIwMCIsIjIxNiIsIjIzMiIsIjI0OCIsIjI3MiIsIjI4OCIsIjMwNCIsIjMyMCIsIjMzNiIsIjM1MiIsIjM2OCIsIjQwMCIsIjQxNiIsIjQzMiIsIjQ0OCIsIjQ2NCIsIjQ4MCIsIjQ5NiIsIjI2NCIsIjI4MCIsIjI5NiIsIjMxMiIsIjMyOCIsIjM0NCIsIjM2MCIsIjM3NiIsIjM5MiIsIjQwOCIsIjQyNCIsIjQ0MCIsIjQ1NiIsIjQ3MiIsIjQ4OCIsIjUwNCIsIjIiLCIzIiwiNCIsIjUiLCI2IiwiNyIsIjkiLCIxMCIsIjExIiwiMTIiLCIxMyIsIjE0IiwiMTUiLCIyMTQ3NDgzNjUwIiwiMjE0NzQ4MzY1MSIsIjIxNDc0ODM2NTIiLCIyMTQ3NDgzNjUzIiwiMjE0NzQ4MzY1NCIsIjIxNDc0ODM2NTUiLCIyMTQ3NDgzNjU2IiwiMjE0NzQ4MzY1NyIsIjIxNDc0ODM2NTgiLCIyMTQ3NDgzNjU5IiwiMjE0NzQ4MzY2MCIsIjIxNDc0ODM2NjEiLCIyMTQ3NDgzNjYyIiwiMjE0NzQ4MzY2MyIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjEiLCIyMiIsIjIzIiwiMjUiLCIyNiIsIjI3IiwiMjgiLCIyOSIsIjMwIiwiMzEiLCIyMTQ3NDgzNjY0IiwiMjE0NzQ4MzY2NSIsIjIxNDc0ODM2NjYiLCIyMTQ3NDgzNjY3IiwiMjE0NzQ4MzY2OCIsIjIxNDc0ODM2NjkiLCIyMTQ3NDgzNjcwIiwiMjE0NzQ4MzY3MSIsIjIxNDc0ODM2NzIiLCIyMTQ3NDgzNjczIiwiMjE0NzQ4MzY3NCIsIjIxNDc0ODM2NzUiLCIyMTQ3NDgzNjc2IiwiMjE0NzQ4MzY3NyIsIjIxNDc0ODM2NzgiLCIyMTQ3NDgzNjc5IiwiU0JPWF9NQVNLIiwiREVTIiwia2V5Qml0cyIsImtleUJpdFBvcyIsInN1YktleXMiLCJfc3ViS2V5cyIsIm5TdWJLZXkiLCJzdWJLZXkiLCJiaXRTaGlmdCIsImludlN1YktleXMiLCJfaW52U3ViS2V5cyIsIl9sQmxvY2siLCJfckJsb2NrIiwiZXhjaGFuZ2VMUiIsImV4Y2hhbmdlUkwiLCJsQmxvY2siLCJyQmxvY2siLCJUcmlwbGVERVMiLCJfZGVzMSIsIl9kZXMyIiwiX2RlczMiLCJSQzQiLCJrZXlTaWdCeXRlcyIsIlMiLCJfUyIsImtleUJ5dGVJbmRleCIsImtleUJ5dGUiLCJfaSIsIl9qIiwiZ2VuZXJhdGVLZXlzdHJlYW1Xb3JkIiwia2V5c3RyZWFtV29yZCIsIlJDNERyb3AiLCJkcm9wIiwiQ1RSR2xhZG1hbiIsImluY1dvcmQiLCJiMSIsImIyIiwiYjMiLCJjb3VudGVyIiwiX2NvdW50ZXIiLCJpbmNDb3VudGVyIiwiQ18iLCJHIiwiUmFiYml0IiwiWCIsIl9YIiwiX0MiLCJfYiIsIm5leHRTdGF0ZSIsIklWIiwiSVZfMCIsIklWXzEiLCJpMCIsImkyIiwiaTEiLCJpMyIsImd4IiwiZ2EiLCJnYiIsIkNUUiIsIlJhYmJpdExlZ2FjeSIsIl90eXBlb2YiLCJkZWZpbmUiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJidXNpbmVzc0xvYW5Ub3RhbERhdGEiLCJidXNpbmVzc1JlcGF5bWVudFBsYW5EYXRhIiwiZnVuZExvYW5Ub3RhbERhdGEiLCJmdW5kUmVwYXltZW50UGxhbkRhdGEiLCJjYXJMb2FuVG90YWxEYXRhIiwiY2FyUmVwYXltZW50UGxhbkRhdGEiXSwibWFwcGluZ3MiOiI7Ozs7Z0JBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLFlBQUEsQ0FBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURtQixPQUFBLEtBUWpEckIsRUFBQXNCLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVB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QUFHLEdBQUssRUFBRyxHQUFJLEdBQUssRUFBSSxFQUFJLEVBQUcsR0FBSyxFQUFHLEdBQUksS0FDM0RvUyxFQUFNOU0sRUFBVXRGLE9BQU8sQ0FDdkIsRUFBRyxHQUFLLEVBQUksRUFBSSxFQUFJLEVBQUcsR0FBSyxFQUFHLEdBQUssRUFBRyxHQUFLLEVBQUksRUFBRyxHQUFLLEVBQUcsR0FDM0QsRUFBRyxHQUFLLEVBQUksRUFBSSxFQUFHLEdBQUssRUFBRyxHQUFJLEdBQUksR0FBSyxFQUFHLEdBQUssRUFBSSxFQUFJLEVBQUksRUFDNUQsR0FBSyxFQUFJLEVBQUksRUFBSSxFQUFHLEdBQUssRUFBSSxFQUFHLEdBQUssRUFBRyxHQUFLLEVBQUcsR0FBSyxFQUFJLEVBQUcsR0FDNUQsRUFBSSxFQUFJLEVBQUksRUFBSSxFQUFHLEdBQUksR0FBSyxFQUFJLEVBQUcsR0FBSyxFQUFHLEdBQUssRUFBSSxFQUFHLEdBQUksR0FDM0QsR0FBSSxHQUFJLEdBQUssRUFBSSxFQUFJLEVBQUksRUFBSSxFQUFJLEVBQUksRUFBRyxHQUFJLEdBQUssRUFBSSxFQUFJLEVBQUcsS0FDNURxUyxFQUFNL00sRUFBVXRGLE9BQU8sQ0FDdEIsR0FBSSxHQUFJLEdBQUksR0FBSyxFQUFJLEVBQUksRUFBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUssRUFBSSxFQUFJLEVBQUksRUFDOUQsRUFBRyxFQUFLLEVBQUcsR0FBSSxHQUFLLEVBQUksRUFBRyxHQUFLLEVBQUcsR0FBSSxHQUFLLEVBQUcsR0FBSyxFQUFHLEdBQUksR0FDM0QsR0FBSSxHQUFLLEVBQUksRUFBRyxHQUFLLEVBQUcsR0FBSSxHQUFJLEdBQUssRUFBRyxHQUFLLEVBQUksRUFBRyxHQUFLLEVBQUksRUFDM0QsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUssRUFBSSxFQUFJLEVBQUcsR0FBSyxFQUFJLEVBQUksRUFBSSxFQUFJLEVBQUcsR0FDOUQsRUFBRyxHQUFLLEVBQUcsR0FBSyxFQUFJLEVBQUcsR0FBSSxHQUFLLEVBQUcsR0FBSSxHQUFJLEdB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WUFDbkVBLEVBQWUsVUFBWSxZQUFhQSxFQUFlLFdBQVksWUFDbkVBLEVBQWUsV0FBWSxZQUFhQSxFQUFlLFdBQVksV0FDbkVBLEVBQWUsV0FBWSxXQUFhQSxFQUFlLFdBQVksWUFDbkVBLEVBQWUsV0FBWSxZQUFhQSxFQUFlLFdBQVksV0FDbkVBLEVBQWUsVUFBWSxZQUFhQSxFQUFlLFVBQVksWUFDbkVBLEVBQWUsVUFBWSxZQUFhQSxFQUFlLFdBQVksWUFDbkVBLEVBQWUsV0FBWSxZQUFhQSxFQUFlLFdBQVksWUFDbkVBLEVBQWUsV0FBWSxZQUFhQSxFQUFlLFdBQVksV0FDbkVBLEVBQWUsV0FBWSxZQUFhQSxFQUFlLFdBQVksWUFDbkVBLEVBQWUsV0FBWSxZQUFhQSxFQUFlLFdBQVksWUFDbkVBLEVBQWUsVUFBWSxZQUFhQSxFQUFlLFVBQVksV0FDbkVBLEVBQWUsVUFBWSxZQUFhQSxFQUFlLFVBQVksWUFDbkVBLEVBQWUsV0FBWSxZQUFhQSxFQUFlLFdBQVksWUFDbkVBLEVBQWUsV0FBWSxZQUFhQSxFQUFlLFdBQVksWUFDbkVBLEVBQWUsV0FBWSxZQUFhQSxFQUFlLFdBQVksV0FDbkVBLEVBQWUsV0FBWSxZQUFhQSxFQUFlLFdBQVksWUFDbkVBLEVBQWUsV0FBWSxZQUFhQSxFQUFlLFdBQVksV0FDbkVBLEVBQWUsV0FBWSxZQUFhQSxFQUFlLFdBQVksWUFDbkVBLEVBQWUsV0FBWSxZQUFhQSxFQUFlLFVBQVksV0FDbkVBLEVBQWUsVUFBWSxZQUFhQSxFQUFlLFVBQVksWUFDbkVBLEVBQWUsVUFBWSxZQUFhQSxFQUFlLFVBQVksWUFDbkVBLEVBQWUsVUFBWSxZQUFhQSxFQUFlLFdBQVksWUFDbkVBLEVBQWUsV0FBWSxZQUFhQSxFQUFlLFdBQVksWUFDbkVBLEVBQWUsV0FBWSxZQUFhQSxFQUFlLFdBQVksWUFDbkVBLEVBQWUsV0FBWSxZQUFhQSxFQUFlLFdBQVksV0FDbkVBLEVBQWUsV0FBWSxXQUFhQSxFQUFlLFdBQVksWUFDbkVBLEVBQWUsV0FBWSxZQUFhQSxFQUFlLFdBQVksWUFDbkVBLEVB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S0FHWHdZLEVBQU0sQ0FDTixHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFJLEVBQzVCLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksRUFDNUIsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUM1QixHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQzVCLEdBQUksR0FBSSxHQUFJLEVBQUksR0FBSSxHQUFJLEdBQUksR0FDNUIsR0FBSSxHQUFJLEdBQUksRUFBSSxHQUFJLEdBQUksR0FBSSxHQUM1QixHQUFJLEdBQUksR0FBSSxFQUFJLEdBQUksR0FBSSxHQUFJLEdBSTVCQyxFQUFNLENBQ04sR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFJLEVBQ3BCLEVBQUksR0FBSSxHQUFJLEVBQUksR0FBSSxHQUNwQixHQUFJLEdBQUksR0FBSSxFQUFJLEdBQUksRUFDcEIsR0FBSSxFQUFJLEdBQUksR0FBSSxHQUFJLEVBQ3BCLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUNwQixHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FDcEIsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQ3BCLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUlwQkMsRUFBYSxDQUFDLEVBQUksRUFBSSxFQUFJLEVBQUksRUFBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBRzFFQyxFQUFTLENBQ1QsQ0FDSUMsRUFBSyxRQUNMQyxVQUFZLE1BQ1pDLFVBQVksUUFDWkMsVUFBWSxFQUNaQyxXQUFZLElBQ1pDLFdBQVksUUFDWkMsV0FBWSxRQUNaQyxXQUFZLFFBQ1pDLFdBQVksSUFDWkMsV0FBWSxRQUNaQyxXQUFZLE1BQ1pDLFdBQVksUUFDWkMsV0FBWSxNQUNaQyxXQUFZLFFBQ1pDLFdBQVksRUFDWkMsV0FBWSxNQUNaQyxVQUFXLEVBQ1hDLFVBQVksUUFDWkMsVUFBWSxNQUNaQyxVQUFZLE1BQ1pDLFdBQVksUUFDWkMsV0FBWSxJQUNaQyxXQUFZLFFBQ1pDLFdBQVksRUFDWkMsV0FBWSxRQUNaQyxXQUFZLE1BQ1pDLFdBQVksUUFDWkMsV0FBWSxRQUNaQyxXQUFZLFFBQ1pDLFdBQVksTUFDWkMsV0FBWSxJQUNaQyxXQUFZLFFBQ1pDLEVBQUssTUFDTEMsVUFBWSxFQUNaQyxVQUFZLFFBQ1pDLFVBQVksUUFDWkMsV0FBWSxRQUNaQyxXQUFZLE1BQ1pDLFdBQVksSUFDWkMsV0FBWSxRQUNaQyxXQUFZLFFBQ1pDLFdBQVksUUFDWkMsV0FBWSxRQUNaQyxXQUFZLE1BQ1pDLFdBQVksSUFDWkMsV0FBWSxRQUNaQyxXQUFZLE1BQ1pDLFdBQVksRUFDWkMsVUFBVyxRQUNYQyxVQUFZLFFBQ1pDLFVBQVksUUFDWkMsVUFBWSxJQUNaQyxXQUFZLE1BQ1pDLFdBQVksUUFDWkMsV0FBWSxFQUNaQyxXQUFZLE1BQ1pDLFdBQVksTUFDWkMsV0FBWSxRQUNaQyxXQUFZLElBQ1pDLFdBQVksUUFDWkMsV0FBWSxRQUNaQyxXQUFZLEVBQ1pDLFdBQVksTUFDWkMsV0FBWSxTQUVoQixDQUNJL0QsRUFBSyxXQUNMZ0UsU0FBVyxNQUNYQyxTQUFXLE9BQ1hDLFNBQVcsV0FDWEMsU0FBVyxXQUNYQyxTQUFXLFdBQ1hDLFVBQVcsV0FDWEMsVUFBVyxHQUNYdEQsVUFBVyxPQUNYdUQsVUFBVyxXQUNYQyxVQUFXLFdBQ1hDLFVBQVcsT0FDWEMsVUFBVyxPQUNYQyxVQUFXLEVBQ1hDLFVBQVcsTUFDWEMsVUFBVyxXQUNYQyxRQUFVLFdBQ1ZDLFNBQVcsT0FDWEMsU0FBVyxHQUNYQyxTQUFXLFdBQ1hDLFNBQVcsV0FDWEMsU0FBVyxXQUNYQyxVQUFXLE9BQ1hDLFVBQVcsV0FDWEMsVUFBVyxPQUNYQyxVQUFXLEVBQ1hDLFVBQVcsTUFDWEMsVUFBVyxXQUNYQyxVQUFXLFdBQ1hDLFVBQVcsT0FDWEMsVUFBVyxXQUNYQyxVQUFXLE1BQ1g1RixVQUFZLEVBQ1o2RixVQUFZLFdBQ1pDLFVBQVksV0FDWkMsVUFBWSxXQUNaQyxVQUFZLFdBQ1pDLFVBQVksR0FDWkMsVUFBWSxPQUNaQyxVQUFZLE1BQ1puRixVQUFZLE1BQ1pvRixVQUFZLE9BQ1pDLFVBQVksT0FDWkMsVUFBWSxXQUNaQyxVQUFZLE9BQ1pDLFVBQVksV0FDWkMsVUFBWSxXQUNaQyxVQUFZLFdBQ1pDLFVBQVksT0FDWkMsVUFBWSxPQUNaQyxVQUFZLFdBQ1pDLFVBQVksTUFDWkMsVUFBWSxXQUNaQyxVQUFZLFdBQ1pDLFVBQVksR0FDWkMsVUFBWSxXQUNaQyxVQUFZLFdBQ1pDLFVBQVksV0FDWkMsVUFBWSxXQUNaQyxVQUFZLE9BQ1pDLFVBQVksRUFDWkMsVUFBWSxNQUNaQyxVQUFZLFdBQ1pDLFVBQVksUUFFaEIsQ0FDSTNILEVBQUssSUFDTDRILFFBQVUsRUFDVkMsUUFBVSxTQUNWQyxRQUFVLE1BQ1ZDLFFBQVUsTUFDVkMsUUFBVSxTQUNWQyxRQUFVLFNBQ1ZDLFFBQVUsU0FDVnBELFFBQVUsU0FDVnFELFFBQVUsU0FDVkMsU0FBVSxNQUNWQyxTQUFVLFNBQ1ZDLFNBQVUsU0FDVkMsU0FBVSxNQUNWQyxTQUFVLEVBQ1ZDLFNBQVUsSUFDVkMsT0FBUyxTQUNUQyxRQUFVLFNBQ1ZDLFFBQVUsRUFDVkMsUUFBVSxTQUNWQyxRQUFVLFNBQ1ZDLFFBQVUsTUFDVkMsUUFBVSxNQUNWQyxRQUFVLElBQ1ZDLFFBQVUsRUFDVkMsUUFBVSxJQUNWQyxTQUFVLFNBQ1ZDLFNBQVUsTUFDVkMsU0FBVSxNQUNWQyxTQUFVLFNBQ1ZDLFNBQVUsU0FDVkMsU0FBVSxTQUNWekYsU0FBVyxTQUNYMEYsU0FBVyxNQUNYQyxTQUFXLE1BQ1hDLFNBQVcsU0FDWEMsU0FBVyxJQUNYQyxTQUFXLFNBQ1hDLFNBQVcsU0FDWEMsU0FBVyxFQUNYakYsU0FBVyxTQUNYa0YsU0FBVyxTQUNYQyxTQUFXLEVBQ1hDLFNBQVcsTUFDWEMsU0FBVyxTQUNYQyxTQUFXLElBQ1hDLFNBQVcsTUFDWEMsU0FBVyxTQUNYQyxTQUFXLFNBQ1hDLFNBQVcsSUFDWEMsU0FBVyxTQUNYQyxTQUFXLEVBQ1hDLFNBQVcsTUFDWEMsU0FBVyxTQUNYQyxTQUFXLElBQ1hDLFNBQVcsU0FDWEMsU0FBVyxNQUNYQyxTQUFXLFNBQ1hDLFNBQVcsTUFDWEMsU0FBVyxTQUNYQyxTQUFXLFNBQ1hDLFNBQVcsU0FDWEMsU0FBVyxFQUNYQyxTQUFXLE9BRWYsQ0FDSXZMLEVBQUssV0FDTHdMLE1BQVMsV0FDVEMsT0FBUyxRQUNUQyxPQUFTLFdBQ1RDLE9BQVMsRUFDVEMsT0FBUyxRQUNUQyxPQUFTLFdBQ1RDLE9BQVMsUUFDVHBELE9BQVMsV0FDVHFELE9BQVMsUUFDVEMsT0FBUyxHQUNUQyxPQUFTLFdBQ1RDLE9BQVMsV0FDVEMsT0FBUyxLQUNUQyxPQUFTLEtBQ1RDLE9BQVMsV0FDVEMsTUFBUSxXQUNSQyxNQUFTLEdBQ1RDLE9BQVMsV0FDVEMsT0FBUyxXQUNUQyxPQUFTLFFBQ1RDLE9BQVMsV0FDVEMsT0FBUyxFQUNUQyxPQUFTLFdBQ1RDLE9BQVMsS0FDVEMsT0FBUyxXQUNUQyxPQUFTLFFBQ1RDLE9BQVMsS0FDVEMsT0FBUyxXQUNUQyxPQUFTLFFBQ1RDLE9BQVMsUUFDVEMsUUFBUyxXQUNUekYsUUFBVSxRQUNWMEYsUUFBVSxRQUNWQyxRQUFVLFdBQ1ZDLFFBQVUsRUFDVkMsUUFBVSxLQUNWQyxRQUFVLFdBQ1ZDLFFBQVUsV0FDVkMsUUFBVSxXQUNWakYsUUFBVSxXQUNWa0YsUUFBVSxXQUNWQyxRQUFVLFdBQ1ZDLFFBQVUsUUFDVkMsUUFBVSxXQUNWQyxRQUFVLFFBQ1ZDLFFBQVUsR0FDVkMsUUFBVSxLQUNWQyxRQUFVLFdBQ1ZDLFFBQVUsV0FDVkMsUUFBVSxFQUNWQyxRQUFVLFFBQ1ZDLFFBQVUsUUFDVkMsUUFBVSxXQUNWQyxRQUFVLFdBQ1ZDLFFBQVUsR0FDVkMsUUFBVSxXQUNWQyxRQUFVLEtBQ1ZDLFFBQVUsV0FDVkMsUUFBVSxXQUNWQyxRQUFVLEtBQ1ZDLFFBQVUsV0FDVkMsUUFBVSxRQUNWQyxRQUFVLFNBRWQsQ0FDSW5QLEVBQUssSUFDTG9QLEtBQVEsU0FDUkMsS0FBUSxPQUNSQyxNQUFRLFVBQ1JDLE1BQVEsVUFDUkMsTUFBUSxTQUNSQyxNQUFRLFVBQ1JDLE1BQVEsT0FDUnBELE1BQVEsU0FDUnFELE1BQVEsVUFDUkMsTUFBUSxVQUNSQyxNQUFRLFVBQ1JDLE1BQVEsVUFDUkMsTUFBUSxFQUNSQyxNQUFRLFNBQ1JDLE1BQVEsVUFDUkMsS0FBTyxTQUNQQyxLQUFRLFVBQ1JDLE1BQVEsSUFDUkMsTUFBUSxTQUNSQyxNQUFRLE9BQ1JDLE1BQVEsVUFDUkMsTUFBUSxVQUNSQyxNQUFRLFVBQ1JDLE1BQVEsVUFDUkMsTUFBUSxFQUNSQyxNQUFRLFVBQ1JDLE1BQVEsU0FDUkMsTUFBUSxVQUNSQyxNQUFRLFVBQ1JDLE1BQVEsU0FDUkMsTUFBUSxPQUNSekYsTUFBUyxPQUNUMEYsTUFBUyxJQUNUQyxNQUFTLFVBQ1RDLE1BQVMsVUFDVEMsTUFBUyxTQUNUQyxNQUFTLFVBQ1RDLE1BQVMsVUFDVEMsTUFBUyxTQUNUakYsTUFBUyxVQUNUa0YsT0FBUyxVQUNUQyxPQUFTLFNBQ1RDLE9BQVMsVUFDVEMsT0FBUyxPQUNUQyxPQUFTLFVBQ1RDLE9BQVMsRUFDVEMsT0FBUyxTQUNUQyxNQUFTLFVBQ1RDLE1BQVMsU0FDVEMsTUFBUyxTQUNUQyxNQUFTLFVBQ1RDLE1BQVMsVUFDVEMsTUFBUyxTQUNUQyxNQUFTLElBQ1RDLE1BQVMsVUFDVEMsT0FBUyxPQUNUQyxPQUFTLFVBQ1RDLE9BQVMsRUFDVEMsT0FBUyxVQUNUQyxPQUFTLFNBQ1RDLE9BQVMsT0FDVEMsT0FBUyxVQUNUQyxPQUFTLFdBRWIsQ0FDSS9TLEVBQUssVUFDTGdULElBQU8sS0FDUEMsSUFBTyxVQUNQQyxJQUFPLFVBQ1BDLEtBQU8sVUFDUEMsS0FBTyxRQUNQQyxLQUFPLFFBQ1BDLEtBQU8sVUFDUHBELEtBQU8sRUFDUHFELEtBQU8sVUFDUEMsS0FBTyxRQUNQQyxLQUFPLEVBQ1BDLEtBQU8sVUFDUEMsS0FBTyxRQUNQQyxLQUFPLEtBQ1BDLEtBQU8sVUFDUEMsSUFBTSxVQUNOQyxJQUFPLFVBQ1BDLElBQU8sRUFDUEMsSUFBTyxRQUNQQyxLQUFPLFFBQ1BDLEtBQU8sVUFDUEMsS0FBTyxVQUNQQyxLQUFPLEtBQ1BDLEtBQU8sUUFDUEMsS0FBTyxLQUNQQyxLQUFPLFVBQ1BDLEtBQU8sVUFDUEMsS0FBTyxFQUNQQyxLQUFPLFVBQ1BDLEtBQU8sUUFDUEMsS0FBTyxVQUNQekYsS0FBUSxVQUNSMEYsS0FBUSxVQUNSQyxLQUFRLFVBQ1JDLEtBQVEsS0FDUkMsS0FBUSxRQUNSQyxLQUFRLFVBQ1JDLEtBQVEsVUFDUkMsS0FBUSxRQUNSakYsS0FBUSxRQUNSa0YsS0FBUSxFQUNSQyxLQUFRLEVBQ1JDLEtBQVEsVUFDUkMsS0FBUSxLQUNSQyxLQUFRLFVBQ1JDLEtBQVEsVUFDUkMsS0FBUSxRQUNSQyxLQUFRLEVBQ1JDLEtBQVEsUUFDUkMsS0FBUSxRQUNSQyxLQUFRLFVBQ1JDLEtBQVEsVUFDUkMsS0FBUSxLQUNSQyxLQUFRLFVBQ1JDLEtBQVEsVUFDUkMsS0FBUSxVQUNSQyxLQUFRLFVBQ1JDLEtBQVEsS0FDUkMsS0FBUSxRQUNSQyxLQUFRLFFBQ1JDLEtBQVEsRUFDUkMsS0FBUSxVQUNSQyxLQUFRLFdBRVosQ0FDSTNXLEVBQUssUUFDTDRXLEdBQU0sU0FDTkMsR0FBTSxLQUNOQyxHQUFNLFFBQ05DLEdBQU0sU0FDTkMsR0FBTSxFQUNOQyxHQUFNLEVBQ05DLElBQU0sU0FDTnBELElBQU0sU0FDTnFELElBQU0sUUFDTkMsSUFBTSxTQUNOQyxJQUFNLFNBQ05DLElBQU0sU0FDTkMsSUFBTSxLQUNOQyxJQUFNLFFBQ05DLElBQU0sU0FDTkMsRUFBSyxTQUNMQyxHQUFNLEVBQ05DLEdBQU0sU0FDTkMsR0FBTSxTQUNOQyxHQUFNLFFBQ05DLEdBQU0sU0FDTkMsSUFBTSxTQUNOQyxJQUFNLEtBQ05DLElBQU0sUUFDTkMsSUFBTSxTQUNOQyxJQUFNLFNBQ05DLElBQU0sUUFDTkMsSUFBTSxLQUNOQyxJQUFNLFNBQ05DLElBQU0sRUFDTkMsSUFBTSxRQUNOekYsSUFBTyxTQUNQMEYsSUFBTyxRQUNQQyxJQUFPLFNBQ1BDLElBQU8sU0FDUEMsSUFBTyxRQUNQQyxJQUFPLFNBQ1BDLElBQU8sU0FD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QmhILEVBQUtxRSxRQUNMckUsRUFBSzRELFVBQVkyWSxHQUFtQnZjLEVBQUs0RCxTQUFXMlksR0FBbUJBLElBRzNFSSxNQUFPLFNBQVUzYyxHQU1iLElBSkEsSUFBSThHLEVBQVk5RyxFQUFLMkQsTUFHakJ0SSxFQUFJMkUsRUFBSzRELFNBQVcsSUFDZGtELEVBQVV6TCxJQUFNLEtBQVEsR0FBTUEsRUFBSSxFQUFLLEVBQU0sTUFDbkRBLElBRUoyRSxFQUFLNEQsU0FBV3ZJLEVBQUksSUFLckI2RCxHQWgyTGdCLFdBQW5COGpDLEVBQU83bkMsR0FFVkMsRUFBT0QsUUFBVUEsRUFBVTJHLEtBSTNCbWhDLEVBQU8sUUFBUHhnQyxLQUFBeWdDLEVBQUEsbUJBQUFDLEVBQUEsR0FBQUEsRUFBQTkvQixNQUFBbEksRUFBQWlvQyxHQUFBRCxLQUFBL25DLEVBQUFELFFBQUErbkMsbUZDUEYsSUFBSUcsRUFBd0IsaVBBT25CdGpDLGdDQUpULFNBQXlDb1MsR0FDckNBLEVBQU1reEIsbUZDSlYsSUFBSUMsRUFBNEIscXNxQkFNdkIzaUMsb0NBSlQsU0FBNkN3UixHQUN6Q0EsRUFBTW14QixtRkNIVixJQUFJQyxFQUFvQixpakRBT2YzaUMsNEJBSlQsU0FBcUN1UixHQUNqQ0EsRUFBTW94QixtRkNKVixJQUFJQyxFQUF3QixpN0RBTW5CcGlDLGdDQUpULFNBQXlDK1EsR0FDckNBLEVBQU1xeEIsbUZDSFYsSUFBSUMsRUFBbUIsNnhHQU1kcGlDLDJCQUpULFNBQW9DOFEsR0FDaENBLEVBQU1zeEIsbUZDSFYsSUFBSUMsRUFBdUIsNnRxQkFNbEI3aEMsK0JBSlQsU0FBd0NzUSxHQUNwQ0EsRUFBTXV4QiIsImZpbGUiOiJqcy9pbmRleC40ZjJlOTViZTcyMmRkZTJhODhkYS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIi8qKlxyXG4gKiAvc3JjL2pzL2luZGV4L2VudGVyLmpzIC0+IGluZGV4Lmh0bWxcclxuICovXHJcblxyXG4vL+mAgumFjeaJi+acuuWxj+W5leW4g+WxgOeahFxyXG5pbXBvcnQgJ2lqaWppbl9idWlsZGVyL3N0eWxlYnVpbGQvbGliL21vYmlsZS5sZXNzJztcclxuXHJcbmltcG9ydCAnLi4vLi4vbWFpbi5jc3MnO1xyXG5cclxuLy/lronoo4XkuYvlkI7ov5novrnov5jopoHlvJXlhaVcclxuaW1wb3J0IENyeXB0b0pTIGZyb20gJ2NyeXB0by1qcy9jcnlwdG8tanMnO1xyXG5cclxuaW1wb3J0IHsgaGFuZGxlQnVzaW5lc3NMb2FuVG90YWxSZXNwb25zZSB9IGZyb20gXCIuLi9kYXRhL2J1c2luZXNzLWxvYW4tdG90YWxcIjtcclxuaW1wb3J0IHsgaGFuZGxlQnVzaW5lc3NSZXBheW1lbnRQbGFuUmVzcG9uc2UgfSBmcm9tIFwiLi4vZGF0YS9idXNpbmVzcy1yZXBheW1lbnQtcGxhblwiO1xyXG5cclxuaW1wb3J0IHsgaGFuZGxlRnVuZExvYW5Ub3RhbFJlc3BvbnNlIH0gZnJvbSBcIi4uL2RhdGEvZnVuZC1sb2FuLXRvdGFsXCI7XHJcbmltcG9ydCB7IGhhbmRsZUZ1bmRSZXBheW1lbnRQbGFuUmVzcG9uc2UgfSBmcm9tIFwiLi4vZGF0YS9mdW5kLXJlcGF5bWVudC1wbGFuXCI7XHJcblxyXG5pbXBvcnQgeyBoYW5kbGVDYXJMb2FuVG90YWxSZXNwb25zZSB9IGZyb20gXCIuLi9kYXRhL2Nhci1sb2FuLXRvdGFsXCI7XHJcbmltcG9ydCB7IGhhbmRsZUNhclJlcGF5bWVudFBsYW5SZXNwb25zZSB9IGZyb20gXCIuLi9kYXRhL2Nhci1yZXBheW1lbnQtcGxhblwiO1xyXG5cclxuXHJcbi8v5Zug5Li6d2VicGFja+aJk+WMheeahOaXtuWAmeS4jeS8muWOu+WkhOeQhuWGheW1jOWIsGh0bWzkuK3nmoRqc+S7o+egge+8jOWmguaenOaYr+S9jueJiOacrOeahOezu+e7n++8iOWuieWNkzQuNO+8ieS8muWHuueOsOS4gOS6m+ivreazleS4jeaUr+aMgeeahOmXrumimO+8jOavlOWmgmxldO+8jCgpID0+IHt9562J6Zeu6aKYXHJcbi8vd2VicGFja+WImeS8muWkhOeQhuWFvOWuuei/meS6m+mXrumimFxyXG5cclxuXHJcbi8vIOWPluWbnlxyXG4kKFwiI3NlY3JldEtleVwiKS52YWwobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJteUxvYW5TZWNyZXRLZXlcIikpO1xyXG5cclxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjaGFuZ2VLZXlcIikub25jbGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0eXBlb2YoU3RvcmFnZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAvLyDlrZjlgqhcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIm15TG9hblNlY3JldEtleVwiLCAkKFwiI3NlY3JldEtleVwiKS52YWwoKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzdWx0XCIpLmlubmVySFRNTCA9IFwi5oqx5q2J77yB5oKo55qE5rWP6KeI5Zmo5LiN5pSv5oyBIFdlYiBTdG9yYWdlIC4uLlwiO1xyXG4gICAgfVxyXG59O1xyXG5cclxuLy/ms6jlhoznvJPlrZhcclxuaWYgKG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyICE9IG51bGwpIHtcclxuICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKCdzdy5qcycpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlZ2lzdHJhdGlvbikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnUmVnaXN0ZXJlZCBldmVudHMgYXQgc2NvcGU6ICcsIHJlZ2lzdHJhdGlvbi5zY29wZSk7XHJcbiAgICAgICAgfSk7XHJcbn1cclxuXHJcblxyXG4vLyDop6Plr4ZcclxuLy8gaHR0cHM6Ly9tb2xuLnNpdGUvMjAxOC8wNi8yMi9jcnlwdG8tanMtYWVzLXVzYWdlLmh0bWxcclxuLy8gaHR0cDovL3Rvb2wuY2hhY3VvLm5ldC9jcnlwdGFlc1xyXG4vLyBodHRwOi8vd3d3LmZseTYzLmNvbS9hcnRpY2xlL2RldGlhbC80MjZcclxuLy/lr7nljp/lp4vmlbDmja7ov5vooYzliqDlr4bmk43kvZznmoTml7blgJnphY3nva7lj4Lnhadhc3NldHMvaW1hZ2UvYWVz5Yqg5a+G5pON5L2cLnBuZ1xyXG5sZXQgc2VjcmV0S2V5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWNyZXRLZXlcIikudmFsdWU7XHJcblxyXG5pZiAoc2VjcmV0S2V5Lmxlbmd0aCAhPT0gMTYpIHtcclxuICAgIHNlY3JldEtleSA9IFwiXCI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlY3J5cHRlZERhdGEoYWVzRGF0YSkge1xyXG5cclxuICAgIGlmICghYWVzRGF0YSB8fCBhZXNEYXRhLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghc2VjcmV0S2V5IHx8IHNlY3JldEtleS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQga2V5ID0gQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2Uoc2VjcmV0S2V5KTtcclxuXHJcbiAgICBsZXQgZGVjcnlwdGVkRGF0YSA9IENyeXB0b0pTLkFFUy5kZWNyeXB0KGFlc0RhdGEsIGtleSwge1xyXG4gICAgICAgIG1vZGU6IENyeXB0b0pTLm1vZGUuRUNCLFxyXG4gICAgICAgIHBhZGRpbmc6IENyeXB0b0pTLnBhZC5aZXJvUGFkZGluZ1xyXG4gICAgfSk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICAvL+mYsuatouaKpemUme+8jOS4jeaYr+inhOWImeeahHV0ZjhcclxuICAgICAgICBsZXQgZGVjcnlwdGVkU3RyID0gQ3J5cHRvSlMuZW5jLlV0Zjguc3RyaW5naWZ5KGRlY3J5cHRlZERhdGEpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgcmV0dXJuIGRlY3J5cHRlZFN0cjtcclxuICAgIH1jYXRjaCAoZSkge1xyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLy/llYbotLfmgLvop4hcclxuaGFuZGxlQnVzaW5lc3NMb2FuVG90YWxSZXNwb25zZSgoZGF0YSkgPT4ge1xyXG4gICAgZGF0YSA9IGRlY3J5cHRlZERhdGEoZGF0YSk7XHJcblxyXG4gICAgaWYgKCFkYXRhIHx8IGRhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgLy/pmpDol49cclxuICAgICAgICAkKFwiI2J1cy10b3RhbC1kaXZcIikuY3NzKHtcImRpc3BsYXlcIjpcIm5vbmVcIn0pO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvL+WOu+Wtl+espuS4suWQjumdoueahOeJueauiuWtl+esplxyXG4gICAgZGF0YSA9IGRhdGEucmVwbGFjZSgvXFx1MDAwMC9nLCBcIlwiKTtcclxuICAgIGxldCBqc29uRGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XHJcblxyXG4gICAgJChcIiNidXMtdG90YWwtYmFua1wiKS5odG1sKFwi5Lit5Zu95Yac5Lia6ZO26KGM6IKh5Lu95pyJ6ZmQ5YWs5Y+45p2t5bee6Kej5pS+6Lev5pSv6KGMXCIpO1xyXG4gICAgJChcIiNidXMtdG90YWwtcmF0ZVwiKS5odG1sKFwiNS42MzUlXCIpO1xyXG4gICAgJChcIiNidXMtdG90YWwtZmluZS1yYXRlXCIpLmh0bWwoXCI4LjQ1MjUlXCIpO1xyXG4gICAgJChcIiNidXMtdG90YWwtcGF5LXN0eWxlXCIpLmh0bWwoXCLnrYnpop3mnKzmga9cIik7XHJcbiAgICAkKFwiI2J1cy10b3RhbC1wcmluY2lwYWxcIikuaHRtbChqc29uRGF0YVswXS5kTG9uQW10KTtcclxuICAgICQoXCIjYnVzLXRvdGFsLWJhbGFuY2VcIikuaHRtbChqc29uRGF0YVswXS5kQ3VyQmFsKTtcclxuICAgICQoXCIjYnVzLXRvdGFsLWZpcnN0RGF0ZVwiKS5odG1sKGpzb25EYXRhWzBdLnNMb25EYXQpO1xyXG4gICAgJChcIiNidXMtdG90YWwtZW5kRGF0ZVwiKS5odG1sKGpzb25EYXRhWzBdLnNFeHBEYXQpO1xyXG59KTtcclxuXHJcbmhhbmRsZUJ1c2luZXNzUmVwYXltZW50UGxhblJlc3BvbnNlKCgpID0+IHtcclxuXHJcbn0pO1xyXG5cclxuXHJcbi8v5YWs56ev6YeR6LS35qy+5oC76KeIXHJcbmhhbmRsZUZ1bmRMb2FuVG90YWxSZXNwb25zZSgoZGF0YSkgPT4ge1xyXG4gICAgZGF0YSA9IGRlY3J5cHRlZERhdGEoZGF0YSk7XHJcblxyXG4gICAgaWYgKCFkYXRhIHx8IGRhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgLy/pmpDol49cclxuICAgICAgICAkKFwiI2Z1bmQtdG90YWwtZGl2XCIpLmNzcyh7XCJkaXNwbGF5XCI6XCJub25lXCJ9KTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy/ljrvlrZfnrKbkuLLlkI7pnaLnmoTnibnmrorlrZfnrKZcclxuICAgIGRhdGEgPSBkYXRhLnJlcGxhY2UoL1xcdTAwMDAvZywgXCJcIik7XHJcbiAgICBsZXQganNvbkRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xyXG5cclxuICAgICQoXCIjZnVuZC10b3RhbC1iYW5rXCIpLmh0bWwoanNvbkRhdGEubG9hbkJhbmspO1xyXG4gICAgJChcIiNmdW5kLXRvdGFsLXJhdGVcIikuaHRtbChqc29uRGF0YS5sb2FuUmF0ZSk7XHJcbiAgICAkKFwiI2Z1bmQtdG90YWwtZmluZS1yYXRlXCIpLmh0bWwoanNvbkRhdGEucHVuaXNoUmF0ZSk7XHJcbiAgICAkKFwiI2Z1bmQtdG90YWwtcGF5LXN0eWxlXCIpLmh0bWwoXCLnrYnpop3mnKzmga9cIik7XHJcbiAgICAkKFwiI2Z1bmQtdG90YWwtcHJpbmNpcGFsXCIpLmh0bWwoanNvbkRhdGEubG9hbkFtb3VudCk7XHJcbiAgICAkKFwiI2Z1bmQtdG90YWwtYmFsYW5jZVwiKS5odG1sKGpzb25EYXRhLnJlbWFpbkFtb3VudCk7XHJcbiAgICAkKFwiI2Z1bmQtdG90YWwtZmlyc3REYXRlXCIpLmh0bWwoanNvbkRhdGEubG9hbkJlZ2luRGF0ZSk7XHJcbiAgICAkKFwiI2Z1bmQtdG90YWwtZW5kRGF0ZVwiKS5odG1sKGpzb25EYXRhLmxvYW5FbmREYXRlKTtcclxufSk7XHJcblxyXG5oYW5kbGVGdW5kUmVwYXltZW50UGxhblJlc3BvbnNlKCgpID0+IHtcclxuXHJcbn0pO1xyXG5cclxuLy/ovabkvY3otLfmgLvop4hcclxuaGFuZGxlQ2FyTG9hblRvdGFsUmVzcG9uc2UoKGRhdGEpID0+IHtcclxuICAgIGRhdGEgPSBkZWNyeXB0ZWREYXRhKGRhdGEpO1xyXG5cclxuICAgIGlmICghZGF0YSB8fCBkYXRhLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIC8v6ZqQ6JePXHJcbiAgICAgICAgJChcIiNjYXItdG90YWwtZGl2XCIpLmNzcyh7XCJkaXNwbGF5XCI6XCJub25lXCJ9KTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy/ljrvlrZfnrKbkuLLlkI7pnaLnmoTnibnmrorlrZfnrKZcclxuICAgIGRhdGEgPSBkYXRhLnJlcGxhY2UoL1xcdTAwMDAvZywgXCJcIik7XHJcbiAgICBsZXQganNvbkRhdGEgPSBKU09OLnBhcnNlKGRhdGEpLklORkJEWS5XQ0xOUUxOMVoxWzBdO1xyXG4gICAgJChcIiNjYXItdG90YWwtYmFua1wiKS5odG1sKFwi5Lit5Zu95oub5ZWG6ZO26KGM6IKh5Lu95pyJ6ZmQ5YWs5Y+45p2t5bee5rex6JOd5pSv6KGMXCIpO1xyXG4gICAgJChcIiNjYXItdG90YWwtcmF0ZVwiKS5odG1sKGpzb25EYXRhLlJBVEVYRSk7XHJcbiAgICAkKFwiI2Nhci10b3RhbC1maW5lLXJhdGVcIikuaHRtbChcIuaaguaXoFwiKTtcclxuICAgICQoXCIjY2FyLXRvdGFsLXBheS1zdHlsZVwiKS5odG1sKFwi562J6aKd5pys5oGvXCIpO1xyXG4gICAgJChcIiNjYXItdG90YWwtcHJpbmNpcGFsXCIpLmh0bWwoanNvbkRhdGEuVVNEQU1UKTtcclxuICAgICQoXCIjY2FyLXRvdGFsLWJhbGFuY2VcIikuaHRtbChqc29uRGF0YS5DUFRTVU0pO1xyXG4gICAgJChcIiNjYXItdG90YWwtZmlyc3REYXRlXCIpLmh0bWwoanNvbkRhdGEuQklMVVBEKTtcclxuICAgICQoXCIjY2FyLXRvdGFsLWVuZERhdGVcIikuaHRtbChqc29uRGF0YS5FTkREVEUpO1xyXG59KTtcclxuXHJcbmhhbmRsZUNhclJlcGF5bWVudFBsYW5SZXNwb25zZSgoKSA9PiB7XHJcblxyXG59KTtcclxuXHJcblxyXG4vLy5odG1sKCnnlKjkuLror7vlj5blkozkv67mlLnlhYPntKDnmoRIVE1M5qCH562+XHJcbi8vICQoXCIjZmlyc3QtZGF0ZVwiKS5odG1sKHRvZGF5KTtcclxuLy8gJChcIiNzZWMtZGF0ZVwiKS5odG1sKHRvZGF5KTtcclxuXHJcblxyXG5cclxuXHJcblxyXG4vL+WUpOmGklxyXG4vLyAkKCcjc2hhcmVUb3VjaERpdicpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuLy8gICAgIC8v5YiG5Lqr5ZSk6YaS5a+56LGhXHJcbi8vICAgICB2YXIgd2FrZSA9IF8uYXdha2Uod2luZG93LmxvY2F0aW9uLmhyZWYpO1xyXG4vLyAgICAgLy/llKTphpLkuovku7ZcclxuLy8gICAgIHdha2UuY2xpY2tBd2FrZSgpO1xyXG4vLyB9KTtcclxuIiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdHJvb3QuQ3J5cHRvSlMgPSBmYWN0b3J5KCk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuXG5cdC8qKlxuXHQgKiBDcnlwdG9KUyBjb3JlIGNvbXBvbmVudHMuXG5cdCAqL1xuXHR2YXIgQ3J5cHRvSlMgPSBDcnlwdG9KUyB8fCAoZnVuY3Rpb24gKE1hdGgsIHVuZGVmaW5lZCkge1xuXHQgICAgLypcblx0ICAgICAqIExvY2FsIHBvbHlmaWwgb2YgT2JqZWN0LmNyZWF0ZVxuXHQgICAgICovXG5cdCAgICB2YXIgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZSB8fCAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGZ1bmN0aW9uIEYoKSB7fTtcblxuXHQgICAgICAgIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG5cdCAgICAgICAgICAgIHZhciBzdWJ0eXBlO1xuXG5cdCAgICAgICAgICAgIEYucHJvdG90eXBlID0gb2JqO1xuXG5cdCAgICAgICAgICAgIHN1YnR5cGUgPSBuZXcgRigpO1xuXG5cdCAgICAgICAgICAgIEYucHJvdG90eXBlID0gbnVsbDtcblxuXHQgICAgICAgICAgICByZXR1cm4gc3VidHlwZTtcblx0ICAgICAgICB9O1xuXHQgICAgfSgpKVxuXG5cdCAgICAvKipcblx0ICAgICAqIENyeXB0b0pTIG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIEMgPSB7fTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBMaWJyYXJ5IG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfbGliID0gQy5saWIgPSB7fTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBCYXNlIG9iamVjdCBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlID0gKGZ1bmN0aW9uICgpIHtcblxuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGlzIG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG92ZXJyaWRlcyBQcm9wZXJ0aWVzIHRvIGNvcHkgaW50byB0aGUgbmV3IG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgbmV3IG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgdmFyIE15VHlwZSA9IENyeXB0b0pTLmxpYi5CYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgICAgICAqICAgICAgICAgZmllbGQ6ICd2YWx1ZScsXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICAgICAgbWV0aG9kOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAqICAgICAgICAgfVxuXHQgICAgICAgICAgICAgKiAgICAgfSk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBleHRlbmQ6IGZ1bmN0aW9uIChvdmVycmlkZXMpIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNwYXduXG5cdCAgICAgICAgICAgICAgICB2YXIgc3VidHlwZSA9IGNyZWF0ZSh0aGlzKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gQXVnbWVudFxuXHQgICAgICAgICAgICAgICAgaWYgKG92ZXJyaWRlcykge1xuXHQgICAgICAgICAgICAgICAgICAgIHN1YnR5cGUubWl4SW4ob3ZlcnJpZGVzKTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGRlZmF1bHQgaW5pdGlhbGl6ZXJcblx0ICAgICAgICAgICAgICAgIGlmICghc3VidHlwZS5oYXNPd25Qcm9wZXJ0eSgnaW5pdCcpIHx8IHRoaXMuaW5pdCA9PT0gc3VidHlwZS5pbml0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc3VidHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdWJ0eXBlLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZXIncyBwcm90b3R5cGUgaXMgdGhlIHN1YnR5cGUgb2JqZWN0XG5cdCAgICAgICAgICAgICAgICBzdWJ0eXBlLmluaXQucHJvdG90eXBlID0gc3VidHlwZTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVmZXJlbmNlIHN1cGVydHlwZVxuXHQgICAgICAgICAgICAgICAgc3VidHlwZS4kc3VwZXIgPSB0aGlzO1xuXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gc3VidHlwZTtcblx0ICAgICAgICAgICAgfSxcblxuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogRXh0ZW5kcyB0aGlzIG9iamVjdCBhbmQgcnVucyB0aGUgaW5pdCBtZXRob2QuXG5cdCAgICAgICAgICAgICAqIEFyZ3VtZW50cyB0byBjcmVhdGUoKSB3aWxsIGJlIHBhc3NlZCB0byBpbml0KCkuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIG5ldyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogICAgIHZhciBpbnN0YW5jZSA9IE15VHlwZS5jcmVhdGUoKTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5leHRlbmQoKTtcblx0ICAgICAgICAgICAgICAgIGluc3RhbmNlLmluaXQuYXBwbHkoaW5zdGFuY2UsIGFyZ3VtZW50cyk7XG5cblx0ICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcblx0ICAgICAgICAgICAgfSxcblxuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIG9iamVjdC5cblx0ICAgICAgICAgICAgICogT3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gYWRkIHNvbWUgbG9naWMgd2hlbiB5b3VyIG9iamVjdHMgYXJlIGNyZWF0ZWQuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICB2YXIgTXlUeXBlID0gQ3J5cHRvSlMubGliLkJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAgICAgICogICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAqICAgICAgICAgICAgIC8vIC4uLlxuXHQgICAgICAgICAgICAgKiAgICAgICAgIH1cblx0ICAgICAgICAgICAgICogICAgIH0pO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBDb3BpZXMgcHJvcGVydGllcyBpbnRvIHRoaXMgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyBUaGUgcHJvcGVydGllcyB0byBtaXggaW4uXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICBNeVR5cGUubWl4SW4oe1xuXHQgICAgICAgICAgICAgKiAgICAgICAgIGZpZWxkOiAndmFsdWUnXG5cdCAgICAgICAgICAgICAqICAgICB9KTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIG1peEluOiBmdW5jdGlvbiAocHJvcGVydGllcykge1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgcHJvcGVydHlOYW1lIGluIHByb3BlcnRpZXMpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eU5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbcHJvcGVydHlOYW1lXSA9IHByb3BlcnRpZXNbcHJvcGVydHlOYW1lXTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIElFIHdvbid0IGNvcHkgdG9TdHJpbmcgdXNpbmcgdGhlIGxvb3AgYWJvdmVcblx0ICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KCd0b1N0cmluZycpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50b1N0cmluZyA9IHByb3BlcnRpZXMudG9TdHJpbmc7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBjbG9uZS5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogICAgIHZhciBjbG9uZSA9IGluc3RhbmNlLmNsb25lKCk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5pdC5wcm90b3R5cGUuZXh0ZW5kKHRoaXMpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfTtcblx0ICAgIH0oKSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQW4gYXJyYXkgb2YgMzItYml0IHdvcmRzLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7QXJyYXl9IHdvcmRzIFRoZSBhcnJheSBvZiAzMi1iaXQgd29yZHMuXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gc2lnQnl0ZXMgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgKi9cblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXkgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSB3b3JkcyAoT3B0aW9uYWwpIEFuIGFycmF5IG9mIDMyLWJpdCB3b3Jkcy5cblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gc2lnQnl0ZXMgKE9wdGlvbmFsKSBUaGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGJ5dGVzIGluIHRoZSB3b3Jkcy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKCk7XG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZShbMHgwMDAxMDIwMywgMHgwNDA1MDYwN10pO1xuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoWzB4MDAwMTAyMDMsIDB4MDQwNTA2MDddLCA2KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAod29yZHMsIHNpZ0J5dGVzKSB7XG5cdCAgICAgICAgICAgIHdvcmRzID0gdGhpcy53b3JkcyA9IHdvcmRzIHx8IFtdO1xuXG5cdCAgICAgICAgICAgIGlmIChzaWdCeXRlcyAhPSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgPSBzaWdCeXRlcztcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgPSB3b3Jkcy5sZW5ndGggKiA0O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIHRoaXMgd29yZCBhcnJheSB0byBhIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlciAoT3B0aW9uYWwpIFRoZSBlbmNvZGluZyBzdHJhdGVneSB0byB1c2UuIERlZmF1bHQ6IENyeXB0b0pTLmVuYy5IZXhcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZ2lmaWVkIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSB3b3JkQXJyYXkgKyAnJztcblx0ICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IHdvcmRBcnJheS50b1N0cmluZygpO1xuXHQgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gd29yZEFycmF5LnRvU3RyaW5nKENyeXB0b0pTLmVuYy5VdGY4KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gKGVuY29kZXIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIChlbmNvZGVyIHx8IEhleCkuc3RyaW5naWZ5KHRoaXMpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25jYXRlbmF0ZXMgYSB3b3JkIGFycmF5IHRvIHRoaXMgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkgdG8gYXBwZW5kLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHdvcmRBcnJheTEuY29uY2F0KHdvcmRBcnJheTIpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNvbmNhdDogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHRoaXNXb3JkcyA9IHRoaXMud29yZHM7XG5cdCAgICAgICAgICAgIHZhciB0aGF0V29yZHMgPSB3b3JkQXJyYXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciB0aGlzU2lnQnl0ZXMgPSB0aGlzLnNpZ0J5dGVzO1xuXHQgICAgICAgICAgICB2YXIgdGhhdFNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENsYW1wIGV4Y2VzcyBiaXRzXG5cdCAgICAgICAgICAgIHRoaXMuY2xhbXAoKTtcblxuXHQgICAgICAgICAgICAvLyBDb25jYXRcblx0ICAgICAgICAgICAgaWYgKHRoaXNTaWdCeXRlcyAlIDQpIHtcblx0ICAgICAgICAgICAgICAgIC8vIENvcHkgb25lIGJ5dGUgYXQgYSB0aW1lXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoYXRTaWdCeXRlczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHRoYXRCeXRlID0gKHRoYXRXb3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmY7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpc1dvcmRzWyh0aGlzU2lnQnl0ZXMgKyBpKSA+Pj4gMl0gfD0gdGhhdEJ5dGUgPDwgKDI0IC0gKCh0aGlzU2lnQnl0ZXMgKyBpKSAlIDQpICogOCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAvLyBDb3B5IG9uZSB3b3JkIGF0IGEgdGltZVxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGF0U2lnQnl0ZXM7IGkgKz0gNCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXNXb3Jkc1sodGhpc1NpZ0J5dGVzICsgaSkgPj4+IDJdID0gdGhhdFdvcmRzW2kgPj4+IDJdO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgKz0gdGhhdFNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENoYWluYWJsZVxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUmVtb3ZlcyBpbnNpZ25pZmljYW50IGJpdHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHdvcmRBcnJheS5jbGFtcCgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNsYW1wOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSB0aGlzLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgc2lnQnl0ZXMgPSB0aGlzLnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENsYW1wXG5cdCAgICAgICAgICAgIHdvcmRzW3NpZ0J5dGVzID4+PiAyXSAmPSAweGZmZmZmZmZmIDw8ICgzMiAtIChzaWdCeXRlcyAlIDQpICogOCk7XG5cdCAgICAgICAgICAgIHdvcmRzLmxlbmd0aCA9IE1hdGguY2VpbChzaWdCeXRlcyAvIDQpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBjbG9uZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNsb25lID0gd29yZEFycmF5LmNsb25lKCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gQmFzZS5jbG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICBjbG9uZS53b3JkcyA9IHRoaXMud29yZHMuc2xpY2UoMCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGEgd29yZCBhcnJheSBmaWxsZWQgd2l0aCByYW5kb20gYnl0ZXMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbkJ5dGVzIFRoZSBudW1iZXIgb2YgcmFuZG9tIGJ5dGVzIHRvIGdlbmVyYXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcmFuZG9tIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LnJhbmRvbSgxNik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcmFuZG9tOiBmdW5jdGlvbiAobkJ5dGVzKSB7XG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IFtdO1xuXG5cdCAgICAgICAgICAgIHZhciByID0gKGZ1bmN0aW9uIChtX3cpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBtX3cgPSBtX3c7XG5cdCAgICAgICAgICAgICAgICB2YXIgbV96ID0gMHgzYWRlNjhiMTtcblx0ICAgICAgICAgICAgICAgIHZhciBtYXNrID0gMHhmZmZmZmZmZjtcblxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgICBtX3ogPSAoMHg5MDY5ICogKG1feiAmIDB4RkZGRikgKyAobV96ID4+IDB4MTApKSAmIG1hc2s7XG5cdCAgICAgICAgICAgICAgICAgICAgbV93ID0gKDB4NDY1MCAqIChtX3cgJiAweEZGRkYpICsgKG1fdyA+PiAweDEwKSkgJiBtYXNrO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSAoKG1feiA8PCAweDEwKSArIG1fdykgJiBtYXNrO1xuXHQgICAgICAgICAgICAgICAgICAgIHJlc3VsdCAvPSAweDEwMDAwMDAwMDtcblx0ICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gMC41O1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKiAoTWF0aC5yYW5kb20oKSA+IC41ID8gMSA6IC0xKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHJjYWNoZTsgaSA8IG5CeXRlczsgaSArPSA0KSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgX3IgPSByKChyY2FjaGUgfHwgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwMDAwMCk7XG5cblx0ICAgICAgICAgICAgICAgIHJjYWNoZSA9IF9yKCkgKiAweDNhZGU2N2I3O1xuXHQgICAgICAgICAgICAgICAgd29yZHMucHVzaCgoX3IoKSAqIDB4MTAwMDAwMDAwKSB8IDApO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdCh3b3JkcywgbkJ5dGVzKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBFbmNvZGVyIG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfZW5jID0gQy5lbmMgPSB7fTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBIZXggZW5jb2Rpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIHZhciBIZXggPSBDX2VuYy5IZXggPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgaGV4IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBoZXggc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgaGV4U3RyaW5nID0gQ3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIGhleENoYXJzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGJpdGUgPSAod29yZHNbaSA+Pj4gMl0gPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgJiAweGZmO1xuXHQgICAgICAgICAgICAgICAgaGV4Q2hhcnMucHVzaCgoYml0ZSA+Pj4gNCkudG9TdHJpbmcoMTYpKTtcblx0ICAgICAgICAgICAgICAgIGhleENoYXJzLnB1c2goKGJpdGUgJiAweDBmKS50b1N0cmluZygxNikpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGhleENoYXJzLmpvaW4oJycpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIGhleCBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGhleFN0ciBUaGUgaGV4IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuSGV4LnBhcnNlKGhleFN0cmluZyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIChoZXhTdHIpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGhleFN0ckxlbmd0aCA9IGhleFN0ci5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZXhTdHJMZW5ndGg7IGkgKz0gMikge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gM10gfD0gcGFyc2VJbnQoaGV4U3RyLnN1YnN0cihpLCAyKSwgMTYpIDw8ICgyNCAtIChpICUgOCkgKiA0KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQod29yZHMsIGhleFN0ckxlbmd0aCAvIDIpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIC8qKlxuXHQgICAgICogTGF0aW4xIGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgTGF0aW4xID0gQ19lbmMuTGF0aW4xID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIExhdGluMSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgTGF0aW4xIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGxhdGluMVN0cmluZyA9IENyeXB0b0pTLmVuYy5MYXRpbjEuc3RyaW5naWZ5KHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciBsYXRpbjFDaGFycyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBiaXRlID0gKHdvcmRzW2kgPj4+IDJdID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICYgMHhmZjtcblx0ICAgICAgICAgICAgICAgIGxhdGluMUNoYXJzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShiaXRlKSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gbGF0aW4xQ2hhcnMuam9pbignJyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgTGF0aW4xIHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF0aW4xU3RyIFRoZSBMYXRpbjEgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmVuYy5MYXRpbjEucGFyc2UobGF0aW4xU3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKGxhdGluMVN0cikge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgbGF0aW4xU3RyTGVuZ3RoID0gbGF0aW4xU3RyLmxlbmd0aDtcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhdGluMVN0ckxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tpID4+PiAyXSB8PSAobGF0aW4xU3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmKSA8PCAoMjQgLSAoaSAlIDQpICogOCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHdvcmRzLCBsYXRpbjFTdHJMZW5ndGgpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIC8qKlxuXHQgICAgICogVVRGLTggZW5jb2Rpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIHZhciBVdGY4ID0gQ19lbmMuVXRmOCA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBVVEYtOCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgVVRGLTggc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgdXRmOFN0cmluZyA9IENyeXB0b0pTLmVuYy5VdGY4LnN0cmluZ2lmeSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xuXHQgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoTGF0aW4xLnN0cmluZ2lmeSh3b3JkQXJyYXkpKSk7XG5cdCAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWFsZm9ybWVkIFVURi04IGRhdGEnKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIFVURi04IHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXRmOFN0ciBUaGUgVVRGLTggc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHV0ZjhTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAodXRmOFN0cikge1xuXHQgICAgICAgICAgICByZXR1cm4gTGF0aW4xLnBhcnNlKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudCh1dGY4U3RyKSkpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWJzdHJhY3QgYnVmZmVyZWQgYmxvY2sgYWxnb3JpdGhtIHRlbXBsYXRlLlxuXHQgICAgICpcblx0ICAgICAqIFRoZSBwcm9wZXJ0eSBibG9ja1NpemUgbXVzdCBiZSBpbXBsZW1lbnRlZCBpbiBhIGNvbmNyZXRlIHN1YnR5cGUuXG5cdCAgICAgKlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IF9taW5CdWZmZXJTaXplIFRoZSBudW1iZXIgb2YgYmxvY2tzIHRoYXQgc2hvdWxkIGJlIGtlcHQgdW5wcm9jZXNzZWQgaW4gdGhlIGJ1ZmZlci4gRGVmYXVsdDogMFxuXHQgICAgICovXG5cdCAgICB2YXIgQnVmZmVyZWRCbG9ja0FsZ29yaXRobSA9IENfbGliLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0gPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUmVzZXRzIHRoaXMgYmxvY2sgYWxnb3JpdGhtJ3MgZGF0YSBidWZmZXIgdG8gaXRzIGluaXRpYWwgc3RhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0ucmVzZXQoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBJbml0aWFsIHZhbHVlc1xuXHQgICAgICAgICAgICB0aGlzLl9kYXRhID0gbmV3IFdvcmRBcnJheS5pbml0KCk7XG5cdCAgICAgICAgICAgIHRoaXMuX25EYXRhQnl0ZXMgPSAwO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBBZGRzIG5ldyBkYXRhIHRvIHRoaXMgYmxvY2sgYWxnb3JpdGhtJ3MgYnVmZmVyLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGFwcGVuZC4gU3RyaW5ncyBhcmUgY29udmVydGVkIHRvIGEgV29yZEFycmF5IHVzaW5nIFVURi04LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLl9hcHBlbmQoJ2RhdGEnKTtcblx0ICAgICAgICAgKiAgICAgYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fYXBwZW5kKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgX2FwcGVuZDogZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgICAgICAgLy8gQ29udmVydCBzdHJpbmcgdG8gV29yZEFycmF5LCBlbHNlIGFzc3VtZSBXb3JkQXJyYXkgYWxyZWFkeVxuXHQgICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgICAgICAgIGRhdGEgPSBVdGY4LnBhcnNlKGRhdGEpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gQXBwZW5kXG5cdCAgICAgICAgICAgIHRoaXMuX2RhdGEuY29uY2F0KGRhdGEpO1xuXHQgICAgICAgICAgICB0aGlzLl9uRGF0YUJ5dGVzICs9IGRhdGEuc2lnQnl0ZXM7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFByb2Nlc3NlcyBhdmFpbGFibGUgZGF0YSBibG9ja3MuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBUaGlzIG1ldGhvZCBpbnZva2VzIF9kb1Byb2Nlc3NCbG9jayhvZmZzZXQpLCB3aGljaCBtdXN0IGJlIGltcGxlbWVudGVkIGJ5IGEgY29uY3JldGUgc3VidHlwZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZG9GbHVzaCBXaGV0aGVyIGFsbCBibG9ja3MgYW5kIHBhcnRpYWwgYmxvY2tzIHNob3VsZCBiZSBwcm9jZXNzZWQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBwcm9jZXNzZWQgZGF0YS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHByb2Nlc3NlZERhdGEgPSBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLl9wcm9jZXNzKCk7XG5cdCAgICAgICAgICogICAgIHZhciBwcm9jZXNzZWREYXRhID0gYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fcHJvY2VzcyghISdmbHVzaCcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9wcm9jZXNzOiBmdW5jdGlvbiAoZG9GbHVzaCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGRhdGFTaWdCeXRlcyA9IGRhdGEuc2lnQnl0ZXM7XG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSB0aGlzLmJsb2NrU2l6ZTtcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZUJ5dGVzID0gYmxvY2tTaXplICogNDtcblxuXHQgICAgICAgICAgICAvLyBDb3VudCBibG9ja3MgcmVhZHlcblx0ICAgICAgICAgICAgdmFyIG5CbG9ja3NSZWFkeSA9IGRhdGFTaWdCeXRlcyAvIGJsb2NrU2l6ZUJ5dGVzO1xuXHQgICAgICAgICAgICBpZiAoZG9GbHVzaCkge1xuXHQgICAgICAgICAgICAgICAgLy8gUm91bmQgdXAgdG8gaW5jbHVkZSBwYXJ0aWFsIGJsb2Nrc1xuXHQgICAgICAgICAgICAgICAgbkJsb2Nrc1JlYWR5ID0gTWF0aC5jZWlsKG5CbG9ja3NSZWFkeSk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAvLyBSb3VuZCBkb3duIHRvIGluY2x1ZGUgb25seSBmdWxsIGJsb2Nrcyxcblx0ICAgICAgICAgICAgICAgIC8vIGxlc3MgdGhlIG51bWJlciBvZiBibG9ja3MgdGhhdCBtdXN0IHJlbWFpbiBpbiB0aGUgYnVmZmVyXG5cdCAgICAgICAgICAgICAgICBuQmxvY2tzUmVhZHkgPSBNYXRoLm1heCgobkJsb2Nrc1JlYWR5IHwgMCkgLSB0aGlzLl9taW5CdWZmZXJTaXplLCAwKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIENvdW50IHdvcmRzIHJlYWR5XG5cdCAgICAgICAgICAgIHZhciBuV29yZHNSZWFkeSA9IG5CbG9ja3NSZWFkeSAqIGJsb2NrU2l6ZTtcblxuXHQgICAgICAgICAgICAvLyBDb3VudCBieXRlcyByZWFkeVxuXHQgICAgICAgICAgICB2YXIgbkJ5dGVzUmVhZHkgPSBNYXRoLm1pbihuV29yZHNSZWFkeSAqIDQsIGRhdGFTaWdCeXRlcyk7XG5cblx0ICAgICAgICAgICAgLy8gUHJvY2VzcyBibG9ja3Ncblx0ICAgICAgICAgICAgaWYgKG5Xb3Jkc1JlYWR5KSB7XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBvZmZzZXQgPSAwOyBvZmZzZXQgPCBuV29yZHNSZWFkeTsgb2Zmc2V0ICs9IGJsb2NrU2l6ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtYWxnb3JpdGhtIGxvZ2ljXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fZG9Qcm9jZXNzQmxvY2soZGF0YVdvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBSZW1vdmUgcHJvY2Vzc2VkIHdvcmRzXG5cdCAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc2VkV29yZHMgPSBkYXRhV29yZHMuc3BsaWNlKDAsIG5Xb3Jkc1JlYWR5KTtcblx0ICAgICAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgLT0gbkJ5dGVzUmVhZHk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBSZXR1cm4gcHJvY2Vzc2VkIHdvcmRzXG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQocHJvY2Vzc2VkV29yZHMsIG5CeXRlc1JlYWR5KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBjbG9uZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNsb25lID0gYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5jbG9uZSgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEJhc2UuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUuX2RhdGEgPSB0aGlzLl9kYXRhLmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfbWluQnVmZmVyU2l6ZTogMFxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWJzdHJhY3QgaGFzaGVyIHRlbXBsYXRlLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBibG9ja1NpemUgVGhlIG51bWJlciBvZiAzMi1iaXQgd29yZHMgdGhpcyBoYXNoZXIgb3BlcmF0ZXMgb24uIERlZmF1bHQ6IDE2ICg1MTIgYml0cylcblx0ICAgICAqL1xuXHQgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlciA9IEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBCYXNlLmV4dGVuZCgpLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIGhhc2hlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBoYXNoIGNvbXB1dGF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgaGFzaGVyID0gQ3J5cHRvSlMuYWxnby5TSEEyNTYuY3JlYXRlKCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKGNmZykge1xuXHQgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcblx0ICAgICAgICAgICAgdGhpcy5jZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTtcblxuXHQgICAgICAgICAgICAvLyBTZXQgaW5pdGlhbCB2YWx1ZXNcblx0ICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSZXNldHMgdGhpcyBoYXNoZXIgdG8gaXRzIGluaXRpYWwgc3RhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGhhc2hlci5yZXNldCgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFJlc2V0IGRhdGEgYnVmZmVyXG5cdCAgICAgICAgICAgIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0ucmVzZXQuY2FsbCh0aGlzKTtcblxuXHQgICAgICAgICAgICAvLyBQZXJmb3JtIGNvbmNyZXRlLWhhc2hlciBsb2dpY1xuXHQgICAgICAgICAgICB0aGlzLl9kb1Jlc2V0KCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFVwZGF0ZXMgdGhpcyBoYXNoZXIgd2l0aCBhIG1lc3NhZ2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgVGhlIG1lc3NhZ2UgdG8gYXBwZW5kLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7SGFzaGVyfSBUaGlzIGhhc2hlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgaGFzaGVyLnVwZGF0ZSgnbWVzc2FnZScpO1xuXHQgICAgICAgICAqICAgICBoYXNoZXIudXBkYXRlKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAobWVzc2FnZVVwZGF0ZSkge1xuXHQgICAgICAgICAgICAvLyBBcHBlbmRcblx0ICAgICAgICAgICAgdGhpcy5fYXBwZW5kKG1lc3NhZ2VVcGRhdGUpO1xuXG5cdCAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgaGFzaFxuXHQgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG5cblx0ICAgICAgICAgICAgLy8gQ2hhaW5hYmxlXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBGaW5hbGl6ZXMgdGhlIGhhc2ggY29tcHV0YXRpb24uXG5cdCAgICAgICAgICogTm90ZSB0aGF0IHRoZSBmaW5hbGl6ZSBvcGVyYXRpb24gaXMgZWZmZWN0aXZlbHkgYSBkZXN0cnVjdGl2ZSwgcmVhZC1vbmNlIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZVVwZGF0ZSAoT3B0aW9uYWwpIEEgZmluYWwgbWVzc2FnZSB1cGRhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgaGFzaCA9IGhhc2hlci5maW5hbGl6ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIgaGFzaCA9IGhhc2hlci5maW5hbGl6ZSgnbWVzc2FnZScpO1xuXHQgICAgICAgICAqICAgICB2YXIgaGFzaCA9IGhhc2hlci5maW5hbGl6ZSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGZpbmFsaXplOiBmdW5jdGlvbiAobWVzc2FnZVVwZGF0ZSkge1xuXHQgICAgICAgICAgICAvLyBGaW5hbCBtZXNzYWdlIHVwZGF0ZVxuXHQgICAgICAgICAgICBpZiAobWVzc2FnZVVwZGF0ZSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fYXBwZW5kKG1lc3NhZ2VVcGRhdGUpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1oYXNoZXIgbG9naWNcblx0ICAgICAgICAgICAgdmFyIGhhc2ggPSB0aGlzLl9kb0ZpbmFsaXplKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGhhc2g7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGJsb2NrU2l6ZTogNTEyLzMyLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIHNob3J0Y3V0IGZ1bmN0aW9uIHRvIGEgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2hlciB0byBjcmVhdGUgYSBoZWxwZXIgZm9yLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBzaG9ydGN1dCBmdW5jdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIFNIQTI1NiA9IENyeXB0b0pTLmxpYi5IYXNoZXIuX2NyZWF0ZUhlbHBlcihDcnlwdG9KUy5hbGdvLlNIQTI1Nik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgX2NyZWF0ZUhlbHBlcjogZnVuY3Rpb24gKGhhc2hlcikge1xuXHQgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1lc3NhZ2UsIGNmZykge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBoYXNoZXIuaW5pdChjZmcpLmZpbmFsaXplKG1lc3NhZ2UpO1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGEgc2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtIYXNoZXJ9IGhhc2hlciBUaGUgaGFzaGVyIHRvIHVzZSBpbiB0aGlzIEhNQUMgaGVscGVyLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBzaG9ydGN1dCBmdW5jdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIEhtYWNTSEEyNTYgPSBDcnlwdG9KUy5saWIuSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKENyeXB0b0pTLmFsZ28uU0hBMjU2KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBfY3JlYXRlSG1hY0hlbHBlcjogZnVuY3Rpb24gKGhhc2hlcikge1xuXHQgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1lc3NhZ2UsIGtleSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDX2FsZ28uSE1BQy5pbml0KGhhc2hlciwga2V5KS5maW5hbGl6ZShtZXNzYWdlKTtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBbGdvcml0aG0gbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvID0ge307XG5cblx0ICAgIHJldHVybiBDO1xuXHR9KE1hdGgpKTtcblxuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQ19lbmMgPSBDLmVuYztcblxuXHQgICAgLyoqXG5cdCAgICAgKiBCYXNlNjQgZW5jb2Rpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIHZhciBCYXNlNjQgPSBDX2VuYy5CYXNlNjQgPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgQmFzZTY0IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBCYXNlNjQgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgYmFzZTY0U3RyaW5nID0gQ3J5cHRvSlMuZW5jLkJhc2U2NC5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXHQgICAgICAgICAgICB2YXIgbWFwID0gdGhpcy5fbWFwO1xuXG5cdCAgICAgICAgICAgIC8vIENsYW1wIGV4Y2VzcyBiaXRzXG5cdCAgICAgICAgICAgIHdvcmRBcnJheS5jbGFtcCgpO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIGJhc2U2NENoYXJzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkgKz0gMykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGJ5dGUxID0gKHdvcmRzW2kgPj4+IDJdICAgICAgID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICAgICAgICYgMHhmZjtcblx0ICAgICAgICAgICAgICAgIHZhciBieXRlMiA9ICh3b3Jkc1soaSArIDEpID4+PiAyXSA+Pj4gKDI0IC0gKChpICsgMSkgJSA0KSAqIDgpKSAmIDB4ZmY7XG5cdCAgICAgICAgICAgICAgICB2YXIgYnl0ZTMgPSAod29yZHNbKGkgKyAyKSA+Pj4gMl0gPj4+ICgyNCAtICgoaSArIDIpICUgNCkgKiA4KSkgJiAweGZmO1xuXG5cdCAgICAgICAgICAgICAgICB2YXIgdHJpcGxldCA9IChieXRlMSA8PCAxNikgfCAoYnl0ZTIgPDwgOCkgfCBieXRlMztcblxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IChqIDwgNCkgJiYgKGkgKyBqICogMC43NSA8IHNpZ0J5dGVzKTsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYmFzZTY0Q2hhcnMucHVzaChtYXAuY2hhckF0KCh0cmlwbGV0ID4+PiAoNiAqICgzIC0gaikpKSAmIDB4M2YpKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIHZhciBwYWRkaW5nQ2hhciA9IG1hcC5jaGFyQXQoNjQpO1xuXHQgICAgICAgICAgICBpZiAocGFkZGluZ0NoYXIpIHtcblx0ICAgICAgICAgICAgICAgIHdoaWxlIChiYXNlNjRDaGFycy5sZW5ndGggJSA0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYmFzZTY0Q2hhcnMucHVzaChwYWRkaW5nQ2hhcik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gYmFzZTY0Q2hhcnMuam9pbignJyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgQmFzZTY0IHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmFzZTY0U3RyIFRoZSBCYXNlNjQgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmVuYy5CYXNlNjQucGFyc2UoYmFzZTY0U3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKGJhc2U2NFN0cikge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGJhc2U2NFN0ckxlbmd0aCA9IGJhc2U2NFN0ci5sZW5ndGg7XG5cdCAgICAgICAgICAgIHZhciBtYXAgPSB0aGlzLl9tYXA7XG5cdCAgICAgICAgICAgIHZhciByZXZlcnNlTWFwID0gdGhpcy5fcmV2ZXJzZU1hcDtcblxuXHQgICAgICAgICAgICBpZiAoIXJldmVyc2VNYXApIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXZlcnNlTWFwID0gdGhpcy5fcmV2ZXJzZU1hcCA9IFtdO1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWFwLmxlbmd0aDsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldmVyc2VNYXBbbWFwLmNoYXJDb2RlQXQoaildID0gajtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJZ25vcmUgcGFkZGluZ1xuXHQgICAgICAgICAgICB2YXIgcGFkZGluZ0NoYXIgPSBtYXAuY2hhckF0KDY0KTtcblx0ICAgICAgICAgICAgaWYgKHBhZGRpbmdDaGFyKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgcGFkZGluZ0luZGV4ID0gYmFzZTY0U3RyLmluZGV4T2YocGFkZGluZ0NoYXIpO1xuXHQgICAgICAgICAgICAgICAgaWYgKHBhZGRpbmdJbmRleCAhPT0gLTEpIHtcblx0ICAgICAgICAgICAgICAgICAgICBiYXNlNjRTdHJMZW5ndGggPSBwYWRkaW5nSW5kZXg7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHJldHVybiBwYXJzZUxvb3AoYmFzZTY0U3RyLCBiYXNlNjRTdHJMZW5ndGgsIHJldmVyc2VNYXApO1xuXG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9tYXA6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSdcblx0ICAgIH07XG5cblx0ICAgIGZ1bmN0aW9uIHBhcnNlTG9vcChiYXNlNjRTdHIsIGJhc2U2NFN0ckxlbmd0aCwgcmV2ZXJzZU1hcCkge1xuXHQgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgdmFyIG5CeXRlcyA9IDA7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmFzZTY0U3RyTGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgIGlmIChpICUgNCkge1xuXHQgICAgICAgICAgICAgIHZhciBiaXRzMSA9IHJldmVyc2VNYXBbYmFzZTY0U3RyLmNoYXJDb2RlQXQoaSAtIDEpXSA8PCAoKGkgJSA0KSAqIDIpO1xuXHQgICAgICAgICAgICAgIHZhciBiaXRzMiA9IHJldmVyc2VNYXBbYmFzZTY0U3RyLmNoYXJDb2RlQXQoaSldID4+PiAoNiAtIChpICUgNCkgKiAyKTtcblx0ICAgICAgICAgICAgICB3b3Jkc1tuQnl0ZXMgPj4+IDJdIHw9IChiaXRzMSB8IGJpdHMyKSA8PCAoMjQgLSAobkJ5dGVzICUgNCkgKiA4KTtcblx0ICAgICAgICAgICAgICBuQnl0ZXMrKztcblx0ICAgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gV29yZEFycmF5LmNyZWF0ZSh3b3JkcywgbkJ5dGVzKTtcblx0ICAgIH1cblx0fSgpKTtcblxuXG5cdChmdW5jdGlvbiAoTWF0aCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIENvbnN0YW50cyB0YWJsZVxuXHQgICAgdmFyIFQgPSBbXTtcblxuXHQgICAgLy8gQ29tcHV0ZSBjb25zdGFudHNcblx0ICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA2NDsgaSsrKSB7XG5cdCAgICAgICAgICAgIFRbaV0gPSAoTWF0aC5hYnMoTWF0aC5zaW4oaSArIDEpKSAqIDB4MTAwMDAwMDAwKSB8IDA7XG5cdCAgICAgICAgfVxuXHQgICAgfSgpKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBNRDUgaGFzaCBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBNRDUgPSBDX2FsZ28uTUQ1ID0gSGFzaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdGhpcy5faGFzaCA9IG5ldyBXb3JkQXJyYXkuaW5pdChbXG5cdCAgICAgICAgICAgICAgICAweDY3NDUyMzAxLCAweGVmY2RhYjg5LFxuXHQgICAgICAgICAgICAgICAgMHg5OGJhZGNmZSwgMHgxMDMyNTQ3NlxuXHQgICAgICAgICAgICBdKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0X2kgPSBvZmZzZXQgKyBpO1xuXHQgICAgICAgICAgICAgICAgdmFyIE1fb2Zmc2V0X2kgPSBNW29mZnNldF9pXTtcblxuXHQgICAgICAgICAgICAgICAgTVtvZmZzZXRfaV0gPSAoXG5cdCAgICAgICAgICAgICAgICAgICAgKCgoTV9vZmZzZXRfaSA8PCA4KSAgfCAoTV9vZmZzZXRfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAoKChNX29mZnNldF9pIDw8IDI0KSB8IChNX29mZnNldF9pID4+PiA4KSkgICYgMHhmZjAwZmYwMClcblx0ICAgICAgICAgICAgICAgICk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIEggPSB0aGlzLl9oYXNoLndvcmRzO1xuXG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8wICA9IE1bb2Zmc2V0ICsgMF07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xICA9IE1bb2Zmc2V0ICsgMV07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8yICA9IE1bb2Zmc2V0ICsgMl07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8zICA9IE1bb2Zmc2V0ICsgM107XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF80ICA9IE1bb2Zmc2V0ICsgNF07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF81ICA9IE1bb2Zmc2V0ICsgNV07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF82ICA9IE1bb2Zmc2V0ICsgNl07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF83ICA9IE1bb2Zmc2V0ICsgN107XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF84ICA9IE1bb2Zmc2V0ICsgOF07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF85ICA9IE1bb2Zmc2V0ICsgOV07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xMCA9IE1bb2Zmc2V0ICsgMTBdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTEgPSBNW29mZnNldCArIDExXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzEyID0gTVtvZmZzZXQgKyAxMl07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xMyA9IE1bb2Zmc2V0ICsgMTNdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTQgPSBNW29mZnNldCArIDE0XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzE1ID0gTVtvZmZzZXQgKyAxNV07XG5cblx0ICAgICAgICAgICAgLy8gV29ya2luZyB2YXJpYWxiZXNcblx0ICAgICAgICAgICAgdmFyIGEgPSBIWzBdO1xuXHQgICAgICAgICAgICB2YXIgYiA9IEhbMV07XG5cdCAgICAgICAgICAgIHZhciBjID0gSFsyXTtcblx0ICAgICAgICAgICAgdmFyIGQgPSBIWzNdO1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGF0aW9uXG5cdCAgICAgICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF8wLCAgNywgIFRbMF0pO1xuXHQgICAgICAgICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfMSwgIDEyLCBUWzFdKTtcblx0ICAgICAgICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzIsICAxNywgVFsyXSk7XG5cdCAgICAgICAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBNX29mZnNldF8zLCAgMjIsIFRbM10pO1xuXHQgICAgICAgICAgICBhID0gRkYoYSwgYiwgYywgZCwgTV9vZmZzZXRfNCwgIDcsICBUWzRdKTtcblx0ICAgICAgICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzUsICAxMiwgVFs1XSk7XG5cdCAgICAgICAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBNX29mZnNldF82LCAgMTcsIFRbNl0pO1xuXHQgICAgICAgICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfNywgIDIyLCBUWzddKTtcblx0ICAgICAgICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzgsICA3LCAgVFs4XSk7XG5cdCAgICAgICAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBNX29mZnNldF85LCAgMTIsIFRbOV0pO1xuXHQgICAgICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTAsIDE3LCBUWzEwXSk7XG5cdCAgICAgICAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBNX29mZnNldF8xMSwgMjIsIFRbMTFdKTtcblx0ICAgICAgICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEyLCA3LCAgVFsxMl0pO1xuXHQgICAgICAgICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTMsIDEyLCBUWzEzXSk7XG5cdCAgICAgICAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBNX29mZnNldF8xNCwgMTcsIFRbMTRdKTtcblx0ICAgICAgICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzE1LCAyMiwgVFsxNV0pO1xuXG5cdCAgICAgICAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBNX29mZnNldF8xLCAgNSwgIFRbMTZdKTtcblx0ICAgICAgICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzYsICA5LCAgVFsxN10pO1xuXHQgICAgICAgICAgICBjID0gR0coYywgZCwgYSwgYiwgTV9vZmZzZXRfMTEsIDE0LCBUWzE4XSk7XG5cdCAgICAgICAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBNX29mZnNldF8wLCAgMjAsIFRbMTldKTtcblx0ICAgICAgICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzUsICA1LCAgVFsyMF0pO1xuXHQgICAgICAgICAgICBkID0gR0coZCwgYSwgYiwgYywgTV9vZmZzZXRfMTAsIDksICBUWzIxXSk7XG5cdCAgICAgICAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBNX29mZnNldF8xNSwgMTQsIFRbMjJdKTtcblx0ICAgICAgICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzQsICAyMCwgVFsyM10pO1xuXHQgICAgICAgICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfOSwgIDUsICBUWzI0XSk7XG5cdCAgICAgICAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF8xNCwgOSwgIFRbMjVdKTtcblx0ICAgICAgICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzMsICAxNCwgVFsyNl0pO1xuXHQgICAgICAgICAgICBiID0gR0coYiwgYywgZCwgYSwgTV9vZmZzZXRfOCwgIDIwLCBUWzI3XSk7XG5cdCAgICAgICAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBNX29mZnNldF8xMywgNSwgIFRbMjhdKTtcblx0ICAgICAgICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzIsICA5LCAgVFsyOV0pO1xuXHQgICAgICAgICAgICBjID0gR0coYywgZCwgYSwgYiwgTV9vZmZzZXRfNywgIDE0LCBUWzMwXSk7XG5cdCAgICAgICAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBNX29mZnNldF8xMiwgMjAsIFRbMzFdKTtcblxuXHQgICAgICAgICAgICBhID0gSEgoYSwgYiwgYywgZCwgTV9vZmZzZXRfNSwgIDQsICBUWzMyXSk7XG5cdCAgICAgICAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBNX29mZnNldF84LCAgMTEsIFRbMzNdKTtcblx0ICAgICAgICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzExLCAxNiwgVFszNF0pO1xuXHQgICAgICAgICAgICBiID0gSEgoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTQsIDIzLCBUWzM1XSk7XG5cdCAgICAgICAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBNX29mZnNldF8xLCAgNCwgIFRbMzZdKTtcblx0ICAgICAgICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzQsICAxMSwgVFszN10pO1xuXHQgICAgICAgICAgICBjID0gSEgoYywgZCwgYSwgYiwgTV9vZmZzZXRfNywgIDE2LCBUWzM4XSk7XG5cdCAgICAgICAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBNX29mZnNldF8xMCwgMjMsIFRbMzldKTtcblx0ICAgICAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEzLCA0LCAgVFs0MF0pO1xuXHQgICAgICAgICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfMCwgIDExLCBUWzQxXSk7XG5cdCAgICAgICAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF8zLCAgMTYsIFRbNDJdKTtcblx0ICAgICAgICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzYsICAyMywgVFs0M10pO1xuXHQgICAgICAgICAgICBhID0gSEgoYSwgYiwgYywgZCwgTV9vZmZzZXRfOSwgIDQsICBUWzQ0XSk7XG5cdCAgICAgICAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBNX29mZnNldF8xMiwgMTEsIFRbNDVdKTtcblx0ICAgICAgICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzE1LCAxNiwgVFs0Nl0pO1xuXHQgICAgICAgICAgICBiID0gSEgoYiwgYywgZCwgYSwgTV9vZmZzZXRfMiwgIDIzLCBUWzQ3XSk7XG5cblx0ICAgICAgICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzAsICA2LCAgVFs0OF0pO1xuXHQgICAgICAgICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfNywgIDEwLCBUWzQ5XSk7XG5cdCAgICAgICAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBNX29mZnNldF8xNCwgMTUsIFRbNTBdKTtcblx0ICAgICAgICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzUsICAyMSwgVFs1MV0pO1xuXHQgICAgICAgICAgICBhID0gSUkoYSwgYiwgYywgZCwgTV9vZmZzZXRfMTIsIDYsICBUWzUyXSk7XG5cdCAgICAgICAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBNX29mZnNldF8zLCAgMTAsIFRbNTNdKTtcblx0ICAgICAgICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzEwLCAxNSwgVFs1NF0pO1xuXHQgICAgICAgICAgICBiID0gSUkoYiwgYywgZCwgYSwgTV9vZmZzZXRfMSwgIDIxLCBUWzU1XSk7XG5cdCAgICAgICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF84LCAgNiwgIFRbNTZdKTtcblx0ICAgICAgICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzE1LCAxMCwgVFs1N10pO1xuXHQgICAgICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfNiwgIDE1LCBUWzU4XSk7XG5cdCAgICAgICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF8xMywgMjEsIFRbNTldKTtcblx0ICAgICAgICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzQsICA2LCAgVFs2MF0pO1xuXHQgICAgICAgICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTEsIDEwLCBUWzYxXSk7XG5cdCAgICAgICAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBNX29mZnNldF8yLCAgMTUsIFRbNjJdKTtcblx0ICAgICAgICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzksICAyMSwgVFs2M10pO1xuXG5cdCAgICAgICAgICAgIC8vIEludGVybWVkaWF0ZSBoYXNoIHZhbHVlXG5cdCAgICAgICAgICAgIEhbMF0gPSAoSFswXSArIGEpIHwgMDtcblx0ICAgICAgICAgICAgSFsxXSA9IChIWzFdICsgYikgfCAwO1xuXHQgICAgICAgICAgICBIWzJdID0gKEhbMl0gKyBjKSB8IDA7XG5cdCAgICAgICAgICAgIEhbM10gPSAoSFszXSArIGQpIHwgMDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODtcblx0ICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4O1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpO1xuXG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsSCA9IE1hdGguZmxvb3IobkJpdHNUb3RhbCAvIDB4MTAwMDAwMDAwKTtcblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWxMID0gbkJpdHNUb3RhbDtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNV0gPSAoXG5cdCAgICAgICAgICAgICAgICAoKChuQml0c1RvdGFsSCA8PCA4KSAgfCAobkJpdHNUb3RhbEggPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAoKChuQml0c1RvdGFsSCA8PCAyNCkgfCAobkJpdHNUb3RhbEggPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9IChcblx0ICAgICAgICAgICAgICAgICgoKG5CaXRzVG90YWxMIDw8IDgpICB8IChuQml0c1RvdGFsTCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICgoKG5CaXRzVG90YWxMIDw8IDI0KSB8IChuQml0c1RvdGFsTCA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICk7XG5cblx0ICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyA9IChkYXRhV29yZHMubGVuZ3RoICsgMSkgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIEhhc2ggZmluYWwgYmxvY2tzXG5cdCAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MoKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoO1xuXHQgICAgICAgICAgICB2YXIgSCA9IGhhc2gud29yZHM7XG5cblx0ICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgICAgICB2YXIgSF9pID0gSFtpXTtcblxuXHQgICAgICAgICAgICAgICAgSFtpXSA9ICgoKEhfaSA8PCA4KSAgfCAoSF9pID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICAgICgoKEhfaSA8PCAyNCkgfCAoSF9pID4+PiA4KSkgICYgMHhmZjAwZmYwMCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaFxuXHQgICAgICAgICAgICByZXR1cm4gaGFzaDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGNsb25lLl9oYXNoID0gdGhpcy5faGFzaC5jbG9uZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgZnVuY3Rpb24gRkYoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuXHQgICAgICAgIHZhciBuID0gYSArICgoYiAmIGMpIHwgKH5iICYgZCkpICsgeCArIHQ7XG5cdCAgICAgICAgcmV0dXJuICgobiA8PCBzKSB8IChuID4+PiAoMzIgLSBzKSkpICsgYjtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gR0coYSwgYiwgYywgZCwgeCwgcywgdCkge1xuXHQgICAgICAgIHZhciBuID0gYSArICgoYiAmIGQpIHwgKGMgJiB+ZCkpICsgeCArIHQ7XG5cdCAgICAgICAgcmV0dXJuICgobiA8PCBzKSB8IChuID4+PiAoMzIgLSBzKSkpICsgYjtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gSEgoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuXHQgICAgICAgIHZhciBuID0gYSArIChiIF4gYyBeIGQpICsgeCArIHQ7XG5cdCAgICAgICAgcmV0dXJuICgobiA8PCBzKSB8IChuID4+PiAoMzIgLSBzKSkpICsgYjtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gSUkoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuXHQgICAgICAgIHZhciBuID0gYSArIChjIF4gKGIgfCB+ZCkpICsgeCArIHQ7XG5cdCAgICAgICAgcmV0dXJuICgobiA8PCBzKSB8IChuID4+PiAoMzIgLSBzKSkpICsgYjtcblx0ICAgIH1cblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLk1ENSgnbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuTUQ1KHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuTUQ1ID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoTUQ1KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNNRDUobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjTUQ1ID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKE1ENSk7XG5cdH0oTWF0aCkpO1xuXG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBSZXVzYWJsZSBvYmplY3Rcblx0ICAgIHZhciBXID0gW107XG5cblx0ICAgIC8qKlxuXHQgICAgICogU0hBLTEgaGFzaCBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBTSEExID0gQ19hbGdvLlNIQTEgPSBIYXNoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFdvcmRBcnJheS5pbml0KFtcblx0ICAgICAgICAgICAgICAgIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksXG5cdCAgICAgICAgICAgICAgICAweDk4YmFkY2ZlLCAweDEwMzI1NDc2LFxuXHQgICAgICAgICAgICAgICAgMHhjM2QyZTFmMFxuXHQgICAgICAgICAgICBdKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBXb3JraW5nIHZhcmlhYmxlc1xuXHQgICAgICAgICAgICB2YXIgYSA9IEhbMF07XG5cdCAgICAgICAgICAgIHZhciBiID0gSFsxXTtcblx0ICAgICAgICAgICAgdmFyIGMgPSBIWzJdO1xuXHQgICAgICAgICAgICB2YXIgZCA9IEhbM107XG5cdCAgICAgICAgICAgIHZhciBlID0gSFs0XTtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRhdGlvblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIGlmIChpIDwgMTYpIHtcblx0ICAgICAgICAgICAgICAgICAgICBXW2ldID0gTVtvZmZzZXQgKyBpXSB8IDA7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBuID0gV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XTtcblx0ICAgICAgICAgICAgICAgICAgICBXW2ldID0gKG4gPDwgMSkgfCAobiA+Pj4gMzEpO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICB2YXIgdCA9ICgoYSA8PCA1KSB8IChhID4+PiAyNykpICsgZSArIFdbaV07XG5cdCAgICAgICAgICAgICAgICBpZiAoaSA8IDIwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdCArPSAoKGIgJiBjKSB8ICh+YiAmIGQpKSArIDB4NWE4Mjc5OTk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPCA0MCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHQgKz0gKGIgXiBjIF4gZCkgKyAweDZlZDllYmExO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpIDwgNjApIHtcblx0ICAgICAgICAgICAgICAgICAgICB0ICs9ICgoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZCkpIC0gMHg3MGU0NDMyNDtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSAvKiBpZiAoaSA8IDgwKSAqLyB7XG5cdCAgICAgICAgICAgICAgICAgICAgdCArPSAoYiBeIGMgXiBkKSAtIDB4MzU5ZDNlMmE7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGUgPSBkO1xuXHQgICAgICAgICAgICAgICAgZCA9IGM7XG5cdCAgICAgICAgICAgICAgICBjID0gKGIgPDwgMzApIHwgKGIgPj4+IDIpO1xuXHQgICAgICAgICAgICAgICAgYiA9IGE7XG5cdCAgICAgICAgICAgICAgICBhID0gdDtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEludGVybWVkaWF0ZSBoYXNoIHZhbHVlXG5cdCAgICAgICAgICAgIEhbMF0gPSAoSFswXSArIGEpIHwgMDtcblx0ICAgICAgICAgICAgSFsxXSA9IChIWzFdICsgYikgfCAwO1xuXHQgICAgICAgICAgICBIWzJdID0gKEhbMl0gKyBjKSB8IDA7XG5cdCAgICAgICAgICAgIEhbM10gPSAoSFszXSArIGQpIHwgMDtcblx0ICAgICAgICAgICAgSFs0XSA9IChIWzRdICsgZSkgfCAwO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4O1xuXHQgICAgICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gTWF0aC5mbG9vcihuQml0c1RvdGFsIC8gMHgxMDAwMDAwMDApO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE1XSA9IG5CaXRzVG90YWw7XG5cdCAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSBkYXRhV29yZHMubGVuZ3RoICogNDtcblxuXHQgICAgICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2hcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhc2g7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEhhc2hlci5jbG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICBjbG9uZS5faGFzaCA9IHRoaXMuX2hhc2guY2xvbmUoKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEExKCdtZXNzYWdlJyk7XG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEExKHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuU0hBMSA9IEhhc2hlci5fY3JlYXRlSGVscGVyKFNIQTEpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTEobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjU0hBMSA9IEhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihTSEExKTtcblx0fSgpKTtcblxuXG5cdChmdW5jdGlvbiAoTWF0aCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIEluaXRpYWxpemF0aW9uIGFuZCByb3VuZCBjb25zdGFudHMgdGFibGVzXG5cdCAgICB2YXIgSCA9IFtdO1xuXHQgICAgdmFyIEsgPSBbXTtcblxuXHQgICAgLy8gQ29tcHV0ZSBjb25zdGFudHNcblx0ICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgZnVuY3Rpb24gaXNQcmltZShuKSB7XG5cdCAgICAgICAgICAgIHZhciBzcXJ0TiA9IE1hdGguc3FydChuKTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgZmFjdG9yID0gMjsgZmFjdG9yIDw9IHNxcnROOyBmYWN0b3IrKykge1xuXHQgICAgICAgICAgICAgICAgaWYgKCEobiAlIGZhY3RvcikpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBmdW5jdGlvbiBnZXRGcmFjdGlvbmFsQml0cyhuKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAoKG4gLSAobiB8IDApKSAqIDB4MTAwMDAwMDAwKSB8IDA7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdmFyIG4gPSAyO1xuXHQgICAgICAgIHZhciBuUHJpbWUgPSAwO1xuXHQgICAgICAgIHdoaWxlIChuUHJpbWUgPCA2NCkge1xuXHQgICAgICAgICAgICBpZiAoaXNQcmltZShuKSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKG5QcmltZSA8IDgpIHtcblx0ICAgICAgICAgICAgICAgICAgICBIW25QcmltZV0gPSBnZXRGcmFjdGlvbmFsQml0cyhNYXRoLnBvdyhuLCAxIC8gMikpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgS1tuUHJpbWVdID0gZ2V0RnJhY3Rpb25hbEJpdHMoTWF0aC5wb3cobiwgMSAvIDMpKTtcblxuXHQgICAgICAgICAgICAgICAgblByaW1lKys7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBuKys7XG5cdCAgICAgICAgfVxuXHQgICAgfSgpKTtcblxuXHQgICAgLy8gUmV1c2FibGUgb2JqZWN0XG5cdCAgICB2YXIgVyA9IFtdO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNIQS0yNTYgaGFzaCBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBTSEEyNTYgPSBDX2FsZ28uU0hBMjU2ID0gSGFzaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdGhpcy5faGFzaCA9IG5ldyBXb3JkQXJyYXkuaW5pdChILnNsaWNlKDApKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBXb3JraW5nIHZhcmlhYmxlc1xuXHQgICAgICAgICAgICB2YXIgYSA9IEhbMF07XG5cdCAgICAgICAgICAgIHZhciBiID0gSFsxXTtcblx0ICAgICAgICAgICAgdmFyIGMgPSBIWzJdO1xuXHQgICAgICAgICAgICB2YXIgZCA9IEhbM107XG5cdCAgICAgICAgICAgIHZhciBlID0gSFs0XTtcblx0ICAgICAgICAgICAgdmFyIGYgPSBIWzVdO1xuXHQgICAgICAgICAgICB2YXIgZyA9IEhbNl07XG5cdCAgICAgICAgICAgIHZhciBoID0gSFs3XTtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRhdGlvblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDY0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIGlmIChpIDwgMTYpIHtcblx0ICAgICAgICAgICAgICAgICAgICBXW2ldID0gTVtvZmZzZXQgKyBpXSB8IDA7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTB4ID0gV1tpIC0gMTVdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTAgID0gKChnYW1tYTB4IDw8IDI1KSB8IChnYW1tYTB4ID4+PiA3KSkgIF5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoZ2FtbWEweCA8PCAxNCkgfCAoZ2FtbWEweCA+Pj4gMTgpKSBeXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGdhbW1hMHggPj4+IDMpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMXggPSBXW2kgLSAyXTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWExICA9ICgoZ2FtbWExeCA8PCAxNSkgfCAoZ2FtbWExeCA+Pj4gMTcpKSBeXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGdhbW1hMXggPDwgMTMpIHwgKGdhbW1hMXggPj4+IDE5KSkgXlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChnYW1tYTF4ID4+PiAxMCk7XG5cblx0ICAgICAgICAgICAgICAgICAgICBXW2ldID0gZ2FtbWEwICsgV1tpIC0gN10gKyBnYW1tYTEgKyBXW2kgLSAxNl07XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIHZhciBjaCAgPSAoZSAmIGYpIF4gKH5lICYgZyk7XG5cdCAgICAgICAgICAgICAgICB2YXIgbWFqID0gKGEgJiBiKSBeIChhICYgYykgXiAoYiAmIGMpO1xuXG5cdCAgICAgICAgICAgICAgICB2YXIgc2lnbWEwID0gKChhIDw8IDMwKSB8IChhID4+PiAyKSkgXiAoKGEgPDwgMTkpIHwgKGEgPj4+IDEzKSkgXiAoKGEgPDwgMTApIHwgKGEgPj4+IDIyKSk7XG5cdCAgICAgICAgICAgICAgICB2YXIgc2lnbWExID0gKChlIDw8IDI2KSB8IChlID4+PiA2KSkgXiAoKGUgPDwgMjEpIHwgKGUgPj4+IDExKSkgXiAoKGUgPDwgNykgIHwgKGUgPj4+IDI1KSk7XG5cblx0ICAgICAgICAgICAgICAgIHZhciB0MSA9IGggKyBzaWdtYTEgKyBjaCArIEtbaV0gKyBXW2ldO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQyID0gc2lnbWEwICsgbWFqO1xuXG5cdCAgICAgICAgICAgICAgICBoID0gZztcblx0ICAgICAgICAgICAgICAgIGcgPSBmO1xuXHQgICAgICAgICAgICAgICAgZiA9IGU7XG5cdCAgICAgICAgICAgICAgICBlID0gKGQgKyB0MSkgfCAwO1xuXHQgICAgICAgICAgICAgICAgZCA9IGM7XG5cdCAgICAgICAgICAgICAgICBjID0gYjtcblx0ICAgICAgICAgICAgICAgIGIgPSBhO1xuXHQgICAgICAgICAgICAgICAgYSA9ICh0MSArIHQyKSB8IDA7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZVxuXHQgICAgICAgICAgICBIWzBdID0gKEhbMF0gKyBhKSB8IDA7XG5cdCAgICAgICAgICAgIEhbMV0gPSAoSFsxXSArIGIpIHwgMDtcblx0ICAgICAgICAgICAgSFsyXSA9IChIWzJdICsgYykgfCAwO1xuXHQgICAgICAgICAgICBIWzNdID0gKEhbM10gKyBkKSB8IDA7XG5cdCAgICAgICAgICAgIEhbNF0gPSAoSFs0XSArIGUpIHwgMDtcblx0ICAgICAgICAgICAgSFs1XSA9IChIWzVdICsgZikgfCAwO1xuXHQgICAgICAgICAgICBIWzZdID0gKEhbNl0gKyBnKSB8IDA7XG5cdCAgICAgICAgICAgIEhbN10gPSAoSFs3XSArIGgpIHwgMDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODtcblx0ICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4O1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9IE1hdGguZmxvb3IobkJpdHNUb3RhbCAvIDB4MTAwMDAwMDAwKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNV0gPSBuQml0c1RvdGFsO1xuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gZGF0YVdvcmRzLmxlbmd0aCAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMjU2KCdtZXNzYWdlJyk7XG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEyNTYod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5TSEEyNTYgPSBIYXNoZXIuX2NyZWF0ZUhlbHBlcihTSEEyNTYpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTI1NihtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNTSEEyNTYgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBMjU2KTtcblx0fShNYXRoKSk7XG5cblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIENfZW5jID0gQy5lbmM7XG5cblx0ICAgIC8qKlxuXHQgICAgICogVVRGLTE2IEJFIGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgVXRmMTZCRSA9IENfZW5jLlV0ZjE2ID0gQ19lbmMuVXRmMTZCRSA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBVVEYtMTYgQkUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVURi0xNiBCRSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB1dGYxNlN0cmluZyA9IENyeXB0b0pTLmVuYy5VdGYxNi5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHV0ZjE2Q2hhcnMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSArPSAyKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gKHdvcmRzW2kgPj4+IDJdID4+PiAoMTYgLSAoaSAlIDQpICogOCkpICYgMHhmZmZmO1xuXHQgICAgICAgICAgICAgICAgdXRmMTZDaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gdXRmMTZDaGFycy5qb2luKCcnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBVVEYtMTYgQkUgc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1dGYxNlN0ciBUaGUgVVRGLTE2IEJFIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuVXRmMTYucGFyc2UodXRmMTZTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAodXRmMTZTdHIpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIHV0ZjE2U3RyTGVuZ3RoID0gdXRmMTZTdHIubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXRmMTZTdHJMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gMV0gfD0gdXRmMTZTdHIuY2hhckNvZGVBdChpKSA8PCAoMTYgLSAoaSAlIDIpICogMTYpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIFdvcmRBcnJheS5jcmVhdGUod29yZHMsIHV0ZjE2U3RyTGVuZ3RoICogMik7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBVVEYtMTYgTEUgZW5jb2Rpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIENfZW5jLlV0ZjE2TEUgPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgVVRGLTE2IExFIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBVVEYtMTYgTEUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgdXRmMTZTdHIgPSBDcnlwdG9KUy5lbmMuVXRmMTZMRS5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHV0ZjE2Q2hhcnMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSArPSAyKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gc3dhcEVuZGlhbigod29yZHNbaSA+Pj4gMl0gPj4+ICgxNiAtIChpICUgNCkgKiA4KSkgJiAweGZmZmYpO1xuXHQgICAgICAgICAgICAgICAgdXRmMTZDaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gdXRmMTZDaGFycy5qb2luKCcnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBVVEYtMTYgTEUgc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1dGYxNlN0ciBUaGUgVVRGLTE2IExFIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuVXRmMTZMRS5wYXJzZSh1dGYxNlN0cik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uICh1dGYxNlN0cikge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgdXRmMTZTdHJMZW5ndGggPSB1dGYxNlN0ci5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1dGYxNlN0ckxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tpID4+PiAxXSB8PSBzd2FwRW5kaWFuKHV0ZjE2U3RyLmNoYXJDb2RlQXQoaSkgPDwgKDE2IC0gKGkgJSAyKSAqIDE2KSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gV29yZEFycmF5LmNyZWF0ZSh3b3JkcywgdXRmMTZTdHJMZW5ndGggKiAyKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICBmdW5jdGlvbiBzd2FwRW5kaWFuKHdvcmQpIHtcblx0ICAgICAgICByZXR1cm4gKCh3b3JkIDw8IDgpICYgMHhmZjAwZmYwMCkgfCAoKHdvcmQgPj4+IDgpICYgMHgwMGZmMDBmZik7XG5cdCAgICB9XG5cdH0oKSk7XG5cblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gQ2hlY2sgaWYgdHlwZWQgYXJyYXlzIGFyZSBzdXBwb3J0ZWRcblx0ICAgIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgIH1cblxuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXG5cdCAgICAvLyBSZWZlcmVuY2Ugb3JpZ2luYWwgaW5pdFxuXHQgICAgdmFyIHN1cGVySW5pdCA9IFdvcmRBcnJheS5pbml0O1xuXG5cdCAgICAvLyBBdWdtZW50IFdvcmRBcnJheS5pbml0IHRvIGhhbmRsZSB0eXBlZCBhcnJheXNcblx0ICAgIHZhciBzdWJJbml0ID0gV29yZEFycmF5LmluaXQgPSBmdW5jdGlvbiAodHlwZWRBcnJheSkge1xuXHQgICAgICAgIC8vIENvbnZlcnQgYnVmZmVycyB0byB1aW50OFxuXHQgICAgICAgIGlmICh0eXBlZEFycmF5IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSA9IG5ldyBVaW50OEFycmF5KHR5cGVkQXJyYXkpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIENvbnZlcnQgb3RoZXIgYXJyYXkgdmlld3MgdG8gdWludDhcblx0ICAgICAgICBpZiAoXG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBJbnQ4QXJyYXkgfHxcblx0ICAgICAgICAgICAgKHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlZEFycmF5IGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXkpIHx8XG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBJbnQxNkFycmF5IHx8XG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBVaW50MTZBcnJheSB8fFxuXHQgICAgICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgSW50MzJBcnJheSB8fFxuXHQgICAgICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgVWludDMyQXJyYXkgfHxcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSB8fFxuXHQgICAgICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgRmxvYXQ2NEFycmF5XG5cdCAgICAgICAgKSB7XG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgPSBuZXcgVWludDhBcnJheSh0eXBlZEFycmF5LmJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5LmJ5dGVMZW5ndGgpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIEhhbmRsZSBVaW50OEFycmF5XG5cdCAgICAgICAgaWYgKHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciB0eXBlZEFycmF5Qnl0ZUxlbmd0aCA9IHR5cGVkQXJyYXkuYnl0ZUxlbmd0aDtcblxuXHQgICAgICAgICAgICAvLyBFeHRyYWN0IGJ5dGVzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVkQXJyYXlCeXRlTGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW2kgPj4+IDJdIHw9IHR5cGVkQXJyYXlbaV0gPDwgKDI0IC0gKGkgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGlzIHdvcmQgYXJyYXlcblx0ICAgICAgICAgICAgc3VwZXJJbml0LmNhbGwodGhpcywgd29yZHMsIHR5cGVkQXJyYXlCeXRlTGVuZ3RoKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAvLyBFbHNlIGNhbGwgbm9ybWFsIGluaXRcblx0ICAgICAgICAgICAgc3VwZXJJbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgc3ViSW5pdC5wcm90b3R5cGUgPSBXb3JkQXJyYXk7XG5cdH0oKSk7XG5cblxuXHQvKiogQHByZXNlcnZlXG5cdChjKSAyMDEyIGJ5IEPDqWRyaWMgTWVzbmlsLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG5cdFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuXHQgICAgLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cdCAgICAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuXHRUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cdCovXG5cblx0KGZ1bmN0aW9uIChNYXRoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLy8gQ29uc3RhbnRzIHRhYmxlXG5cdCAgICB2YXIgX3psID0gV29yZEFycmF5LmNyZWF0ZShbXG5cdCAgICAgICAgMCwgIDEsICAyLCAgMywgIDQsICA1LCAgNiwgIDcsICA4LCAgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcblx0ICAgICAgICA3LCAgNCwgMTMsICAxLCAxMCwgIDYsIDE1LCAgMywgMTIsICAwLCAgOSwgIDUsICAyLCAxNCwgMTEsICA4LFxuXHQgICAgICAgIDMsIDEwLCAxNCwgIDQsICA5LCAxNSwgIDgsICAxLCAgMiwgIDcsICAwLCAgNiwgMTMsIDExLCAgNSwgMTIsXG5cdCAgICAgICAgMSwgIDksIDExLCAxMCwgIDAsICA4LCAxMiwgIDQsIDEzLCAgMywgIDcsIDE1LCAxNCwgIDUsICA2LCAgMixcblx0ICAgICAgICA0LCAgMCwgIDUsICA5LCAgNywgMTIsICAyLCAxMCwgMTQsICAxLCAgMywgIDgsIDExLCAgNiwgMTUsIDEzXSk7XG5cdCAgICB2YXIgX3pyID0gV29yZEFycmF5LmNyZWF0ZShbXG5cdCAgICAgICAgNSwgMTQsICA3LCAgMCwgIDksICAyLCAxMSwgIDQsIDEzLCAgNiwgMTUsICA4LCAgMSwgMTAsICAzLCAxMixcblx0ICAgICAgICA2LCAxMSwgIDMsICA3LCAgMCwgMTMsICA1LCAxMCwgMTQsIDE1LCAgOCwgMTIsICA0LCAgOSwgIDEsICAyLFxuXHQgICAgICAgIDE1LCAgNSwgIDEsICAzLCAgNywgMTQsICA2LCAgOSwgMTEsICA4LCAxMiwgIDIsIDEwLCAgMCwgIDQsIDEzLFxuXHQgICAgICAgIDgsICA2LCAgNCwgIDEsICAzLCAxMSwgMTUsICAwLCAgNSwgMTIsICAyLCAxMywgIDksICA3LCAxMCwgMTQsXG5cdCAgICAgICAgMTIsIDE1LCAxMCwgIDQsICAxLCAgNSwgIDgsICA3LCAgNiwgIDIsIDEzLCAxNCwgIDAsICAzLCAgOSwgMTFdKTtcblx0ICAgIHZhciBfc2wgPSBXb3JkQXJyYXkuY3JlYXRlKFtcblx0ICAgICAgICAgMTEsIDE0LCAxNSwgMTIsICA1LCAgOCwgIDcsICA5LCAxMSwgMTMsIDE0LCAxNSwgIDYsICA3LCAgOSwgIDgsXG5cdCAgICAgICAgNywgNiwgICA4LCAxMywgMTEsICA5LCAgNywgMTUsICA3LCAxMiwgMTUsICA5LCAxMSwgIDcsIDEzLCAxMixcblx0ICAgICAgICAxMSwgMTMsICA2LCAgNywgMTQsICA5LCAxMywgMTUsIDE0LCAgOCwgMTMsICA2LCAgNSwgMTIsICA3LCAgNSxcblx0ICAgICAgICAgIDExLCAxMiwgMTQsIDE1LCAxNCwgMTUsICA5LCAgOCwgIDksIDE0LCAgNSwgIDYsICA4LCAgNiwgIDUsIDEyLFxuXHQgICAgICAgIDksIDE1LCAgNSwgMTEsICA2LCAgOCwgMTMsIDEyLCAgNSwgMTIsIDEzLCAxNCwgMTEsICA4LCAgNSwgIDYgXSk7XG5cdCAgICB2YXIgX3NyID0gV29yZEFycmF5LmNyZWF0ZShbXG5cdCAgICAgICAgOCwgIDksICA5LCAxMSwgMTMsIDE1LCAxNSwgIDUsICA3LCAgNywgIDgsIDExLCAxNCwgMTQsIDEyLCAgNixcblx0ICAgICAgICA5LCAxMywgMTUsICA3LCAxMiwgIDgsICA5LCAxMSwgIDcsICA3LCAxMiwgIDcsICA2LCAxNSwgMTMsIDExLFxuXHQgICAgICAgIDksICA3LCAxNSwgMTEsICA4LCAgNiwgIDYsIDE0LCAxMiwgMTMsICA1LCAxNCwgMTMsIDEzLCAgNywgIDUsXG5cdCAgICAgICAgMTUsICA1LCAgOCwgMTEsIDE0LCAxNCwgIDYsIDE0LCAgNiwgIDksIDEyLCAgOSwgMTIsICA1LCAxNSwgIDgsXG5cdCAgICAgICAgOCwgIDUsIDEyLCAgOSwgMTIsICA1LCAxNCwgIDYsICA4LCAxMywgIDYsICA1LCAxNSwgMTMsIDExLCAxMSBdKTtcblxuXHQgICAgdmFyIF9obCA9ICBXb3JkQXJyYXkuY3JlYXRlKFsgMHgwMDAwMDAwMCwgMHg1QTgyNzk5OSwgMHg2RUQ5RUJBMSwgMHg4RjFCQkNEQywgMHhBOTUzRkQ0RV0pO1xuXHQgICAgdmFyIF9ociA9ICBXb3JkQXJyYXkuY3JlYXRlKFsgMHg1MEEyOEJFNiwgMHg1QzRERDEyNCwgMHg2RDcwM0VGMywgMHg3QTZENzZFOSwgMHgwMDAwMDAwMF0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFJJUEVNRDE2MCBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFJJUEVNRDE2MCA9IENfYWxnby5SSVBFTUQxNjAgPSBIYXNoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoICA9IFdvcmRBcnJheS5jcmVhdGUoWzB4Njc0NTIzMDEsIDB4RUZDREFCODksIDB4OThCQURDRkUsIDB4MTAzMjU0NzYsIDB4QzNEMkUxRjBdKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cblx0ICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgIHZhciBvZmZzZXRfaSA9IG9mZnNldCArIGk7XG5cdCAgICAgICAgICAgICAgICB2YXIgTV9vZmZzZXRfaSA9IE1bb2Zmc2V0X2ldO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTd2FwXG5cdCAgICAgICAgICAgICAgICBNW29mZnNldF9pXSA9IChcblx0ICAgICAgICAgICAgICAgICAgICAoKChNX29mZnNldF9pIDw8IDgpICB8IChNX29mZnNldF9pID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE1fb2Zmc2V0X2kgPDwgMjQpIHwgKE1fb2Zmc2V0X2kgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgSCAgPSB0aGlzLl9oYXNoLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgaGwgPSBfaGwud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBociA9IF9oci53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHpsID0gX3psLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgenIgPSBfenIud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzbCA9IF9zbC53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNyID0gX3NyLndvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFdvcmtpbmcgdmFyaWFibGVzXG5cdCAgICAgICAgICAgIHZhciBhbCwgYmwsIGNsLCBkbCwgZWw7XG5cdCAgICAgICAgICAgIHZhciBhciwgYnIsIGNyLCBkciwgZXI7XG5cblx0ICAgICAgICAgICAgYXIgPSBhbCA9IEhbMF07XG5cdCAgICAgICAgICAgIGJyID0gYmwgPSBIWzFdO1xuXHQgICAgICAgICAgICBjciA9IGNsID0gSFsyXTtcblx0ICAgICAgICAgICAgZHIgPSBkbCA9IEhbM107XG5cdCAgICAgICAgICAgIGVyID0gZWwgPSBIWzRdO1xuXHQgICAgICAgICAgICAvLyBDb21wdXRhdGlvblxuXHQgICAgICAgICAgICB2YXIgdDtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSArPSAxKSB7XG5cdCAgICAgICAgICAgICAgICB0ID0gKGFsICsgIE1bb2Zmc2V0K3psW2ldXSl8MDtcblx0ICAgICAgICAgICAgICAgIGlmIChpPDE2KXtcblx0XHQgICAgICAgICAgICB0ICs9ICBmMShibCxjbCxkbCkgKyBobFswXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaTwzMikge1xuXHRcdCAgICAgICAgICAgIHQgKz0gIGYyKGJsLGNsLGRsKSArIGhsWzFdO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpPDQ4KSB7XG5cdFx0ICAgICAgICAgICAgdCArPSAgZjMoYmwsY2wsZGwpICsgaGxbMl07XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGk8NjQpIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmNChibCxjbCxkbCkgKyBobFszXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7Ly8gaWYgKGk8ODApIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmNShibCxjbCxkbCkgKyBobFs0XTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHQgPSB0fDA7XG5cdCAgICAgICAgICAgICAgICB0ID0gIHJvdGwodCxzbFtpXSk7XG5cdCAgICAgICAgICAgICAgICB0ID0gKHQrZWwpfDA7XG5cdCAgICAgICAgICAgICAgICBhbCA9IGVsO1xuXHQgICAgICAgICAgICAgICAgZWwgPSBkbDtcblx0ICAgICAgICAgICAgICAgIGRsID0gcm90bChjbCwgMTApO1xuXHQgICAgICAgICAgICAgICAgY2wgPSBibDtcblx0ICAgICAgICAgICAgICAgIGJsID0gdDtcblxuXHQgICAgICAgICAgICAgICAgdCA9IChhciArIE1bb2Zmc2V0K3pyW2ldXSl8MDtcblx0ICAgICAgICAgICAgICAgIGlmIChpPDE2KXtcblx0XHQgICAgICAgICAgICB0ICs9ICBmNShicixjcixkcikgKyBoclswXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaTwzMikge1xuXHRcdCAgICAgICAgICAgIHQgKz0gIGY0KGJyLGNyLGRyKSArIGhyWzFdO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpPDQ4KSB7XG5cdFx0ICAgICAgICAgICAgdCArPSAgZjMoYnIsY3IsZHIpICsgaHJbMl07XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGk8NjQpIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmMihicixjcixkcikgKyBoclszXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7Ly8gaWYgKGk8ODApIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmMShicixjcixkcikgKyBocls0XTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHQgPSB0fDA7XG5cdCAgICAgICAgICAgICAgICB0ID0gIHJvdGwodCxzcltpXSkgO1xuXHQgICAgICAgICAgICAgICAgdCA9ICh0K2VyKXwwO1xuXHQgICAgICAgICAgICAgICAgYXIgPSBlcjtcblx0ICAgICAgICAgICAgICAgIGVyID0gZHI7XG5cdCAgICAgICAgICAgICAgICBkciA9IHJvdGwoY3IsIDEwKTtcblx0ICAgICAgICAgICAgICAgIGNyID0gYnI7XG5cdCAgICAgICAgICAgICAgICBiciA9IHQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWVcblx0ICAgICAgICAgICAgdCAgICA9IChIWzFdICsgY2wgKyBkcil8MDtcblx0ICAgICAgICAgICAgSFsxXSA9IChIWzJdICsgZGwgKyBlcil8MDtcblx0ICAgICAgICAgICAgSFsyXSA9IChIWzNdICsgZWwgKyBhcil8MDtcblx0ICAgICAgICAgICAgSFszXSA9IChIWzRdICsgYWwgKyBicil8MDtcblx0ICAgICAgICAgICAgSFs0XSA9IChIWzBdICsgYmwgKyBjcil8MDtcblx0ICAgICAgICAgICAgSFswXSA9ICB0O1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4O1xuXHQgICAgICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gKFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbCA8PCA4KSAgfCAobkJpdHNUb3RhbCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICgoKG5CaXRzVG90YWwgPDwgMjQpIHwgKG5CaXRzVG90YWwgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gKGRhdGFXb3Jkcy5sZW5ndGggKyAxKSAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IHRoaXMuX2hhc2g7XG5cdCAgICAgICAgICAgIHZhciBIID0gaGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDU7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgICAgIHZhciBIX2kgPSBIW2ldO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTd2FwXG5cdCAgICAgICAgICAgICAgICBIW2ldID0gKCgoSF9pIDw8IDgpICB8IChIX2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgICAgKCgoSF9pIDw8IDI0KSB8IChIX2kgPj4+IDgpKSAgJiAweGZmMDBmZjAwKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cblx0ICAgIGZ1bmN0aW9uIGYxKHgsIHksIHopIHtcblx0ICAgICAgICByZXR1cm4gKCh4KSBeICh5KSBeICh6KSk7XG5cblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gZjIoeCwgeSwgeikge1xuXHQgICAgICAgIHJldHVybiAoKCh4KSYoeSkpIHwgKCh+eCkmKHopKSk7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGYzKHgsIHksIHopIHtcblx0ICAgICAgICByZXR1cm4gKCgoeCkgfCAofih5KSkpIF4gKHopKTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gZjQoeCwgeSwgeikge1xuXHQgICAgICAgIHJldHVybiAoKCh4KSAmICh6KSkgfCAoKHkpJih+KHopKSkpO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBmNSh4LCB5LCB6KSB7XG5cdCAgICAgICAgcmV0dXJuICgoeCkgXiAoKHkpIHwofih6KSkpKTtcblxuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiByb3RsKHgsbikge1xuXHQgICAgICAgIHJldHVybiAoeDw8bikgfCAoeD4+PigzMi1uKSk7XG5cdCAgICB9XG5cblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlJJUEVNRDE2MCgnbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuUklQRU1EMTYwKHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuUklQRU1EMTYwID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoUklQRU1EMTYwKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNSSVBFTUQxNjAobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjUklQRU1EMTYwID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFJJUEVNRDE2MCk7XG5cdH0oTWF0aCkpO1xuXG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlO1xuXHQgICAgdmFyIENfZW5jID0gQy5lbmM7XG5cdCAgICB2YXIgVXRmOCA9IENfZW5jLlV0Zjg7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEhNQUMgYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgSE1BQyA9IENfYWxnby5ITUFDID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBITUFDLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtIYXNoZXJ9IGhhc2hlciBUaGUgaGFzaCBhbGdvcml0aG0gdG8gdXNlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgaG1hY0hhc2hlciA9IENyeXB0b0pTLmFsZ28uSE1BQy5jcmVhdGUoQ3J5cHRvSlMuYWxnby5TSEEyNTYsIGtleSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKGhhc2hlciwga2V5KSB7XG5cdCAgICAgICAgICAgIC8vIEluaXQgaGFzaGVyXG5cdCAgICAgICAgICAgIGhhc2hlciA9IHRoaXMuX2hhc2hlciA9IG5ldyBoYXNoZXIuaW5pdCgpO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIFdvcmRBcnJheSwgZWxzZSBhc3N1bWUgV29yZEFycmF5IGFscmVhZHlcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgICAgICAgIGtleSA9IFV0ZjgucGFyc2Uoa2V5KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgaGFzaGVyQmxvY2tTaXplID0gaGFzaGVyLmJsb2NrU2l6ZTtcblx0ICAgICAgICAgICAgdmFyIGhhc2hlckJsb2NrU2l6ZUJ5dGVzID0gaGFzaGVyQmxvY2tTaXplICogNDtcblxuXHQgICAgICAgICAgICAvLyBBbGxvdyBhcmJpdHJhcnkgbGVuZ3RoIGtleXNcblx0ICAgICAgICAgICAgaWYgKGtleS5zaWdCeXRlcyA+IGhhc2hlckJsb2NrU2l6ZUJ5dGVzKSB7XG5cdCAgICAgICAgICAgICAgICBrZXkgPSBoYXNoZXIuZmluYWxpemUoa2V5KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIENsYW1wIGV4Y2VzcyBiaXRzXG5cdCAgICAgICAgICAgIGtleS5jbGFtcCgpO1xuXG5cdCAgICAgICAgICAgIC8vIENsb25lIGtleSBmb3IgaW5uZXIgYW5kIG91dGVyIHBhZHNcblx0ICAgICAgICAgICAgdmFyIG9LZXkgPSB0aGlzLl9vS2V5ID0ga2V5LmNsb25lKCk7XG5cdCAgICAgICAgICAgIHZhciBpS2V5ID0gdGhpcy5faUtleSA9IGtleS5jbG9uZSgpO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgb0tleVdvcmRzID0gb0tleS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGlLZXlXb3JkcyA9IGlLZXkud29yZHM7XG5cblx0ICAgICAgICAgICAgLy8gWE9SIGtleXMgd2l0aCBwYWQgY29uc3RhbnRzXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFzaGVyQmxvY2tTaXplOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIG9LZXlXb3Jkc1tpXSBePSAweDVjNWM1YzVjO1xuXHQgICAgICAgICAgICAgICAgaUtleVdvcmRzW2ldIF49IDB4MzYzNjM2MzY7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgb0tleS5zaWdCeXRlcyA9IGlLZXkuc2lnQnl0ZXMgPSBoYXNoZXJCbG9ja1NpemVCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBTZXQgaW5pdGlhbCB2YWx1ZXNcblx0ICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSZXNldHMgdGhpcyBITUFDIHRvIGl0cyBpbml0aWFsIHN0YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBobWFjSGFzaGVyLnJlc2V0KCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGhhc2hlciA9IHRoaXMuX2hhc2hlcjtcblxuXHQgICAgICAgICAgICAvLyBSZXNldFxuXHQgICAgICAgICAgICBoYXNoZXIucmVzZXQoKTtcblx0ICAgICAgICAgICAgaGFzaGVyLnVwZGF0ZSh0aGlzLl9pS2V5KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogVXBkYXRlcyB0aGlzIEhNQUMgd2l0aCBhIG1lc3NhZ2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgVGhlIG1lc3NhZ2UgdG8gYXBwZW5kLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7SE1BQ30gVGhpcyBITUFDIGluc3RhbmNlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBobWFjSGFzaGVyLnVwZGF0ZSgnbWVzc2FnZScpO1xuXHQgICAgICAgICAqICAgICBobWFjSGFzaGVyLnVwZGF0ZSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5faGFzaGVyLnVwZGF0ZShtZXNzYWdlVXBkYXRlKTtcblxuXHQgICAgICAgICAgICAvLyBDaGFpbmFibGVcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEZpbmFsaXplcyB0aGUgSE1BQyBjb21wdXRhdGlvbi5cblx0ICAgICAgICAgKiBOb3RlIHRoYXQgdGhlIGZpbmFsaXplIG9wZXJhdGlvbiBpcyBlZmZlY3RpdmVseSBhIGRlc3RydWN0aXZlLCByZWFkLW9uY2Ugb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlVXBkYXRlIChPcHRpb25hbCkgQSBmaW5hbCBtZXNzYWdlIHVwZGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBobWFjID0gaG1hY0hhc2hlci5maW5hbGl6ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIgaG1hYyA9IGhtYWNIYXNoZXIuZmluYWxpemUoJ21lc3NhZ2UnKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGhtYWMgPSBobWFjSGFzaGVyLmZpbmFsaXplKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZmluYWxpemU6IGZ1bmN0aW9uIChtZXNzYWdlVXBkYXRlKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBoYXNoZXIgPSB0aGlzLl9oYXNoZXI7XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBITUFDXG5cdCAgICAgICAgICAgIHZhciBpbm5lckhhc2ggPSBoYXNoZXIuZmluYWxpemUobWVzc2FnZVVwZGF0ZSk7XG5cdCAgICAgICAgICAgIGhhc2hlci5yZXNldCgpO1xuXHQgICAgICAgICAgICB2YXIgaG1hYyA9IGhhc2hlci5maW5hbGl6ZSh0aGlzLl9vS2V5LmNsb25lKCkuY29uY2F0KGlubmVySGFzaCkpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBobWFjO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHR9KCkpO1xuXG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cdCAgICB2YXIgU0hBMSA9IENfYWxnby5TSEExO1xuXHQgICAgdmFyIEhNQUMgPSBDX2FsZ28uSE1BQztcblxuXHQgICAgLyoqXG5cdCAgICAgKiBQYXNzd29yZC1CYXNlZCBLZXkgRGVyaXZhdGlvbiBGdW5jdGlvbiAyIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFBCS0RGMiA9IENfYWxnby5QQktERjIgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGtleVNpemUgVGhlIGtleSBzaXplIGluIHdvcmRzIHRvIGdlbmVyYXRlLiBEZWZhdWx0OiA0ICgxMjggYml0cylcblx0ICAgICAgICAgKiBAcHJvcGVydHkge0hhc2hlcn0gaGFzaGVyIFRoZSBoYXNoZXIgdG8gdXNlLiBEZWZhdWx0OiBTSEExXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGl0ZXJhdGlvbnMgVGhlIG51bWJlciBvZiBpdGVyYXRpb25zIHRvIHBlcmZvcm0uIERlZmF1bHQ6IDFcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjZmc6IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAgICAga2V5U2l6ZTogMTI4LzMyLFxuXHQgICAgICAgICAgICBoYXNoZXI6IFNIQTEsXG5cdCAgICAgICAgICAgIGl0ZXJhdGlvbnM6IDFcblx0ICAgICAgICB9KSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhlIGRlcml2YXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBrZGYgPSBDcnlwdG9KUy5hbGdvLlBCS0RGMi5jcmVhdGUoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uUEJLREYyLmNyZWF0ZSh7IGtleVNpemU6IDggfSk7XG5cdCAgICAgICAgICogICAgIHZhciBrZGYgPSBDcnlwdG9KUy5hbGdvLlBCS0RGMi5jcmVhdGUoeyBrZXlTaXplOiA4LCBpdGVyYXRpb25zOiAxMDAwIH0pO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjZmcpIHtcblx0ICAgICAgICAgICAgdGhpcy5jZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29tcHV0ZXMgdGhlIFBhc3N3b3JkLUJhc2VkIEtleSBEZXJpdmF0aW9uIEZ1bmN0aW9uIDIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC5cblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHNhbHQgQSBzYWx0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGVyaXZlZCBrZXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBrZXkgPSBrZGYuY29tcHV0ZShwYXNzd29yZCwgc2FsdCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY29tcHV0ZTogZnVuY3Rpb24gKHBhc3N3b3JkLCBzYWx0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBjZmcgPSB0aGlzLmNmZztcblxuXHQgICAgICAgICAgICAvLyBJbml0IEhNQUNcblx0ICAgICAgICAgICAgdmFyIGhtYWMgPSBITUFDLmNyZWF0ZShjZmcuaGFzaGVyLCBwYXNzd29yZCk7XG5cblx0ICAgICAgICAgICAgLy8gSW5pdGlhbCB2YWx1ZXNcblx0ICAgICAgICAgICAgdmFyIGRlcml2ZWRLZXkgPSBXb3JkQXJyYXkuY3JlYXRlKCk7XG5cdCAgICAgICAgICAgIHZhciBibG9ja0luZGV4ID0gV29yZEFycmF5LmNyZWF0ZShbMHgwMDAwMDAwMV0pO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgZGVyaXZlZEtleVdvcmRzID0gZGVyaXZlZEtleS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGJsb2NrSW5kZXhXb3JkcyA9IGJsb2NrSW5kZXgud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBrZXlTaXplID0gY2ZnLmtleVNpemU7XG5cdCAgICAgICAgICAgIHZhciBpdGVyYXRpb25zID0gY2ZnLml0ZXJhdGlvbnM7XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUga2V5XG5cdCAgICAgICAgICAgIHdoaWxlIChkZXJpdmVkS2V5V29yZHMubGVuZ3RoIDwga2V5U2l6ZSkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGJsb2NrID0gaG1hYy51cGRhdGUoc2FsdCkuZmluYWxpemUoYmxvY2tJbmRleCk7XG5cdCAgICAgICAgICAgICAgICBobWFjLnJlc2V0KCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIGJsb2NrV29yZHMgPSBibG9jay53b3Jkcztcblx0ICAgICAgICAgICAgICAgIHZhciBibG9ja1dvcmRzTGVuZ3RoID0gYmxvY2tXb3Jkcy5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGlvbnNcblx0ICAgICAgICAgICAgICAgIHZhciBpbnRlcm1lZGlhdGUgPSBibG9jaztcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgaXRlcmF0aW9uczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaW50ZXJtZWRpYXRlID0gaG1hYy5maW5hbGl6ZShpbnRlcm1lZGlhdGUpO1xuXHQgICAgICAgICAgICAgICAgICAgIGhtYWMucmVzZXQoKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGludGVybWVkaWF0ZVdvcmRzID0gaW50ZXJtZWRpYXRlLndvcmRzO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gWE9SIGludGVybWVkaWF0ZSB3aXRoIGJsb2NrXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBibG9ja1dvcmRzTGVuZ3RoOyBqKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tXb3Jkc1tqXSBePSBpbnRlcm1lZGlhdGVXb3Jkc1tqXTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGRlcml2ZWRLZXkuY29uY2F0KGJsb2NrKTtcblx0ICAgICAgICAgICAgICAgIGJsb2NrSW5kZXhXb3Jkc1swXSsrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGRlcml2ZWRLZXkuc2lnQnl0ZXMgPSBrZXlTaXplICogNDtcblxuXHQgICAgICAgICAgICByZXR1cm4gZGVyaXZlZEtleTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBDb21wdXRlcyB0aGUgUGFzc3dvcmQtQmFzZWQgS2V5IERlcml2YXRpb24gRnVuY3Rpb24gMi5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gc2FsdCBBIHNhbHQuXG5cdCAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgY29tcHV0YXRpb24uXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGVyaXZlZCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBrZXkgPSBDcnlwdG9KUy5QQktERjIocGFzc3dvcmQsIHNhbHQpO1xuXHQgICAgICogICAgIHZhciBrZXkgPSBDcnlwdG9KUy5QQktERjIocGFzc3dvcmQsIHNhbHQsIHsga2V5U2l6ZTogOCB9KTtcblx0ICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuUEJLREYyKHBhc3N3b3JkLCBzYWx0LCB7IGtleVNpemU6IDgsIGl0ZXJhdGlvbnM6IDEwMDAgfSk7XG5cdCAgICAgKi9cblx0ICAgIEMuUEJLREYyID0gZnVuY3Rpb24gKHBhc3N3b3JkLCBzYWx0LCBjZmcpIHtcblx0ICAgICAgICByZXR1cm4gUEJLREYyLmNyZWF0ZShjZmcpLmNvbXB1dGUocGFzc3dvcmQsIHNhbHQpO1xuXHQgICAgfTtcblx0fSgpKTtcblxuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBCYXNlID0gQ19saWIuQmFzZTtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXHQgICAgdmFyIE1ENSA9IENfYWxnby5NRDU7XG5cblx0ICAgIC8qKlxuXHQgICAgICogVGhpcyBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbiBpcyBtZWFudCB0byBjb25mb3JtIHdpdGggRVZQX0J5dGVzVG9LZXkuXG5cdCAgICAgKiB3d3cub3BlbnNzbC5vcmcvZG9jcy9jcnlwdG8vRVZQX0J5dGVzVG9LZXkuaHRtbFxuXHQgICAgICovXG5cdCAgICB2YXIgRXZwS0RGID0gQ19hbGdvLkV2cEtERiA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0ga2V5U2l6ZSBUaGUga2V5IHNpemUgaW4gd29yZHMgdG8gZ2VuZXJhdGUuIERlZmF1bHQ6IDQgKDEyOCBiaXRzKVxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2ggYWxnb3JpdGhtIHRvIHVzZS4gRGVmYXVsdDogTUQ1XG5cdCAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGl0ZXJhdGlvbnMgVGhlIG51bWJlciBvZiBpdGVyYXRpb25zIHRvIHBlcmZvcm0uIERlZmF1bHQ6IDFcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjZmc6IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAgICAga2V5U2l6ZTogMTI4LzMyLFxuXHQgICAgICAgICAgICBoYXNoZXI6IE1ENSxcblx0ICAgICAgICAgICAgaXRlcmF0aW9uczogMVxuXHQgICAgICAgIH0pLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGUgZGVyaXZhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uRXZwS0RGLmNyZWF0ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5FdnBLREYuY3JlYXRlKHsga2V5U2l6ZTogOCB9KTtcblx0ICAgICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uRXZwS0RGLmNyZWF0ZSh7IGtleVNpemU6IDgsIGl0ZXJhdGlvbnM6IDEwMDAgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKGNmZykge1xuXHQgICAgICAgICAgICB0aGlzLmNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBEZXJpdmVzIGEga2V5IGZyb20gYSBwYXNzd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gc2FsdCBBIHNhbHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBkZXJpdmVkIGtleS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGtleSA9IGtkZi5jb21wdXRlKHBhc3N3b3JkLCBzYWx0KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjb21wdXRlOiBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGNmZyA9IHRoaXMuY2ZnO1xuXG5cdCAgICAgICAgICAgIC8vIEluaXQgaGFzaGVyXG5cdCAgICAgICAgICAgIHZhciBoYXNoZXIgPSBjZmcuaGFzaGVyLmNyZWF0ZSgpO1xuXG5cdCAgICAgICAgICAgIC8vIEluaXRpYWwgdmFsdWVzXG5cdCAgICAgICAgICAgIHZhciBkZXJpdmVkS2V5ID0gV29yZEFycmF5LmNyZWF0ZSgpO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgZGVyaXZlZEtleVdvcmRzID0gZGVyaXZlZEtleS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGtleVNpemUgPSBjZmcua2V5U2l6ZTtcblx0ICAgICAgICAgICAgdmFyIGl0ZXJhdGlvbnMgPSBjZmcuaXRlcmF0aW9ucztcblxuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSBrZXlcblx0ICAgICAgICAgICAgd2hpbGUgKGRlcml2ZWRLZXlXb3Jkcy5sZW5ndGggPCBrZXlTaXplKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoYmxvY2spIHtcblx0ICAgICAgICAgICAgICAgICAgICBoYXNoZXIudXBkYXRlKGJsb2NrKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHZhciBibG9jayA9IGhhc2hlci51cGRhdGUocGFzc3dvcmQpLmZpbmFsaXplKHNhbHQpO1xuXHQgICAgICAgICAgICAgICAgaGFzaGVyLnJlc2V0KCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGlvbnNcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgaXRlcmF0aW9uczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYmxvY2sgPSBoYXNoZXIuZmluYWxpemUoYmxvY2spO1xuXHQgICAgICAgICAgICAgICAgICAgIGhhc2hlci5yZXNldCgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICBkZXJpdmVkS2V5LmNvbmNhdChibG9jayk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZGVyaXZlZEtleS5zaWdCeXRlcyA9IGtleVNpemUgKiA0O1xuXG5cdCAgICAgICAgICAgIHJldHVybiBkZXJpdmVkS2V5O1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIERlcml2ZXMgYSBrZXkgZnJvbSBhIHBhc3N3b3JkLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBzYWx0IEEgc2FsdC5cblx0ICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBjb21wdXRhdGlvbi5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBkZXJpdmVkIGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGtleSA9IENyeXB0b0pTLkV2cEtERihwYXNzd29yZCwgc2FsdCk7XG5cdCAgICAgKiAgICAgdmFyIGtleSA9IENyeXB0b0pTLkV2cEtERihwYXNzd29yZCwgc2FsdCwgeyBrZXlTaXplOiA4IH0pO1xuXHQgICAgICogICAgIHZhciBrZXkgPSBDcnlwdG9KUy5FdnBLREYocGFzc3dvcmQsIHNhbHQsIHsga2V5U2l6ZTogOCwgaXRlcmF0aW9uczogMTAwMCB9KTtcblx0ICAgICAqL1xuXHQgICAgQy5FdnBLREYgPSBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQsIGNmZykge1xuXHQgICAgICAgIHJldHVybiBFdnBLREYuY3JlYXRlKGNmZykuY29tcHV0ZShwYXNzd29yZCwgc2FsdCk7XG5cdCAgICB9O1xuXHR9KCkpO1xuXG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cdCAgICB2YXIgU0hBMjU2ID0gQ19hbGdvLlNIQTI1NjtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTSEEtMjI0IGhhc2ggYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgU0hBMjI0ID0gQ19hbGdvLlNIQTIyNCA9IFNIQTI1Ni5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgV29yZEFycmF5LmluaXQoW1xuXHQgICAgICAgICAgICAgICAgMHhjMTA1OWVkOCwgMHgzNjdjZDUwNywgMHgzMDcwZGQxNywgMHhmNzBlNTkzOSxcblx0ICAgICAgICAgICAgICAgIDB4ZmZjMDBiMzEsIDB4Njg1ODE1MTEsIDB4NjRmOThmYTcsIDB4YmVmYTRmYTRcblx0ICAgICAgICAgICAgXSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBoYXNoID0gU0hBMjU2Ll9kb0ZpbmFsaXplLmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgaGFzaC5zaWdCeXRlcyAtPSA0O1xuXG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMjI0KCdtZXNzYWdlJyk7XG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEyMjQod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5TSEEyMjQgPSBTSEEyNTYuX2NyZWF0ZUhlbHBlcihTSEEyMjQpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTIyNChtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNTSEEyMjQgPSBTSEEyNTYuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBMjI0KTtcblx0fSgpKTtcblxuXG5cdChmdW5jdGlvbiAodW5kZWZpbmVkKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBCYXNlID0gQ19saWIuQmFzZTtcblx0ICAgIHZhciBYMzJXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogeDY0IG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfeDY0ID0gQy54NjQgPSB7fTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBIDY0LWJpdCB3b3JkLlxuXHQgICAgICovXG5cdCAgICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmQgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIDY0LWJpdCB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGhpZ2ggVGhlIGhpZ2ggMzIgYml0cy5cblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93IFRoZSBsb3cgMzIgYml0cy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHg2NFdvcmQgPSBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgwMDAxMDIwMywgMHgwNDA1MDYwNyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKGhpZ2gsIGxvdykge1xuXHQgICAgICAgICAgICB0aGlzLmhpZ2ggPSBoaWdoO1xuXHQgICAgICAgICAgICB0aGlzLmxvdyA9IGxvdztcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBCaXR3aXNlIE5PVHMgdGhpcyB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIG5lZ2F0aW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgbmVnYXRlZCA9IHg2NFdvcmQubm90KCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgLy8gbm90OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIHZhciBoaWdoID0gfnRoaXMuaGlnaDtcblx0ICAgICAgICAgICAgLy8gdmFyIGxvdyA9IH50aGlzLmxvdztcblxuXHQgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQml0d2lzZSBBTkRzIHRoaXMgd29yZCB3aXRoIHRoZSBwYXNzZWQgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7WDY0V29yZH0gd29yZCBUaGUgeDY0LVdvcmQgdG8gQU5EIHdpdGggdGhpcyB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIEFORGluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGFuZGVkID0geDY0V29yZC5hbmQoYW5vdGhlclg2NFdvcmQpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIGFuZDogZnVuY3Rpb24gKHdvcmQpIHtcblx0ICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSB0aGlzLmhpZ2ggJiB3b3JkLmhpZ2g7XG5cdCAgICAgICAgICAgIC8vIHZhciBsb3cgPSB0aGlzLmxvdyAmIHdvcmQubG93O1xuXG5cdCAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBCaXR3aXNlIE9ScyB0aGlzIHdvcmQgd2l0aCB0aGUgcGFzc2VkIHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIE9SIHdpdGggdGhpcyB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIE9SaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgb3JlZCA9IHg2NFdvcmQub3IoYW5vdGhlclg2NFdvcmQpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIG9yOiBmdW5jdGlvbiAod29yZCkge1xuXHQgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IHRoaXMuaGlnaCB8IHdvcmQuaGlnaDtcblx0ICAgICAgICAgICAgLy8gdmFyIGxvdyA9IHRoaXMubG93IHwgd29yZC5sb3c7XG5cblx0ICAgICAgICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7XG5cdCAgICAgICAgLy8gfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEJpdHdpc2UgWE9ScyB0aGlzIHdvcmQgd2l0aCB0aGUgcGFzc2VkIHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIFhPUiB3aXRoIHRoaXMgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBYT1JpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB4b3JlZCA9IHg2NFdvcmQueG9yKGFub3RoZXJYNjRXb3JkKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICAvLyB4b3I6IGZ1bmN0aW9uICh3b3JkKSB7XG5cdCAgICAgICAgICAgIC8vIHZhciBoaWdoID0gdGhpcy5oaWdoIF4gd29yZC5oaWdoO1xuXHQgICAgICAgICAgICAvLyB2YXIgbG93ID0gdGhpcy5sb3cgXiB3b3JkLmxvdztcblxuXHQgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogU2hpZnRzIHRoaXMgd29yZCBuIGJpdHMgdG8gdGhlIGxlZnQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGJpdHMgdG8gc2hpZnQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgc2hpZnRpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBzaGlmdGVkID0geDY0V29yZC5zaGlmdEwoMjUpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIHNoaWZ0TDogZnVuY3Rpb24gKG4pIHtcblx0ICAgICAgICAgICAgLy8gaWYgKG4gPCAzMikge1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSAodGhpcy5oaWdoIDw8IG4pIHwgKHRoaXMubG93ID4+PiAoMzIgLSBuKSk7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgbG93ID0gdGhpcy5sb3cgPDwgbjtcblx0ICAgICAgICAgICAgLy8gfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIC8vIHZhciBoaWdoID0gdGhpcy5sb3cgPDwgKG4gLSAzMik7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgbG93ID0gMDtcblx0ICAgICAgICAgICAgLy8gfVxuXG5cdCAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBTaGlmdHMgdGhpcyB3b3JkIG4gYml0cyB0byB0aGUgcmlnaHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGJpdHMgdG8gc2hpZnQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgc2hpZnRpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBzaGlmdGVkID0geDY0V29yZC5zaGlmdFIoNyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgLy8gc2hpZnRSOiBmdW5jdGlvbiAobikge1xuXHQgICAgICAgICAgICAvLyBpZiAobiA8IDMyKSB7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgbG93ID0gKHRoaXMubG93ID4+PiBuKSB8ICh0aGlzLmhpZ2ggPDwgKDMyIC0gbikpO1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSB0aGlzLmhpZ2ggPj4+IG47XG5cdCAgICAgICAgICAgIC8vIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgbG93ID0gdGhpcy5oaWdoID4+PiAobiAtIDMyKTtcblx0ICAgICAgICAgICAgICAgIC8vIHZhciBoaWdoID0gMDtcblx0ICAgICAgICAgICAgLy8gfVxuXG5cdCAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSb3RhdGVzIHRoaXMgd29yZCBuIGJpdHMgdG8gdGhlIGxlZnQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGJpdHMgdG8gcm90YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIHJvdGF0aW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgcm90YXRlZCA9IHg2NFdvcmQucm90TCgyNSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgLy8gcm90TDogZnVuY3Rpb24gKG4pIHtcblx0ICAgICAgICAgICAgLy8gcmV0dXJuIHRoaXMuc2hpZnRMKG4pLm9yKHRoaXMuc2hpZnRSKDY0IC0gbikpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSb3RhdGVzIHRoaXMgd29yZCBuIGJpdHMgdG8gdGhlIHJpZ2h0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBiaXRzIHRvIHJvdGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciByb3RhdGluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHJvdGF0ZWQgPSB4NjRXb3JkLnJvdFIoNyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgLy8gcm90UjogZnVuY3Rpb24gKG4pIHtcblx0ICAgICAgICAgICAgLy8gcmV0dXJuIHRoaXMuc2hpZnRSKG4pLm9yKHRoaXMuc2hpZnRMKDY0IC0gbikpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBBZGRzIHRoaXMgd29yZCB3aXRoIHRoZSBwYXNzZWQgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7WDY0V29yZH0gd29yZCBUaGUgeDY0LVdvcmQgdG8gYWRkIHdpdGggdGhpcyB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIGFkZGluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGFkZGVkID0geDY0V29yZC5hZGQoYW5vdGhlclg2NFdvcmQpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIGFkZDogZnVuY3Rpb24gKHdvcmQpIHtcblx0ICAgICAgICAgICAgLy8gdmFyIGxvdyA9ICh0aGlzLmxvdyArIHdvcmQubG93KSB8IDA7XG5cdCAgICAgICAgICAgIC8vIHZhciBjYXJyeSA9IChsb3cgPj4+IDApIDwgKHRoaXMubG93ID4+PiAwKSA/IDEgOiAwO1xuXHQgICAgICAgICAgICAvLyB2YXIgaGlnaCA9ICh0aGlzLmhpZ2ggKyB3b3JkLmhpZ2ggKyBjYXJyeSkgfCAwO1xuXG5cdCAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpO1xuXHQgICAgICAgIC8vIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFuIGFycmF5IG9mIDY0LWJpdCB3b3Jkcy5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge0FycmF5fSB3b3JkcyBUaGUgYXJyYXkgb2YgQ3J5cHRvSlMueDY0LldvcmQgb2JqZWN0cy5cblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaWdCeXRlcyBUaGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGJ5dGVzIGluIHRoaXMgd29yZCBhcnJheS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFg2NFdvcmRBcnJheSA9IENfeDY0LldvcmRBcnJheSA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHdvcmRzIChPcHRpb25hbCkgQW4gYXJyYXkgb2YgQ3J5cHRvSlMueDY0LldvcmQgb2JqZWN0cy5cblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gc2lnQnl0ZXMgKE9wdGlvbmFsKSBUaGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGJ5dGVzIGluIHRoZSB3b3Jkcy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLng2NC5Xb3JkQXJyYXkuY3JlYXRlKCk7XG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLng2NC5Xb3JkQXJyYXkuY3JlYXRlKFtcblx0ICAgICAgICAgKiAgICAgICAgIENyeXB0b0pTLng2NC5Xb3JkLmNyZWF0ZSgweDAwMDEwMjAzLCAweDA0MDUwNjA3KSxcblx0ICAgICAgICAgKiAgICAgICAgIENyeXB0b0pTLng2NC5Xb3JkLmNyZWF0ZSgweDE4MTkxYTFiLCAweDFjMWQxZTFmKVxuXHQgICAgICAgICAqICAgICBdKTtcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMueDY0LldvcmRBcnJheS5jcmVhdGUoW1xuXHQgICAgICAgICAqICAgICAgICAgQ3J5cHRvSlMueDY0LldvcmQuY3JlYXRlKDB4MDAwMTAyMDMsIDB4MDQwNTA2MDcpLFxuXHQgICAgICAgICAqICAgICAgICAgQ3J5cHRvSlMueDY0LldvcmQuY3JlYXRlKDB4MTgxOTFhMWIsIDB4MWMxZDFlMWYpXG5cdCAgICAgICAgICogICAgIF0sIDEwKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAod29yZHMsIHNpZ0J5dGVzKSB7XG5cdCAgICAgICAgICAgIHdvcmRzID0gdGhpcy53b3JkcyA9IHdvcmRzIHx8IFtdO1xuXG5cdCAgICAgICAgICAgIGlmIChzaWdCeXRlcyAhPSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgPSBzaWdCeXRlcztcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgPSB3b3Jkcy5sZW5ndGggKiA4O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIHRoaXMgNjQtYml0IHdvcmQgYXJyYXkgdG8gYSAzMi1iaXQgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NyeXB0b0pTLmxpYi5Xb3JkQXJyYXl9IFRoaXMgd29yZCBhcnJheSdzIGRhdGEgYXMgYSAzMi1iaXQgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHgzMldvcmRBcnJheSA9IHg2NFdvcmRBcnJheS50b1gzMigpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHRvWDMyOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgeDY0V29yZHMgPSB0aGlzLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgeDY0V29yZHNMZW5ndGggPSB4NjRXb3Jkcy5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgeDMyV29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4NjRXb3Jkc0xlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgeDY0V29yZCA9IHg2NFdvcmRzW2ldO1xuXHQgICAgICAgICAgICAgICAgeDMyV29yZHMucHVzaCh4NjRXb3JkLmhpZ2gpO1xuXHQgICAgICAgICAgICAgICAgeDMyV29yZHMucHVzaCh4NjRXb3JkLmxvdyk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gWDMyV29yZEFycmF5LmNyZWF0ZSh4MzJXb3JkcywgdGhpcy5zaWdCeXRlcyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmRBcnJheX0gVGhlIGNsb25lLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2xvbmUgPSB4NjRXb3JkQXJyYXkuY2xvbmUoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBCYXNlLmNsb25lLmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgLy8gQ2xvbmUgXCJ3b3Jkc1wiIGFycmF5XG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IGNsb25lLndvcmRzID0gdGhpcy53b3Jkcy5zbGljZSgwKTtcblxuXHQgICAgICAgICAgICAvLyBDbG9uZSBlYWNoIFg2NFdvcmQgb2JqZWN0XG5cdCAgICAgICAgICAgIHZhciB3b3Jkc0xlbmd0aCA9IHdvcmRzLmxlbmd0aDtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3b3Jkc0xlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tpXSA9IHdvcmRzW2ldLmNsb25lKCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdH0oKSk7XG5cblxuXHQoZnVuY3Rpb24gKE1hdGgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXI7XG5cdCAgICB2YXIgQ194NjQgPSBDLng2NDtcblx0ICAgIHZhciBYNjRXb3JkID0gQ194NjQuV29yZDtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIENvbnN0YW50cyB0YWJsZXNcblx0ICAgIHZhciBSSE9fT0ZGU0VUUyA9IFtdO1xuXHQgICAgdmFyIFBJX0lOREVYRVMgID0gW107XG5cdCAgICB2YXIgUk9VTkRfQ09OU1RBTlRTID0gW107XG5cblx0ICAgIC8vIENvbXB1dGUgQ29uc3RhbnRzXG5cdCAgICAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIC8vIENvbXB1dGUgcmhvIG9mZnNldCBjb25zdGFudHNcblx0ICAgICAgICB2YXIgeCA9IDEsIHkgPSAwO1xuXHQgICAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgMjQ7IHQrKykge1xuXHQgICAgICAgICAgICBSSE9fT0ZGU0VUU1t4ICsgNSAqIHldID0gKCh0ICsgMSkgKiAodCArIDIpIC8gMikgJSA2NDtcblxuXHQgICAgICAgICAgICB2YXIgbmV3WCA9IHkgJSA1O1xuXHQgICAgICAgICAgICB2YXIgbmV3WSA9ICgyICogeCArIDMgKiB5KSAlIDU7XG5cdCAgICAgICAgICAgIHggPSBuZXdYO1xuXHQgICAgICAgICAgICB5ID0gbmV3WTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBDb21wdXRlIHBpIGluZGV4IGNvbnN0YW50c1xuXHQgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgNTsgeCsrKSB7XG5cdCAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgNTsgeSsrKSB7XG5cdCAgICAgICAgICAgICAgICBQSV9JTkRFWEVTW3ggKyA1ICogeV0gPSB5ICsgKCgyICogeCArIDMgKiB5KSAlIDUpICogNTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIENvbXB1dGUgcm91bmQgY29uc3RhbnRzXG5cdCAgICAgICAgdmFyIExGU1IgPSAweDAxO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjQ7IGkrKykge1xuXHQgICAgICAgICAgICB2YXIgcm91bmRDb25zdGFudE1zdyA9IDA7XG5cdCAgICAgICAgICAgIHZhciByb3VuZENvbnN0YW50THN3ID0gMDtcblxuXHQgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDc7IGorKykge1xuXHQgICAgICAgICAgICAgICAgaWYgKExGU1IgJiAweDAxKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGJpdFBvc2l0aW9uID0gKDEgPDwgaikgLSAxO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChiaXRQb3NpdGlvbiA8IDMyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJvdW5kQ29uc3RhbnRMc3cgXj0gMSA8PCBiaXRQb3NpdGlvbjtcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2UgLyogaWYgKGJpdFBvc2l0aW9uID49IDMyKSAqLyB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJvdW5kQ29uc3RhbnRNc3cgXj0gMSA8PCAoYml0UG9zaXRpb24gLSAzMik7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBDb21wdXRlIG5leHQgTEZTUlxuXHQgICAgICAgICAgICAgICAgaWYgKExGU1IgJiAweDgwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gUHJpbWl0aXZlIHBvbHlub21pYWwgb3ZlciBHRigyKTogeF44ICsgeF42ICsgeF41ICsgeF40ICsgMVxuXHQgICAgICAgICAgICAgICAgICAgIExGU1IgPSAoTEZTUiA8PCAxKSBeIDB4NzE7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIExGU1IgPDw9IDE7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBST1VORF9DT05TVEFOVFNbaV0gPSBYNjRXb3JkLmNyZWF0ZShyb3VuZENvbnN0YW50TXN3LCByb3VuZENvbnN0YW50THN3KTtcblx0ICAgICAgICB9XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvLyBSZXVzYWJsZSBvYmplY3RzIGZvciB0ZW1wb3JhcnkgdmFsdWVzXG5cdCAgICB2YXIgVCA9IFtdO1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1OyBpKyspIHtcblx0ICAgICAgICAgICAgVFtpXSA9IFg2NFdvcmQuY3JlYXRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSgpKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTSEEtMyBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFNIQTMgPSBDX2FsZ28uU0hBMyA9IEhhc2hlci5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBvdXRwdXRMZW5ndGhcblx0ICAgICAgICAgKiAgIFRoZSBkZXNpcmVkIG51bWJlciBvZiBiaXRzIGluIHRoZSBvdXRwdXQgaGFzaC5cblx0ICAgICAgICAgKiAgIE9ubHkgdmFsdWVzIHBlcm1pdHRlZCBhcmU6IDIyNCwgMjU2LCAzODQsIDUxMi5cblx0ICAgICAgICAgKiAgIERlZmF1bHQ6IDUxMlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogSGFzaGVyLmNmZy5leHRlbmQoe1xuXHQgICAgICAgICAgICBvdXRwdXRMZW5ndGg6IDUxMlxuXHQgICAgICAgIH0pLFxuXG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGUgPSBbXVxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHN0YXRlW2ldID0gbmV3IFg2NFdvcmQuaW5pdCgpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgdGhpcy5ibG9ja1NpemUgPSAoMTYwMCAtIDIgKiB0aGlzLmNmZy5vdXRwdXRMZW5ndGgpIC8gMzI7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGU7XG5cdCAgICAgICAgICAgIHZhciBuQmxvY2tTaXplTGFuZXMgPSB0aGlzLmJsb2NrU2l6ZSAvIDI7XG5cblx0ICAgICAgICAgICAgLy8gQWJzb3JiXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbkJsb2NrU2l6ZUxhbmVzOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIE0yaSAgPSBNW29mZnNldCArIDIgKiBpXTtcblx0ICAgICAgICAgICAgICAgIHZhciBNMmkxID0gTVtvZmZzZXQgKyAyICogaSArIDFdO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICAgICAgTTJpID0gKFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE0yaSA8PCA4KSAgfCAoTTJpID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE0yaSA8PCAyNCkgfCAoTTJpID4+PiA4KSkgICYgMHhmZjAwZmYwMClcblx0ICAgICAgICAgICAgICAgICk7XG5cdCAgICAgICAgICAgICAgICBNMmkxID0gKFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE0yaTEgPDwgOCkgIHwgKE0yaTEgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgKCgoTTJpMSA8PCAyNCkgfCAoTTJpMSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICAgICApO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBBYnNvcmIgbWVzc2FnZSBpbnRvIHN0YXRlXG5cdCAgICAgICAgICAgICAgICB2YXIgbGFuZSA9IHN0YXRlW2ldO1xuXHQgICAgICAgICAgICAgICAgbGFuZS5oaWdoIF49IE0yaTE7XG5cdCAgICAgICAgICAgICAgICBsYW5lLmxvdyAgXj0gTTJpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUm91bmRzXG5cdCAgICAgICAgICAgIGZvciAodmFyIHJvdW5kID0gMDsgcm91bmQgPCAyNDsgcm91bmQrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gVGhldGFcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgNTsgeCsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gTWl4IGNvbHVtbiBsYW5lc1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0TXN3ID0gMCwgdExzdyA9IDA7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCA1OyB5KyspIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVt4ICsgNSAqIHldO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0TXN3IF49IGxhbmUuaGlnaDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdExzdyBePSBsYW5lLmxvdztcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBUZW1wb3JhcnkgdmFsdWVzXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFR4ID0gVFt4XTtcblx0ICAgICAgICAgICAgICAgICAgICBUeC5oaWdoID0gdE1zdztcblx0ICAgICAgICAgICAgICAgICAgICBUeC5sb3cgID0gdExzdztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgNTsgeCsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFR4NCA9IFRbKHggKyA0KSAlIDVdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBUeDEgPSBUWyh4ICsgMSkgJSA1XTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgVHgxTXN3ID0gVHgxLmhpZ2g7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFR4MUxzdyA9IFR4MS5sb3c7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBNaXggc3Vycm91bmRpbmcgY29sdW1uc1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0TXN3ID0gVHg0LmhpZ2ggXiAoKFR4MU1zdyA8PCAxKSB8IChUeDFMc3cgPj4+IDMxKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHRMc3cgPSBUeDQubG93ICBeICgoVHgxTHN3IDw8IDEpIHwgKFR4MU1zdyA+Pj4gMzEpKTtcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IDU7IHkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZSA9IHN0YXRlW3ggKyA1ICogeV07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxhbmUuaGlnaCBePSB0TXN3O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBsYW5lLmxvdyAgXj0gdExzdztcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJobyBQaVxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgbGFuZUluZGV4ID0gMTsgbGFuZUluZGV4IDwgMjU7IGxhbmVJbmRleCsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVtsYW5lSW5kZXhdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lTXN3ID0gbGFuZS5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lTHN3ID0gbGFuZS5sb3c7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHJob09mZnNldCA9IFJIT19PRkZTRVRTW2xhbmVJbmRleF07XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBSb3RhdGUgbGFuZXNcblx0ICAgICAgICAgICAgICAgICAgICBpZiAocmhvT2Zmc2V0IDwgMzIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRNc3cgPSAobGFuZU1zdyA8PCByaG9PZmZzZXQpIHwgKGxhbmVMc3cgPj4+ICgzMiAtIHJob09mZnNldCkpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdExzdyA9IChsYW5lTHN3IDw8IHJob09mZnNldCkgfCAobGFuZU1zdyA+Pj4gKDMyIC0gcmhvT2Zmc2V0KSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIC8qIGlmIChyaG9PZmZzZXQgPj0gMzIpICovIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRNc3cgPSAobGFuZUxzdyA8PCAocmhvT2Zmc2V0IC0gMzIpKSB8IChsYW5lTXN3ID4+PiAoNjQgLSByaG9PZmZzZXQpKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRMc3cgPSAobGFuZU1zdyA8PCAocmhvT2Zmc2V0IC0gMzIpKSB8IChsYW5lTHN3ID4+PiAoNjQgLSByaG9PZmZzZXQpKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBUcmFuc3Bvc2UgbGFuZXNcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgVFBpTGFuZSA9IFRbUElfSU5ERVhFU1tsYW5lSW5kZXhdXTtcblx0ICAgICAgICAgICAgICAgICAgICBUUGlMYW5lLmhpZ2ggPSB0TXN3O1xuXHQgICAgICAgICAgICAgICAgICAgIFRQaUxhbmUubG93ICA9IHRMc3c7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJobyBwaSBhdCB4ID0geSA9IDBcblx0ICAgICAgICAgICAgICAgIHZhciBUMCA9IFRbMF07XG5cdCAgICAgICAgICAgICAgICB2YXIgc3RhdGUwID0gc3RhdGVbMF07XG5cdCAgICAgICAgICAgICAgICBUMC5oaWdoID0gc3RhdGUwLmhpZ2g7XG5cdCAgICAgICAgICAgICAgICBUMC5sb3cgID0gc3RhdGUwLmxvdztcblxuXHQgICAgICAgICAgICAgICAgLy8gQ2hpXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDU7IHgrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgNTsgeSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZUluZGV4ID0geCArIDUgKiB5O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZSA9IHN0YXRlW2xhbmVJbmRleF07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBUTGFuZSA9IFRbbGFuZUluZGV4XTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFR4MUxhbmUgPSBUWygoeCArIDEpICUgNSkgKyA1ICogeV07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBUeDJMYW5lID0gVFsoKHggKyAyKSAlIDUpICsgNSAqIHldO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1peCByb3dzXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxhbmUuaGlnaCA9IFRMYW5lLmhpZ2ggXiAoflR4MUxhbmUuaGlnaCAmIFR4MkxhbmUuaGlnaCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxhbmUubG93ICA9IFRMYW5lLmxvdyAgXiAoflR4MUxhbmUubG93ICAmIFR4MkxhbmUubG93KTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIElvdGFcblx0ICAgICAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbMF07XG5cdCAgICAgICAgICAgICAgICB2YXIgcm91bmRDb25zdGFudCA9IFJPVU5EX0NPTlNUQU5UU1tyb3VuZF07XG5cdCAgICAgICAgICAgICAgICBsYW5lLmhpZ2ggXj0gcm91bmRDb25zdGFudC5oaWdoO1xuXHQgICAgICAgICAgICAgICAgbGFuZS5sb3cgIF49IHJvdW5kQ29uc3RhbnQubG93Oztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODtcblx0ICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4O1xuXHQgICAgICAgICAgICB2YXIgYmxvY2tTaXplQml0cyA9IHRoaXMuYmxvY2tTaXplICogMzI7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHgxIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoTWF0aC5jZWlsKChuQml0c0xlZnQgKyAxKSAvIGJsb2NrU2l6ZUJpdHMpICogYmxvY2tTaXplQml0cykgPj4+IDUpIC0gMV0gfD0gMHg4MDtcblx0ICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyA9IGRhdGFXb3Jkcy5sZW5ndGggKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIEhhc2ggZmluYWwgYmxvY2tzXG5cdCAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MoKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGU7XG5cdCAgICAgICAgICAgIHZhciBvdXRwdXRMZW5ndGhCeXRlcyA9IHRoaXMuY2ZnLm91dHB1dExlbmd0aCAvIDg7XG5cdCAgICAgICAgICAgIHZhciBvdXRwdXRMZW5ndGhMYW5lcyA9IG91dHB1dExlbmd0aEJ5dGVzIC8gODtcblxuXHQgICAgICAgICAgICAvLyBTcXVlZXplXG5cdCAgICAgICAgICAgIHZhciBoYXNoV29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRwdXRMZW5ndGhMYW5lczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbaV07XG5cdCAgICAgICAgICAgICAgICB2YXIgbGFuZU1zdyA9IGxhbmUuaGlnaDtcblx0ICAgICAgICAgICAgICAgIHZhciBsYW5lTHN3ID0gbGFuZS5sb3c7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuXG5cdCAgICAgICAgICAgICAgICBsYW5lTXN3ID0gKFxuXHQgICAgICAgICAgICAgICAgICAgICgoKGxhbmVNc3cgPDwgOCkgIHwgKGxhbmVNc3cgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgKCgobGFuZU1zdyA8PCAyNCkgfCAobGFuZU1zdyA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICAgICAgbGFuZUxzdyA9IChcblx0ICAgICAgICAgICAgICAgICAgICAoKChsYW5lTHN3IDw8IDgpICB8IChsYW5lTHN3ID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICgoKGxhbmVMc3cgPDwgMjQpIHwgKGxhbmVMc3cgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICAgICAgKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gU3F1ZWV6ZSBzdGF0ZSB0byByZXRyaWV2ZSBoYXNoXG5cdCAgICAgICAgICAgICAgICBoYXNoV29yZHMucHVzaChsYW5lTHN3KTtcblx0ICAgICAgICAgICAgICAgIGhhc2hXb3Jkcy5wdXNoKGxhbmVNc3cpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2hcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdChoYXNoV29yZHMsIG91dHB1dExlbmd0aEJ5dGVzKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgdmFyIHN0YXRlID0gY2xvbmUuX3N0YXRlID0gdGhpcy5fc3RhdGUuc2xpY2UoMCk7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgc3RhdGVbaV0gPSBzdGF0ZVtpXS5jbG9uZSgpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMygnbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMyh3b3JkQXJyYXkpO1xuXHQgICAgICovXG5cdCAgICBDLlNIQTMgPSBIYXNoZXIuX2NyZWF0ZUhlbHBlcihTSEEzKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNTSEEzKG1lc3NhZ2UsIGtleSk7XG5cdCAgICAgKi9cblx0ICAgIEMuSG1hY1NIQTMgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBMyk7XG5cdH0oTWF0aCkpO1xuXG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlcjtcblx0ICAgIHZhciBDX3g2NCA9IEMueDY0O1xuXHQgICAgdmFyIFg2NFdvcmQgPSBDX3g2NC5Xb3JkO1xuXHQgICAgdmFyIFg2NFdvcmRBcnJheSA9IENfeDY0LldvcmRBcnJheTtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIGZ1bmN0aW9uIFg2NFdvcmRfY3JlYXRlKCkge1xuXHQgICAgICAgIHJldHVybiBYNjRXb3JkLmNyZWF0ZS5hcHBseShYNjRXb3JkLCBhcmd1bWVudHMpO1xuXHQgICAgfVxuXG5cdCAgICAvLyBDb25zdGFudHNcblx0ICAgIHZhciBLID0gW1xuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NDI4YTJmOTgsIDB4ZDcyOGFlMjIpLCBYNjRXb3JkX2NyZWF0ZSgweDcxMzc0NDkxLCAweDIzZWY2NWNkKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGI1YzBmYmNmLCAweGVjNGQzYjJmKSwgWDY0V29yZF9jcmVhdGUoMHhlOWI1ZGJhNSwgMHg4MTg5ZGJiYyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgzOTU2YzI1YiwgMHhmMzQ4YjUzOCksIFg2NFdvcmRfY3JlYXRlKDB4NTlmMTExZjEsIDB4YjYwNWQwMTkpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4OTIzZjgyYTQsIDB4YWYxOTRmOWIpLCBYNjRXb3JkX2NyZWF0ZSgweGFiMWM1ZWQ1LCAweGRhNmQ4MTE4KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGQ4MDdhYTk4LCAweGEzMDMwMjQyKSwgWDY0V29yZF9jcmVhdGUoMHgxMjgzNWIwMSwgMHg0NTcwNmZiZSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgyNDMxODViZSwgMHg0ZWU0YjI4YyksIFg2NFdvcmRfY3JlYXRlKDB4NTUwYzdkYzMsIDB4ZDVmZmI0ZTIpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NzJiZTVkNzQsIDB4ZjI3Yjg5NmYpLCBYNjRXb3JkX2NyZWF0ZSgweDgwZGViMWZlLCAweDNiMTY5NmIxKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDliZGMwNmE3LCAweDI1YzcxMjM1KSwgWDY0V29yZF9jcmVhdGUoMHhjMTliZjE3NCwgMHhjZjY5MjY5NCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhlNDliNjljMSwgMHg5ZWYxNGFkMiksIFg2NFdvcmRfY3JlYXRlKDB4ZWZiZTQ3ODYsIDB4Mzg0ZjI1ZTMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MGZjMTlkYzYsIDB4OGI4Y2Q1YjUpLCBYNjRXb3JkX2NyZWF0ZSgweDI0MGNhMWNjLCAweDc3YWM5YzY1KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDJkZTkyYzZmLCAweDU5MmIwMjc1KSwgWDY0V29yZF9jcmVhdGUoMHg0YTc0ODRhYSwgMHg2ZWE2ZTQ4MyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg1Y2IwYTlkYywgMHhiZDQxZmJkNCksIFg2NFdvcmRfY3JlYXRlKDB4NzZmOTg4ZGEsIDB4ODMxMTUzYjUpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4OTgzZTUxNTIsIDB4ZWU2NmRmYWIpLCBYNjRXb3JkX2NyZWF0ZSgweGE4MzFjNjZkLCAweDJkYjQzMjEwKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGIwMDMyN2M4LCAweDk4ZmIyMTNmKSwgWDY0V29yZF9jcmVhdGUoMHhiZjU5N2ZjNywgMHhiZWVmMGVlNCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhjNmUwMGJmMywgMHgzZGE4OGZjMiksIFg2NFdvcmRfY3JlYXRlKDB4ZDVhNzkxNDcsIDB4OTMwYWE3MjUpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MDZjYTYzNTEsIDB4ZTAwMzgyNmYpLCBYNjRXb3JkX2NyZWF0ZSgweDE0MjkyOTY3LCAweDBhMGU2ZTcwKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDI3YjcwYTg1LCAweDQ2ZDIyZmZjKSwgWDY0V29yZF9jcmVhdGUoMHgyZTFiMjEzOCwgMHg1YzI2YzkyNiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg0ZDJjNmRmYywgMHg1YWM0MmFlZCksIFg2NFdvcmRfY3JlYXRlKDB4NTMzODBkMTMsIDB4OWQ5NWIzZGYpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NjUwYTczNTQsIDB4OGJhZjYzZGUpLCBYNjRXb3JkX2NyZWF0ZSgweDc2NmEwYWJiLCAweDNjNzdiMmE4KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDgxYzJjOTJlLCAweDQ3ZWRhZWU2KSwgWDY0V29yZF9jcmVhdGUoMHg5MjcyMmM4NSwgMHgxNDgyMzUzYiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhhMmJmZThhMSwgMHg0Y2YxMDM2NCksIFg2NFdvcmRfY3JlYXRlKDB4YTgxYTY2NGIsIDB4YmM0MjMwMDEpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YzI0YjhiNzAsIDB4ZDBmODk3OTEpLCBYNjRXb3JkX2NyZWF0ZSgweGM3NmM1MWEzLCAweDA2NTRiZTMwKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGQxOTJlODE5LCAweGQ2ZWY1MjE4KSwgWDY0V29yZF9jcmVhdGUoMHhkNjk5MDYyNCwgMHg1NTY1YTkxMCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhmNDBlMzU4NSwgMHg1NzcxMjAyYSksIFg2NFdvcmRfY3JlYXRlKDB4MTA2YWEwNzAsIDB4MzJiYmQxYjgpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MTlhNGMxMTYsIDB4YjhkMmQwYzgpLCBYNjRXb3JkX2NyZWF0ZSgweDFlMzc2YzA4LCAweDUxNDFhYjUzKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDI3NDg3NzRjLCAweGRmOGVlYjk5KSwgWDY0V29yZF9jcmVhdGUoMHgzNGIwYmNiNSwgMHhlMTliNDhhOCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgzOTFjMGNiMywgMHhjNWM5NWE2MyksIFg2NFdvcmRfY3JlYXRlKDB4NGVkOGFhNGEsIDB4ZTM0MThhY2IpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NWI5Y2NhNGYsIDB4Nzc2M2UzNzMpLCBYNjRXb3JkX2NyZWF0ZSgweDY4MmU2ZmYzLCAweGQ2YjJiOGEzKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDc0OGY4MmVlLCAweDVkZWZiMmZjKSwgWDY0V29yZF9jcmVhdGUoMHg3OGE1NjM2ZiwgMHg0MzE3MmY2MCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg4NGM4NzgxNCwgMHhhMWYwYWI3MiksIFg2NFdvcmRfY3JlYXRlKDB4OGNjNzAyMDgsIDB4MWE2NDM5ZWMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4OTBiZWZmZmEsIDB4MjM2MzFlMjgpLCBYNjRXb3JkX2NyZWF0ZSgweGE0NTA2Y2ViLCAweGRlODJiZGU5KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGJlZjlhM2Y3LCAweGIyYzY3OTE1KSwgWDY0V29yZF9jcmVhdGUoMHhjNjcxNzhmMiwgMHhlMzcyNTMyYiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhjYTI3M2VjZSwgMHhlYTI2NjE5YyksIFg2NFdvcmRfY3JlYXRlKDB4ZDE4NmI4YzcsIDB4MjFjMGMyMDcpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZWFkYTdkZDYsIDB4Y2RlMGViMWUpLCBYNjRXb3JkX2NyZWF0ZSgweGY1N2Q0ZjdmLCAweGVlNmVkMTc4KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDA2ZjA2N2FhLCAweDcyMTc2ZmJhKSwgWDY0V29yZF9jcmVhdGUoMHgwYTYzN2RjNSwgMHhhMmM4OThhNiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgxMTNmOTgwNCwgMHhiZWY5MGRhZSksIFg2NFdvcmRfY3JlYXRlKDB4MWI3MTBiMzUsIDB4MTMxYzQ3MWIpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MjhkYjc3ZjUsIDB4MjMwNDdkODQpLCBYNjRXb3JkX2NyZWF0ZSgweDMyY2FhYjdiLCAweDQwYzcyNDkzKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDNjOWViZTBhLCAweDE1YzliZWJjKSwgWDY0V29yZF9jcmVhdGUoMHg0MzFkNjdjNCwgMHg5YzEwMGQ0YyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg0Y2M1ZDRiZSwgMHhjYjNlNDJiNiksIFg2NFdvcmRfY3JlYXRlKDB4NTk3ZjI5OWMsIDB4ZmM2NTdlMmEpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NWZjYjZmYWIsIDB4M2FkNmZhZWMpLCBYNjRXb3JkX2NyZWF0ZSgweDZjNDQxOThjLCAweDRhNDc1ODE3KVxuXHQgICAgXTtcblxuXHQgICAgLy8gUmV1c2FibGUgb2JqZWN0c1xuXHQgICAgdmFyIFcgPSBbXTtcblx0ICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSsrKSB7XG5cdCAgICAgICAgICAgIFdbaV0gPSBYNjRXb3JkX2NyZWF0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH0oKSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU0hBLTUxMiBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFNIQTUxMiA9IENfYWxnby5TSEE1MTIgPSBIYXNoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFg2NFdvcmRBcnJheS5pbml0KFtcblx0ICAgICAgICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHg2YTA5ZTY2NywgMHhmM2JjYzkwOCksIG5ldyBYNjRXb3JkLmluaXQoMHhiYjY3YWU4NSwgMHg4NGNhYTczYiksXG5cdCAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4M2M2ZWYzNzIsIDB4ZmU5NGY4MmIpLCBuZXcgWDY0V29yZC5pbml0KDB4YTU0ZmY1M2EsIDB4NWYxZDM2ZjEpLFxuXHQgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDUxMGU1MjdmLCAweGFkZTY4MmQxKSwgbmV3IFg2NFdvcmQuaW5pdCgweDliMDU2ODhjLCAweDJiM2U2YzFmKSxcblx0ICAgICAgICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHgxZjgzZDlhYiwgMHhmYjQxYmQ2YiksIG5ldyBYNjRXb3JkLmluaXQoMHg1YmUwY2QxOSwgMHgxMzdlMjE3OSlcblx0ICAgICAgICAgICAgXSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIEggPSB0aGlzLl9oYXNoLndvcmRzO1xuXG5cdCAgICAgICAgICAgIHZhciBIMCA9IEhbMF07XG5cdCAgICAgICAgICAgIHZhciBIMSA9IEhbMV07XG5cdCAgICAgICAgICAgIHZhciBIMiA9IEhbMl07XG5cdCAgICAgICAgICAgIHZhciBIMyA9IEhbM107XG5cdCAgICAgICAgICAgIHZhciBINCA9IEhbNF07XG5cdCAgICAgICAgICAgIHZhciBINSA9IEhbNV07XG5cdCAgICAgICAgICAgIHZhciBINiA9IEhbNl07XG5cdCAgICAgICAgICAgIHZhciBINyA9IEhbN107XG5cblx0ICAgICAgICAgICAgdmFyIEgwaCA9IEgwLmhpZ2g7XG5cdCAgICAgICAgICAgIHZhciBIMGwgPSBIMC5sb3c7XG5cdCAgICAgICAgICAgIHZhciBIMWggPSBIMS5oaWdoO1xuXHQgICAgICAgICAgICB2YXIgSDFsID0gSDEubG93O1xuXHQgICAgICAgICAgICB2YXIgSDJoID0gSDIuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEgybCA9IEgyLmxvdztcblx0ICAgICAgICAgICAgdmFyIEgzaCA9IEgzLmhpZ2g7XG5cdCAgICAgICAgICAgIHZhciBIM2wgPSBIMy5sb3c7XG5cdCAgICAgICAgICAgIHZhciBINGggPSBINC5oaWdoO1xuXHQgICAgICAgICAgICB2YXIgSDRsID0gSDQubG93O1xuXHQgICAgICAgICAgICB2YXIgSDVoID0gSDUuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEg1bCA9IEg1Lmxvdztcblx0ICAgICAgICAgICAgdmFyIEg2aCA9IEg2LmhpZ2g7XG5cdCAgICAgICAgICAgIHZhciBINmwgPSBINi5sb3c7XG5cdCAgICAgICAgICAgIHZhciBIN2ggPSBINy5oaWdoO1xuXHQgICAgICAgICAgICB2YXIgSDdsID0gSDcubG93O1xuXG5cdCAgICAgICAgICAgIC8vIFdvcmtpbmcgdmFyaWFibGVzXG5cdCAgICAgICAgICAgIHZhciBhaCA9IEgwaDtcblx0ICAgICAgICAgICAgdmFyIGFsID0gSDBsO1xuXHQgICAgICAgICAgICB2YXIgYmggPSBIMWg7XG5cdCAgICAgICAgICAgIHZhciBibCA9IEgxbDtcblx0ICAgICAgICAgICAgdmFyIGNoID0gSDJoO1xuXHQgICAgICAgICAgICB2YXIgY2wgPSBIMmw7XG5cdCAgICAgICAgICAgIHZhciBkaCA9IEgzaDtcblx0ICAgICAgICAgICAgdmFyIGRsID0gSDNsO1xuXHQgICAgICAgICAgICB2YXIgZWggPSBINGg7XG5cdCAgICAgICAgICAgIHZhciBlbCA9IEg0bDtcblx0ICAgICAgICAgICAgdmFyIGZoID0gSDVoO1xuXHQgICAgICAgICAgICB2YXIgZmwgPSBINWw7XG5cdCAgICAgICAgICAgIHZhciBnaCA9IEg2aDtcblx0ICAgICAgICAgICAgdmFyIGdsID0gSDZsO1xuXHQgICAgICAgICAgICB2YXIgaGggPSBIN2g7XG5cdCAgICAgICAgICAgIHZhciBobCA9IEg3bDtcblxuXHQgICAgICAgICAgICAvLyBSb3VuZHNcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICAgICAgdmFyIFdpID0gV1tpXTtcblxuXHQgICAgICAgICAgICAgICAgLy8gRXh0ZW5kIG1lc3NhZ2Vcblx0ICAgICAgICAgICAgICAgIGlmIChpIDwgMTYpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2loID0gV2kuaGlnaCA9IE1bb2Zmc2V0ICsgaSAqIDJdICAgICB8IDA7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpbCA9IFdpLmxvdyAgPSBNW29mZnNldCArIGkgKiAyICsgMV0gfCAwO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBHYW1tYTBcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEweCAgPSBXW2kgLSAxNV07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMHhoID0gZ2FtbWEweC5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTB4bCA9IGdhbW1hMHgubG93O1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTBoICA9ICgoZ2FtbWEweGggPj4+IDEpIHwgKGdhbW1hMHhsIDw8IDMxKSkgXiAoKGdhbW1hMHhoID4+PiA4KSB8IChnYW1tYTB4bCA8PCAyNCkpIF4gKGdhbW1hMHhoID4+PiA3KTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEwbCAgPSAoKGdhbW1hMHhsID4+PiAxKSB8IChnYW1tYTB4aCA8PCAzMSkpIF4gKChnYW1tYTB4bCA+Pj4gOCkgfCAoZ2FtbWEweGggPDwgMjQpKSBeICgoZ2FtbWEweGwgPj4+IDcpIHwgKGdhbW1hMHhoIDw8IDI1KSk7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBHYW1tYTFcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWExeCAgPSBXW2kgLSAyXTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWExeGggPSBnYW1tYTF4LmhpZ2g7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMXhsID0gZ2FtbWExeC5sb3c7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMWggID0gKChnYW1tYTF4aCA+Pj4gMTkpIHwgKGdhbW1hMXhsIDw8IDEzKSkgXiAoKGdhbW1hMXhoIDw8IDMpIHwgKGdhbW1hMXhsID4+PiAyOSkpIF4gKGdhbW1hMXhoID4+PiA2KTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWExbCAgPSAoKGdhbW1hMXhsID4+PiAxOSkgfCAoZ2FtbWExeGggPDwgMTMpKSBeICgoZ2FtbWExeGwgPDwgMykgfCAoZ2FtbWExeGggPj4+IDI5KSkgXiAoKGdhbW1hMXhsID4+PiA2KSB8IChnYW1tYTF4aCA8PCAyNikpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gV1tpXSA9IGdhbW1hMCArIFdbaSAtIDddICsgZ2FtbWExICsgV1tpIC0gMTZdXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpNyAgPSBXW2kgLSA3XTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2k3aCA9IFdpNy5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaTdsID0gV2k3LmxvdztcblxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaTE2ICA9IFdbaSAtIDE2XTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2kxNmggPSBXaTE2LmhpZ2g7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpMTZsID0gV2kxNi5sb3c7XG5cblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2lsID0gZ2FtbWEwbCArIFdpN2w7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpaCA9IGdhbW1hMGggKyBXaTdoICsgKChXaWwgPj4+IDApIDwgKGdhbW1hMGwgPj4+IDApID8gMSA6IDApO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaWwgPSBXaWwgKyBnYW1tYTFsO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaWggPSBXaWggKyBnYW1tYTFoICsgKChXaWwgPj4+IDApIDwgKGdhbW1hMWwgPj4+IDApID8gMSA6IDApO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaWwgPSBXaWwgKyBXaTE2bDtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2loID0gV2loICsgV2kxNmggKyAoKFdpbCA+Pj4gMCkgPCAoV2kxNmwgPj4+IDApID8gMSA6IDApO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgV2kuaGlnaCA9IFdpaDtcblx0ICAgICAgICAgICAgICAgICAgICBXaS5sb3cgID0gV2lsO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICB2YXIgY2hoICA9IChlaCAmIGZoKSBeICh+ZWggJiBnaCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgY2hsICA9IChlbCAmIGZsKSBeICh+ZWwgJiBnbCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgbWFqaCA9IChhaCAmIGJoKSBeIChhaCAmIGNoKSBeIChiaCAmIGNoKTtcblx0ICAgICAgICAgICAgICAgIHZhciBtYWpsID0gKGFsICYgYmwpIF4gKGFsICYgY2wpIF4gKGJsICYgY2wpO1xuXG5cdCAgICAgICAgICAgICAgICB2YXIgc2lnbWEwaCA9ICgoYWggPj4+IDI4KSB8IChhbCA8PCA0KSkgIF4gKChhaCA8PCAzMCkgIHwgKGFsID4+PiAyKSkgXiAoKGFoIDw8IDI1KSB8IChhbCA+Pj4gNykpO1xuXHQgICAgICAgICAgICAgICAgdmFyIHNpZ21hMGwgPSAoKGFsID4+PiAyOCkgfCAoYWggPDwgNCkpICBeICgoYWwgPDwgMzApICB8IChhaCA+Pj4gMikpIF4gKChhbCA8PCAyNSkgfCAoYWggPj4+IDcpKTtcblx0ICAgICAgICAgICAgICAgIHZhciBzaWdtYTFoID0gKChlaCA+Pj4gMTQpIHwgKGVsIDw8IDE4KSkgXiAoKGVoID4+PiAxOCkgfCAoZWwgPDwgMTQpKSBeICgoZWggPDwgMjMpIHwgKGVsID4+PiA5KSk7XG5cdCAgICAgICAgICAgICAgICB2YXIgc2lnbWExbCA9ICgoZWwgPj4+IDE0KSB8IChlaCA8PCAxOCkpIF4gKChlbCA+Pj4gMTgpIHwgKGVoIDw8IDE0KSkgXiAoKGVsIDw8IDIzKSB8IChlaCA+Pj4gOSkpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyB0MSA9IGggKyBzaWdtYTEgKyBjaCArIEtbaV0gKyBXW2ldXG5cdCAgICAgICAgICAgICAgICB2YXIgS2kgID0gS1tpXTtcblx0ICAgICAgICAgICAgICAgIHZhciBLaWggPSBLaS5oaWdoO1xuXHQgICAgICAgICAgICAgICAgdmFyIEtpbCA9IEtpLmxvdztcblxuXHQgICAgICAgICAgICAgICAgdmFyIHQxbCA9IGhsICsgc2lnbWExbDtcblx0ICAgICAgICAgICAgICAgIHZhciB0MWggPSBoaCArIHNpZ21hMWggKyAoKHQxbCA+Pj4gMCkgPCAoaGwgPj4+IDApID8gMSA6IDApO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxbCA9IHQxbCArIGNobDtcblx0ICAgICAgICAgICAgICAgIHZhciB0MWggPSB0MWggKyBjaGggKyAoKHQxbCA+Pj4gMCkgPCAoY2hsID4+PiAwKSA/IDEgOiAwKTtcblx0ICAgICAgICAgICAgICAgIHZhciB0MWwgPSB0MWwgKyBLaWw7XG5cdCAgICAgICAgICAgICAgICB2YXIgdDFoID0gdDFoICsgS2loICsgKCh0MWwgPj4+IDApIDwgKEtpbCA+Pj4gMCkgPyAxIDogMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgdDFsID0gdDFsICsgV2lsO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxaCA9IHQxaCArIFdpaCArICgodDFsID4+PiAwKSA8IChXaWwgPj4+IDApID8gMSA6IDApO1xuXG5cdCAgICAgICAgICAgICAgICAvLyB0MiA9IHNpZ21hMCArIG1halxuXHQgICAgICAgICAgICAgICAgdmFyIHQybCA9IHNpZ21hMGwgKyBtYWpsO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQyaCA9IHNpZ21hMGggKyBtYWpoICsgKCh0MmwgPj4+IDApIDwgKHNpZ21hMGwgPj4+IDApID8gMSA6IDApO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBVcGRhdGUgd29ya2luZyB2YXJpYWJsZXNcblx0ICAgICAgICAgICAgICAgIGhoID0gZ2g7XG5cdCAgICAgICAgICAgICAgICBobCA9IGdsO1xuXHQgICAgICAgICAgICAgICAgZ2ggPSBmaDtcblx0ICAgICAgICAgICAgICAgIGdsID0gZmw7XG5cdCAgICAgICAgICAgICAgICBmaCA9IGVoO1xuXHQgICAgICAgICAgICAgICAgZmwgPSBlbDtcblx0ICAgICAgICAgICAgICAgIGVsID0gKGRsICsgdDFsKSB8IDA7XG5cdCAgICAgICAgICAgICAgICBlaCA9IChkaCArIHQxaCArICgoZWwgPj4+IDApIDwgKGRsID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgICAgICAgICAgZGggPSBjaDtcblx0ICAgICAgICAgICAgICAgIGRsID0gY2w7XG5cdCAgICAgICAgICAgICAgICBjaCA9IGJoO1xuXHQgICAgICAgICAgICAgICAgY2wgPSBibDtcblx0ICAgICAgICAgICAgICAgIGJoID0gYWg7XG5cdCAgICAgICAgICAgICAgICBibCA9IGFsO1xuXHQgICAgICAgICAgICAgICAgYWwgPSAodDFsICsgdDJsKSB8IDA7XG5cdCAgICAgICAgICAgICAgICBhaCA9ICh0MWggKyB0MmggKyAoKGFsID4+PiAwKSA8ICh0MWwgPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZVxuXHQgICAgICAgICAgICBIMGwgPSBIMC5sb3cgID0gKEgwbCArIGFsKTtcblx0ICAgICAgICAgICAgSDAuaGlnaCA9IChIMGggKyBhaCArICgoSDBsID4+PiAwKSA8IChhbCA+Pj4gMCkgPyAxIDogMCkpO1xuXHQgICAgICAgICAgICBIMWwgPSBIMS5sb3cgID0gKEgxbCArIGJsKTtcblx0ICAgICAgICAgICAgSDEuaGlnaCA9IChIMWggKyBiaCArICgoSDFsID4+PiAwKSA8IChibCA+Pj4gMCkgPyAxIDogMCkpO1xuXHQgICAgICAgICAgICBIMmwgPSBIMi5sb3cgID0gKEgybCArIGNsKTtcblx0ICAgICAgICAgICAgSDIuaGlnaCA9IChIMmggKyBjaCArICgoSDJsID4+PiAwKSA8IChjbCA+Pj4gMCkgPyAxIDogMCkpO1xuXHQgICAgICAgICAgICBIM2wgPSBIMy5sb3cgID0gKEgzbCArIGRsKTtcblx0ICAgICAgICAgICAgSDMuaGlnaCA9IChIM2ggKyBkaCArICgoSDNsID4+PiAwKSA8IChkbCA+Pj4gMCkgPyAxIDogMCkpO1xuXHQgICAgICAgICAgICBINGwgPSBINC5sb3cgID0gKEg0bCArIGVsKTtcblx0ICAgICAgICAgICAgSDQuaGlnaCA9IChINGggKyBlaCArICgoSDRsID4+PiAwKSA8IChlbCA+Pj4gMCkgPyAxIDogMCkpO1xuXHQgICAgICAgICAgICBINWwgPSBINS5sb3cgID0gKEg1bCArIGZsKTtcblx0ICAgICAgICAgICAgSDUuaGlnaCA9IChINWggKyBmaCArICgoSDVsID4+PiAwKSA8IChmbCA+Pj4gMCkgPyAxIDogMCkpO1xuXHQgICAgICAgICAgICBINmwgPSBINi5sb3cgID0gKEg2bCArIGdsKTtcblx0ICAgICAgICAgICAgSDYuaGlnaCA9IChINmggKyBnaCArICgoSDZsID4+PiAwKSA8IChnbCA+Pj4gMCkgPyAxIDogMCkpO1xuXHQgICAgICAgICAgICBIN2wgPSBINy5sb3cgID0gKEg3bCArIGhsKTtcblx0ICAgICAgICAgICAgSDcuaGlnaCA9IChIN2ggKyBoaCArICgoSDdsID4+PiAwKSA8IChobCA+Pj4gMCkgPyAxIDogMCkpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4O1xuXHQgICAgICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyAxMjgpID4+PiAxMCkgPDwgNSkgKyAzMF0gPSBNYXRoLmZsb29yKG5CaXRzVG90YWwgLyAweDEwMDAwMDAwMCk7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyAxMjgpID4+PiAxMCkgPDwgNSkgKyAzMV0gPSBuQml0c1RvdGFsO1xuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gZGF0YVdvcmRzLmxlbmd0aCAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnQgaGFzaCB0byAzMi1iaXQgd29yZCBhcnJheSBiZWZvcmUgcmV0dXJuaW5nXG5cdCAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5faGFzaC50b1gzMigpO1xuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBibG9ja1NpemU6IDEwMjQvMzJcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBNTEyKCdtZXNzYWdlJyk7XG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEE1MTIod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5TSEE1MTIgPSBIYXNoZXIuX2NyZWF0ZUhlbHBlcihTSEE1MTIpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTUxMihtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNTSEE1MTIgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBNTEyKTtcblx0fSgpKTtcblxuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ194NjQgPSBDLng2NDtcblx0ICAgIHZhciBYNjRXb3JkID0gQ194NjQuV29yZDtcblx0ICAgIHZhciBYNjRXb3JkQXJyYXkgPSBDX3g2NC5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXHQgICAgdmFyIFNIQTUxMiA9IENfYWxnby5TSEE1MTI7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU0hBLTM4NCBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFNIQTM4NCA9IENfYWxnby5TSEEzODQgPSBTSEE1MTIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFg2NFdvcmRBcnJheS5pbml0KFtcblx0ICAgICAgICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHhjYmJiOWQ1ZCwgMHhjMTA1OWVkOCksIG5ldyBYNjRXb3JkLmluaXQoMHg2MjlhMjkyYSwgMHgzNjdjZDUwNyksXG5cdCAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4OTE1OTAxNWEsIDB4MzA3MGRkMTcpLCBuZXcgWDY0V29yZC5pbml0KDB4MTUyZmVjZDgsIDB4ZjcwZTU5MzkpLFxuXHQgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDY3MzMyNjY3LCAweGZmYzAwYjMxKSwgbmV3IFg2NFdvcmQuaW5pdCgweDhlYjQ0YTg3LCAweDY4NTgxNTExKSxcblx0ICAgICAgICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHhkYjBjMmUwZCwgMHg2NGY5OGZhNyksIG5ldyBYNjRXb3JkLmluaXQoMHg0N2I1NDgxZCwgMHhiZWZhNGZhNClcblx0ICAgICAgICAgICAgXSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBoYXNoID0gU0hBNTEyLl9kb0ZpbmFsaXplLmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgaGFzaC5zaWdCeXRlcyAtPSAxNjtcblxuXHQgICAgICAgICAgICByZXR1cm4gaGFzaDtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTM4NCgnbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMzg0KHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuU0hBMzg0ID0gU0hBNTEyLl9jcmVhdGVIZWxwZXIoU0hBMzg0KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNTSEEzODQobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjU0hBMzg0ID0gU0hBNTEyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTM4NCk7XG5cdH0oKSk7XG5cblxuXHQvKipcblx0ICogQ2lwaGVyIGNvcmUgY29tcG9uZW50cy5cblx0ICovXG5cdENyeXB0b0pTLmxpYi5DaXBoZXIgfHwgKGZ1bmN0aW9uICh1bmRlZmluZWQpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtID0gQ19saWIuQnVmZmVyZWRCbG9ja0FsZ29yaXRobTtcblx0ICAgIHZhciBDX2VuYyA9IEMuZW5jO1xuXHQgICAgdmFyIFV0ZjggPSBDX2VuYy5VdGY4O1xuXHQgICAgdmFyIEJhc2U2NCA9IENfZW5jLkJhc2U2NDtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cdCAgICB2YXIgRXZwS0RGID0gQ19hbGdvLkV2cEtERjtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBYnN0cmFjdCBiYXNlIGNpcGhlciB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0ga2V5U2l6ZSBUaGlzIGNpcGhlcidzIGtleSBzaXplLiBEZWZhdWx0OiA0ICgxMjggYml0cylcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpdlNpemUgVGhpcyBjaXBoZXIncyBJViBzaXplLiBEZWZhdWx0OiA0ICgxMjggYml0cylcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBfRU5DX1hGT1JNX01PREUgQSBjb25zdGFudCByZXByZXNlbnRpbmcgZW5jcnlwdGlvbiBtb2RlLlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IF9ERUNfWEZPUk1fTU9ERSBBIGNvbnN0YW50IHJlcHJlc2VudGluZyBkZWNyeXB0aW9uIG1vZGUuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDaXBoZXIgPSBDX2xpYi5DaXBoZXIgPSBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtXb3JkQXJyYXl9IGl2IFRoZSBJViB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogQmFzZS5leHRlbmQoKSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgdGhpcyBjaXBoZXIgaW4gZW5jcnlwdGlvbiBtb2RlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJ9IEEgY2lwaGVyIGluc3RhbmNlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVyID0gQ3J5cHRvSlMuYWxnby5BRVMuY3JlYXRlRW5jcnlwdG9yKGtleVdvcmRBcnJheSwgeyBpdjogaXZXb3JkQXJyYXkgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY3JlYXRlRW5jcnlwdG9yOiBmdW5jdGlvbiAoa2V5LCBjZmcpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHRoaXMuX0VOQ19YRk9STV9NT0RFLCBrZXksIGNmZyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgdGhpcyBjaXBoZXIgaW4gZGVjcnlwdGlvbiBtb2RlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJ9IEEgY2lwaGVyIGluc3RhbmNlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVyID0gQ3J5cHRvSlMuYWxnby5BRVMuY3JlYXRlRGVjcnlwdG9yKGtleVdvcmRBcnJheSwgeyBpdjogaXZXb3JkQXJyYXkgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY3JlYXRlRGVjcnlwdG9yOiBmdW5jdGlvbiAoa2V5LCBjZmcpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHRoaXMuX0RFQ19YRk9STV9NT0RFLCBrZXksIGNmZyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBjaXBoZXIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0geGZvcm1Nb2RlIEVpdGhlciB0aGUgZW5jcnlwdGlvbiBvciBkZWNyeXB0aW9uIHRyYW5zb3JtYXRpb24gbW9kZSBjb25zdGFudC5cblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlciA9IENyeXB0b0pTLmFsZ28uQUVTLmNyZWF0ZShDcnlwdG9KUy5hbGdvLkFFUy5fRU5DX1hGT1JNX01PREUsIGtleVdvcmRBcnJheSwgeyBpdjogaXZXb3JkQXJyYXkgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKHhmb3JtTW9kZSwga2V5LCBjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIHRoaXMuY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gU3RvcmUgdHJhbnNmb3JtIG1vZGUgYW5kIGtleVxuXHQgICAgICAgICAgICB0aGlzLl94Zm9ybU1vZGUgPSB4Zm9ybU1vZGU7XG5cdCAgICAgICAgICAgIHRoaXMuX2tleSA9IGtleTtcblxuXHQgICAgICAgICAgICAvLyBTZXQgaW5pdGlhbCB2YWx1ZXNcblx0ICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSZXNldHMgdGhpcyBjaXBoZXIgdG8gaXRzIGluaXRpYWwgc3RhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGNpcGhlci5yZXNldCgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFJlc2V0IGRhdGEgYnVmZmVyXG5cdCAgICAgICAgICAgIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0ucmVzZXQuY2FsbCh0aGlzKTtcblxuXHQgICAgICAgICAgICAvLyBQZXJmb3JtIGNvbmNyZXRlLWNpcGhlciBsb2dpY1xuXHQgICAgICAgICAgICB0aGlzLl9kb1Jlc2V0KCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEFkZHMgZGF0YSB0byBiZSBlbmNyeXB0ZWQgb3IgZGVjcnlwdGVkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBkYXRhVXBkYXRlIFRoZSBkYXRhIHRvIGVuY3J5cHQgb3IgZGVjcnlwdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRhdGEgYWZ0ZXIgcHJvY2Vzc2luZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGVuY3J5cHRlZCA9IGNpcGhlci5wcm9jZXNzKCdkYXRhJyk7XG5cdCAgICAgICAgICogICAgIHZhciBlbmNyeXB0ZWQgPSBjaXBoZXIucHJvY2Vzcyh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHByb2Nlc3M6IGZ1bmN0aW9uIChkYXRhVXBkYXRlKSB7XG5cdCAgICAgICAgICAgIC8vIEFwcGVuZFxuXHQgICAgICAgICAgICB0aGlzLl9hcHBlbmQoZGF0YVVwZGF0ZSk7XG5cblx0ICAgICAgICAgICAgLy8gUHJvY2VzcyBhdmFpbGFibGUgYmxvY2tzXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcm9jZXNzKCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEZpbmFsaXplcyB0aGUgZW5jcnlwdGlvbiBvciBkZWNyeXB0aW9uIHByb2Nlc3MuXG5cdCAgICAgICAgICogTm90ZSB0aGF0IHRoZSBmaW5hbGl6ZSBvcGVyYXRpb24gaXMgZWZmZWN0aXZlbHkgYSBkZXN0cnVjdGl2ZSwgcmVhZC1vbmNlIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gZGF0YVVwZGF0ZSBUaGUgZmluYWwgZGF0YSB0byBlbmNyeXB0IG9yIGRlY3J5cHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBkYXRhIGFmdGVyIGZpbmFsIHByb2Nlc3NpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBlbmNyeXB0ZWQgPSBjaXBoZXIuZmluYWxpemUoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGVuY3J5cHRlZCA9IGNpcGhlci5maW5hbGl6ZSgnZGF0YScpO1xuXHQgICAgICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLmZpbmFsaXplKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZmluYWxpemU6IGZ1bmN0aW9uIChkYXRhVXBkYXRlKSB7XG5cdCAgICAgICAgICAgIC8vIEZpbmFsIGRhdGEgdXBkYXRlXG5cdCAgICAgICAgICAgIGlmIChkYXRhVXBkYXRlKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9hcHBlbmQoZGF0YVVwZGF0ZSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBQZXJmb3JtIGNvbmNyZXRlLWNpcGhlciBsb2dpY1xuXHQgICAgICAgICAgICB2YXIgZmluYWxQcm9jZXNzZWREYXRhID0gdGhpcy5fZG9GaW5hbGl6ZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBmaW5hbFByb2Nlc3NlZERhdGE7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGtleVNpemU6IDEyOC8zMixcblxuXHQgICAgICAgIGl2U2l6ZTogMTI4LzMyLFxuXG5cdCAgICAgICAgX0VOQ19YRk9STV9NT0RFOiAxLFxuXG5cdCAgICAgICAgX0RFQ19YRk9STV9NT0RFOiAyLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBzaG9ydGN1dCBmdW5jdGlvbnMgdG8gYSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBUaGUgY2lwaGVyIHRvIGNyZWF0ZSBhIGhlbHBlciBmb3IuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEFuIG9iamVjdCB3aXRoIGVuY3J5cHQgYW5kIGRlY3J5cHQgc2hvcnRjdXQgZnVuY3Rpb25zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgQUVTID0gQ3J5cHRvSlMubGliLkNpcGhlci5fY3JlYXRlSGVscGVyKENyeXB0b0pTLmFsZ28uQUVTKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBfY3JlYXRlSGVscGVyOiAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICBmdW5jdGlvbiBzZWxlY3RDaXBoZXJTdHJhdGVneShrZXkpIHtcblx0ICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBhc3N3b3JkQmFzZWRDaXBoZXI7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBTZXJpYWxpemFibGVDaXBoZXI7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNpcGhlcikge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgICAgICAgICBlbmNyeXB0OiBmdW5jdGlvbiAobWVzc2FnZSwga2V5LCBjZmcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdENpcGhlclN0cmF0ZWd5KGtleSkuZW5jcnlwdChjaXBoZXIsIG1lc3NhZ2UsIGtleSwgY2ZnKTtcblx0ICAgICAgICAgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgICAgICAgICAgZGVjcnlwdDogZnVuY3Rpb24gKGNpcGhlcnRleHQsIGtleSwgY2ZnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3RDaXBoZXJTdHJhdGVneShrZXkpLmRlY3J5cHQoY2lwaGVyLCBjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9KCkpXG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBYnN0cmFjdCBiYXNlIHN0cmVhbSBjaXBoZXIgdGVtcGxhdGUuXG5cdCAgICAgKlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGJsb2NrU2l6ZSBUaGUgbnVtYmVyIG9mIDMyLWJpdCB3b3JkcyB0aGlzIGNpcGhlciBvcGVyYXRlcyBvbi4gRGVmYXVsdDogMSAoMzIgYml0cylcblx0ICAgICAqL1xuXHQgICAgdmFyIFN0cmVhbUNpcGhlciA9IENfbGliLlN0cmVhbUNpcGhlciA9IENpcGhlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFByb2Nlc3MgcGFydGlhbCBibG9ja3Ncblx0ICAgICAgICAgICAgdmFyIGZpbmFsUHJvY2Vzc2VkQmxvY2tzID0gdGhpcy5fcHJvY2VzcyghISdmbHVzaCcpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBmaW5hbFByb2Nlc3NlZEJsb2Nrcztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgYmxvY2tTaXplOiAxXG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBNb2RlIG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfbW9kZSA9IEMubW9kZSA9IHt9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGJhc2UgYmxvY2sgY2lwaGVyIG1vZGUgdGVtcGxhdGUuXG5cdCAgICAgKi9cblx0ICAgIHZhciBCbG9ja0NpcGhlck1vZGUgPSBDX2xpYi5CbG9ja0NpcGhlck1vZGUgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyB0aGlzIG1vZGUgZm9yIGVuY3J5cHRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIEEgYmxvY2sgY2lwaGVyIGluc3RhbmNlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGl2IFRoZSBJViB3b3Jkcy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIG1vZGUgPSBDcnlwdG9KUy5tb2RlLkNCQy5jcmVhdGVFbmNyeXB0b3IoY2lwaGVyLCBpdi53b3Jkcyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY3JlYXRlRW5jcnlwdG9yOiBmdW5jdGlvbiAoY2lwaGVyLCBpdikge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5FbmNyeXB0b3IuY3JlYXRlKGNpcGhlciwgaXYpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIHRoaXMgbW9kZSBmb3IgZGVjcnlwdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgQSBibG9jayBjaXBoZXIgaW5zdGFuY2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtBcnJheX0gaXYgVGhlIElWIHdvcmRzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgbW9kZSA9IENyeXB0b0pTLm1vZGUuQ0JDLmNyZWF0ZURlY3J5cHRvcihjaXBoZXIsIGl2LndvcmRzKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjcmVhdGVEZWNyeXB0b3I6IGZ1bmN0aW9uIChjaXBoZXIsIGl2KSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLkRlY3J5cHRvci5jcmVhdGUoY2lwaGVyLCBpdik7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBtb2RlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBBIGJsb2NrIGNpcGhlciBpbnN0YW5jZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBpdiBUaGUgSVYgd29yZHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBtb2RlID0gQ3J5cHRvSlMubW9kZS5DQkMuRW5jcnlwdG9yLmNyZWF0ZShjaXBoZXIsIGl2LndvcmRzKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2lwaGVyLCBpdikge1xuXHQgICAgICAgICAgICB0aGlzLl9jaXBoZXIgPSBjaXBoZXI7XG5cdCAgICAgICAgICAgIHRoaXMuX2l2ID0gaXY7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQ2lwaGVyIEJsb2NrIENoYWluaW5nIG1vZGUuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDQkMgPSBDX21vZGUuQ0JDID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBBYnN0cmFjdCBiYXNlIENCQyBtb2RlLlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHZhciBDQkMgPSBCbG9ja0NpcGhlck1vZGUuZXh0ZW5kKCk7XG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDQkMgZW5jcnlwdG9yLlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIENCQy5FbmNyeXB0b3IgPSBDQkMuZXh0ZW5kKHtcblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIFByb2Nlc3NlcyB0aGUgZGF0YSBibG9jayBhdCBvZmZzZXQuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHdvcmRzIFRoZSBkYXRhIHdvcmRzIHRvIG9wZXJhdGUgb24uXG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgVGhlIG9mZnNldCB3aGVyZSB0aGUgYmxvY2sgc3RhcnRzLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgbW9kZS5wcm9jZXNzQmxvY2soZGF0YS53b3Jkcywgb2Zmc2V0KTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlcjtcblx0ICAgICAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBYT1IgYW5kIGVuY3J5cHRcblx0ICAgICAgICAgICAgICAgIHhvckJsb2NrLmNhbGwodGhpcywgd29yZHMsIG9mZnNldCwgYmxvY2tTaXplKTtcblx0ICAgICAgICAgICAgICAgIGNpcGhlci5lbmNyeXB0QmxvY2sod29yZHMsIG9mZnNldCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbWVtYmVyIHRoaXMgYmxvY2sgdG8gdXNlIHdpdGggbmV4dCBibG9ja1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fcHJldkJsb2NrID0gd29yZHMuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBibG9ja1NpemUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDQkMgZGVjcnlwdG9yLlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIENCQy5EZWNyeXB0b3IgPSBDQkMuZXh0ZW5kKHtcblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIFByb2Nlc3NlcyB0aGUgZGF0YSBibG9jayBhdCBvZmZzZXQuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHdvcmRzIFRoZSBkYXRhIHdvcmRzIHRvIG9wZXJhdGUgb24uXG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgVGhlIG9mZnNldCB3aGVyZSB0aGUgYmxvY2sgc3RhcnRzLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgbW9kZS5wcm9jZXNzQmxvY2soZGF0YS53b3Jkcywgb2Zmc2V0KTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlcjtcblx0ICAgICAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBSZW1lbWJlciB0aGlzIGJsb2NrIHRvIHVzZSB3aXRoIG5leHQgYmxvY2tcblx0ICAgICAgICAgICAgICAgIHZhciB0aGlzQmxvY2sgPSB3b3Jkcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGJsb2NrU2l6ZSk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIERlY3J5cHQgYW5kIFhPUlxuXHQgICAgICAgICAgICAgICAgY2lwaGVyLmRlY3J5cHRCbG9jayh3b3Jkcywgb2Zmc2V0KTtcblx0ICAgICAgICAgICAgICAgIHhvckJsb2NrLmNhbGwodGhpcywgd29yZHMsIG9mZnNldCwgYmxvY2tTaXplKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gVGhpcyBibG9jayBiZWNvbWVzIHRoZSBwcmV2aW91cyBibG9ja1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fcHJldkJsb2NrID0gdGhpc0Jsb2NrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICBmdW5jdGlvbiB4b3JCbG9jayh3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGl2ID0gdGhpcy5faXY7XG5cblx0ICAgICAgICAgICAgLy8gQ2hvb3NlIG1peGluZyBibG9ja1xuXHQgICAgICAgICAgICBpZiAoaXYpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBibG9jayA9IGl2O1xuXG5cdCAgICAgICAgICAgICAgICAvLyBSZW1vdmUgSVYgZm9yIHN1YnNlcXVlbnQgYmxvY2tzXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9pdiA9IHVuZGVmaW5lZDtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHZhciBibG9jayA9IHRoaXMuX3ByZXZCbG9jaztcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFhPUiBibG9ja3Ncblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja1NpemU7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbb2Zmc2V0ICsgaV0gXj0gYmxvY2tbaV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gQ0JDO1xuXHQgICAgfSgpKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBQYWRkaW5nIG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfcGFkID0gQy5wYWQgPSB7fTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBQS0NTICM1LzcgcGFkZGluZyBzdHJhdGVneS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFBrY3M3ID0gQ19wYWQuUGtjczcgPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUGFkcyBkYXRhIHVzaW5nIHRoZSBhbGdvcml0aG0gZGVmaW5lZCBpbiBQS0NTICM1LzcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gZGF0YSBUaGUgZGF0YSB0byBwYWQuXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGJsb2NrU2l6ZSBUaGUgbXVsdGlwbGUgdGhhdCB0aGUgZGF0YSBzaG91bGQgYmUgcGFkZGVkIHRvLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBDcnlwdG9KUy5wYWQuUGtjczcucGFkKHdvcmRBcnJheSwgNCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFkOiBmdW5jdGlvbiAoZGF0YSwgYmxvY2tTaXplKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemVCeXRlcyA9IGJsb2NrU2l6ZSAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gQ291bnQgcGFkZGluZyBieXRlc1xuXHQgICAgICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGJsb2NrU2l6ZUJ5dGVzIC0gZGF0YS5zaWdCeXRlcyAlIGJsb2NrU2l6ZUJ5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENyZWF0ZSBwYWRkaW5nIHdvcmRcblx0ICAgICAgICAgICAgdmFyIHBhZGRpbmdXb3JkID0gKG5QYWRkaW5nQnl0ZXMgPDwgMjQpIHwgKG5QYWRkaW5nQnl0ZXMgPDwgMTYpIHwgKG5QYWRkaW5nQnl0ZXMgPDwgOCkgfCBuUGFkZGluZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENyZWF0ZSBwYWRkaW5nXG5cdCAgICAgICAgICAgIHZhciBwYWRkaW5nV29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuUGFkZGluZ0J5dGVzOyBpICs9IDQpIHtcblx0ICAgICAgICAgICAgICAgIHBhZGRpbmdXb3Jkcy5wdXNoKHBhZGRpbmdXb3JkKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB2YXIgcGFkZGluZyA9IFdvcmRBcnJheS5jcmVhdGUocGFkZGluZ1dvcmRzLCBuUGFkZGluZ0J5dGVzKTtcblxuXHQgICAgICAgICAgICAvLyBBZGQgcGFkZGluZ1xuXHQgICAgICAgICAgICBkYXRhLmNvbmNhdChwYWRkaW5nKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogVW5wYWRzIGRhdGEgdGhhdCBoYWQgYmVlbiBwYWRkZWQgdXNpbmcgdGhlIGFsZ29yaXRobSBkZWZpbmVkIGluIFBLQ1MgIzUvNy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBkYXRhIFRoZSBkYXRhIHRvIHVucGFkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBDcnlwdG9KUy5wYWQuUGtjczcudW5wYWQod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgICAgICAgLy8gR2V0IG51bWJlciBvZiBwYWRkaW5nIGJ5dGVzIGZyb20gbGFzdCBieXRlXG5cdCAgICAgICAgICAgIHZhciBuUGFkZGluZ0J5dGVzID0gZGF0YS53b3Jkc1soZGF0YS5zaWdCeXRlcyAtIDEpID4+PiAyXSAmIDB4ZmY7XG5cblx0ICAgICAgICAgICAgLy8gUmVtb3ZlIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyAtPSBuUGFkZGluZ0J5dGVzO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWJzdHJhY3QgYmFzZSBibG9jayBjaXBoZXIgdGVtcGxhdGUuXG5cdCAgICAgKlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGJsb2NrU2l6ZSBUaGUgbnVtYmVyIG9mIDMyLWJpdCB3b3JkcyB0aGlzIGNpcGhlciBvcGVyYXRlcyBvbi4gRGVmYXVsdDogNCAoMTI4IGJpdHMpXG5cdCAgICAgKi9cblx0ICAgIHZhciBCbG9ja0NpcGhlciA9IENfbGliLkJsb2NrQ2lwaGVyID0gQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtNb2RlfSBtb2RlIFRoZSBibG9jayBtb2RlIHRvIHVzZS4gRGVmYXVsdDogQ0JDXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtQYWRkaW5nfSBwYWRkaW5nIFRoZSBwYWRkaW5nIHN0cmF0ZWd5IHRvIHVzZS4gRGVmYXVsdDogUGtjczdcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjZmc6IENpcGhlci5jZmcuZXh0ZW5kKHtcblx0ICAgICAgICAgICAgbW9kZTogQ0JDLFxuXHQgICAgICAgICAgICBwYWRkaW5nOiBQa2NzN1xuXHQgICAgICAgIH0pLFxuXG5cdCAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gUmVzZXQgY2lwaGVyXG5cdCAgICAgICAgICAgIENpcGhlci5yZXNldC5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgY2ZnID0gdGhpcy5jZmc7XG5cdCAgICAgICAgICAgIHZhciBpdiA9IGNmZy5pdjtcblx0ICAgICAgICAgICAgdmFyIG1vZGUgPSBjZmcubW9kZTtcblxuXHQgICAgICAgICAgICAvLyBSZXNldCBibG9jayBtb2RlXG5cdCAgICAgICAgICAgIGlmICh0aGlzLl94Zm9ybU1vZGUgPT0gdGhpcy5fRU5DX1hGT1JNX01PREUpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBtb2RlQ3JlYXRvciA9IG1vZGUuY3JlYXRlRW5jcnlwdG9yO1xuXHQgICAgICAgICAgICB9IGVsc2UgLyogaWYgKHRoaXMuX3hmb3JtTW9kZSA9PSB0aGlzLl9ERUNfWEZPUk1fTU9ERSkgKi8ge1xuXHQgICAgICAgICAgICAgICAgdmFyIG1vZGVDcmVhdG9yID0gbW9kZS5jcmVhdGVEZWNyeXB0b3I7XG5cdCAgICAgICAgICAgICAgICAvLyBLZWVwIGF0IGxlYXN0IG9uZSBibG9jayBpbiB0aGUgYnVmZmVyIGZvciB1bnBhZGRpbmdcblx0ICAgICAgICAgICAgICAgIHRoaXMuX21pbkJ1ZmZlclNpemUgPSAxO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgaWYgKHRoaXMuX21vZGUgJiYgdGhpcy5fbW9kZS5fX2NyZWF0b3IgPT0gbW9kZUNyZWF0b3IpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX21vZGUuaW5pdCh0aGlzLCBpdiAmJiBpdi53b3Jkcyk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9tb2RlID0gbW9kZUNyZWF0b3IuY2FsbChtb2RlLCB0aGlzLCBpdiAmJiBpdi53b3Jkcyk7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9tb2RlLl9fY3JlYXRvciA9IG1vZGVDcmVhdG9yO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fbW9kZS5wcm9jZXNzQmxvY2sod29yZHMsIG9mZnNldCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBwYWRkaW5nID0gdGhpcy5jZmcucGFkZGluZztcblxuXHQgICAgICAgICAgICAvLyBGaW5hbGl6ZVxuXHQgICAgICAgICAgICBpZiAodGhpcy5feGZvcm1Nb2RlID09IHRoaXMuX0VOQ19YRk9STV9NT0RFKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBQYWQgZGF0YVxuXHQgICAgICAgICAgICAgICAgcGFkZGluZy5wYWQodGhpcy5fZGF0YSwgdGhpcy5ibG9ja1NpemUpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBQcm9jZXNzIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICAgICAgdmFyIGZpbmFsUHJvY2Vzc2VkQmxvY2tzID0gdGhpcy5fcHJvY2VzcyghISdmbHVzaCcpO1xuXHQgICAgICAgICAgICB9IGVsc2UgLyogaWYgKHRoaXMuX3hmb3JtTW9kZSA9PSB0aGlzLl9ERUNfWEZPUk1fTU9ERSkgKi8ge1xuXHQgICAgICAgICAgICAgICAgLy8gUHJvY2VzcyBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIHZhciBmaW5hbFByb2Nlc3NlZEJsb2NrcyA9IHRoaXMuX3Byb2Nlc3MoISEnZmx1c2gnKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gVW5wYWQgZGF0YVxuXHQgICAgICAgICAgICAgICAgcGFkZGluZy51bnBhZChmaW5hbFByb2Nlc3NlZEJsb2Nrcyk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gZmluYWxQcm9jZXNzZWRCbG9ja3M7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGJsb2NrU2l6ZTogMTI4LzMyXG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBIGNvbGxlY3Rpb24gb2YgY2lwaGVyIHBhcmFtZXRlcnMuXG5cdCAgICAgKlxuXHQgICAgICogQHByb3BlcnR5IHtXb3JkQXJyYXl9IGNpcGhlcnRleHQgVGhlIHJhdyBjaXBoZXJ0ZXh0LlxuXHQgICAgICogQHByb3BlcnR5IHtXb3JkQXJyYXl9IGtleSBUaGUga2V5IHRvIHRoaXMgY2lwaGVydGV4dC5cblx0ICAgICAqIEBwcm9wZXJ0eSB7V29yZEFycmF5fSBpdiBUaGUgSVYgdXNlZCBpbiB0aGUgY2lwaGVyaW5nIG9wZXJhdGlvbi5cblx0ICAgICAqIEBwcm9wZXJ0eSB7V29yZEFycmF5fSBzYWx0IFRoZSBzYWx0IHVzZWQgd2l0aCBhIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uLlxuXHQgICAgICogQHByb3BlcnR5IHtDaXBoZXJ9IGFsZ29yaXRobSBUaGUgY2lwaGVyIGFsZ29yaXRobS5cblx0ICAgICAqIEBwcm9wZXJ0eSB7TW9kZX0gbW9kZSBUaGUgYmxvY2sgbW9kZSB1c2VkIGluIHRoZSBjaXBoZXJpbmcgb3BlcmF0aW9uLlxuXHQgICAgICogQHByb3BlcnR5IHtQYWRkaW5nfSBwYWRkaW5nIFRoZSBwYWRkaW5nIHNjaGVtZSB1c2VkIGluIHRoZSBjaXBoZXJpbmcgb3BlcmF0aW9uLlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGJsb2NrU2l6ZSBUaGUgYmxvY2sgc2l6ZSBvZiB0aGUgY2lwaGVyLlxuXHQgICAgICogQHByb3BlcnR5IHtGb3JtYXR9IGZvcm1hdHRlciBUaGUgZGVmYXVsdCBmb3JtYXR0aW5nIHN0cmF0ZWd5IHRvIGNvbnZlcnQgdGhpcyBjaXBoZXIgcGFyYW1zIG9iamVjdCB0byBhIHN0cmluZy5cblx0ICAgICAqL1xuXHQgICAgdmFyIENpcGhlclBhcmFtcyA9IENfbGliLkNpcGhlclBhcmFtcyA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2lwaGVyUGFyYW1zIEFuIG9iamVjdCB3aXRoIGFueSBvZiB0aGUgcG9zc2libGUgY2lwaGVyIHBhcmFtZXRlcnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXJQYXJhbXMgPSBDcnlwdG9KUy5saWIuQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7XG5cdCAgICAgICAgICogICAgICAgICBjaXBoZXJ0ZXh0OiBjaXBoZXJ0ZXh0V29yZEFycmF5LFxuXHQgICAgICAgICAqICAgICAgICAga2V5OiBrZXlXb3JkQXJyYXksXG5cdCAgICAgICAgICogICAgICAgICBpdjogaXZXb3JkQXJyYXksXG5cdCAgICAgICAgICogICAgICAgICBzYWx0OiBzYWx0V29yZEFycmF5LFxuXHQgICAgICAgICAqICAgICAgICAgYWxnb3JpdGhtOiBDcnlwdG9KUy5hbGdvLkFFUyxcblx0ICAgICAgICAgKiAgICAgICAgIG1vZGU6IENyeXB0b0pTLm1vZGUuQ0JDLFxuXHQgICAgICAgICAqICAgICAgICAgcGFkZGluZzogQ3J5cHRvSlMucGFkLlBLQ1M3LFxuXHQgICAgICAgICAqICAgICAgICAgYmxvY2tTaXplOiA0LFxuXHQgICAgICAgICAqICAgICAgICAgZm9ybWF0dGVyOiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTFxuXHQgICAgICAgICAqICAgICB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2lwaGVyUGFyYW1zKSB7XG5cdCAgICAgICAgICAgIHRoaXMubWl4SW4oY2lwaGVyUGFyYW1zKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgdGhpcyBjaXBoZXIgcGFyYW1zIG9iamVjdCB0byBhIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Rm9ybWF0fSBmb3JtYXR0ZXIgKE9wdGlvbmFsKSBUaGUgZm9ybWF0dGluZyBzdHJhdGVneSB0byB1c2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmdpZmllZCBjaXBoZXIgcGFyYW1zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHRocm93cyBFcnJvciBJZiBuZWl0aGVyIHRoZSBmb3JtYXR0ZXIgbm9yIHRoZSBkZWZhdWx0IGZvcm1hdHRlciBpcyBzZXQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSBjaXBoZXJQYXJhbXMgKyAnJztcblx0ICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IGNpcGhlclBhcmFtcy50b1N0cmluZygpO1xuXHQgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gY2lwaGVyUGFyYW1zLnRvU3RyaW5nKENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gKGZvcm1hdHRlcikge1xuXHQgICAgICAgICAgICByZXR1cm4gKGZvcm1hdHRlciB8fCB0aGlzLmZvcm1hdHRlcikuc3RyaW5naWZ5KHRoaXMpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEZvcm1hdCBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2Zvcm1hdCA9IEMuZm9ybWF0ID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogT3BlblNTTCBmb3JtYXR0aW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgT3BlblNTTEZvcm1hdHRlciA9IENfZm9ybWF0Lk9wZW5TU0wgPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBjaXBoZXIgcGFyYW1zIG9iamVjdCB0byBhbiBPcGVuU1NMLWNvbXBhdGlibGUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN9IGNpcGhlclBhcmFtcyBUaGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBPcGVuU1NMLWNvbXBhdGlibGUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgb3BlblNTTFN0cmluZyA9IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMLnN0cmluZ2lmeShjaXBoZXJQYXJhbXMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKGNpcGhlclBhcmFtcykge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBjaXBoZXJQYXJhbXMuY2lwaGVydGV4dDtcblx0ICAgICAgICAgICAgdmFyIHNhbHQgPSBjaXBoZXJQYXJhbXMuc2FsdDtcblxuXHQgICAgICAgICAgICAvLyBGb3JtYXRcblx0ICAgICAgICAgICAgaWYgKHNhbHQpIHtcblx0ICAgICAgICAgICAgICAgIHZhciB3b3JkQXJyYXkgPSBXb3JkQXJyYXkuY3JlYXRlKFsweDUzNjE2Yzc0LCAweDY1NjQ1ZjVmXSkuY29uY2F0KHNhbHQpLmNvbmNhdChjaXBoZXJ0ZXh0KTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHZhciB3b3JkQXJyYXkgPSBjaXBoZXJ0ZXh0O1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIHdvcmRBcnJheS50b1N0cmluZyhCYXNlNjQpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhbiBPcGVuU1NMLWNvbXBhdGlibGUgc3RyaW5nIHRvIGEgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3BlblNTTFN0ciBUaGUgT3BlblNTTC1jb21wYXRpYmxlIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gVGhlIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVyUGFyYW1zID0gQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wucGFyc2Uob3BlblNTTFN0cmluZyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIChvcGVuU1NMU3RyKSB7XG5cdCAgICAgICAgICAgIC8vIFBhcnNlIGJhc2U2NFxuXHQgICAgICAgICAgICB2YXIgY2lwaGVydGV4dCA9IEJhc2U2NC5wYXJzZShvcGVuU1NMU3RyKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgY2lwaGVydGV4dFdvcmRzID0gY2lwaGVydGV4dC53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBUZXN0IGZvciBzYWx0XG5cdCAgICAgICAgICAgIGlmIChjaXBoZXJ0ZXh0V29yZHNbMF0gPT0gMHg1MzYxNmM3NCAmJiBjaXBoZXJ0ZXh0V29yZHNbMV0gPT0gMHg2NTY0NWY1Zikge1xuXHQgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBzYWx0XG5cdCAgICAgICAgICAgICAgICB2YXIgc2FsdCA9IFdvcmRBcnJheS5jcmVhdGUoY2lwaGVydGV4dFdvcmRzLnNsaWNlKDIsIDQpKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHNhbHQgZnJvbSBjaXBoZXJ0ZXh0XG5cdCAgICAgICAgICAgICAgICBjaXBoZXJ0ZXh0V29yZHMuc3BsaWNlKDAsIDQpO1xuXHQgICAgICAgICAgICAgICAgY2lwaGVydGV4dC5zaWdCeXRlcyAtPSAxNjtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBDaXBoZXJQYXJhbXMuY3JlYXRlKHsgY2lwaGVydGV4dDogY2lwaGVydGV4dCwgc2FsdDogc2FsdCB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEEgY2lwaGVyIHdyYXBwZXIgdGhhdCByZXR1cm5zIGNpcGhlcnRleHQgYXMgYSBzZXJpYWxpemFibGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgKi9cblx0ICAgIHZhciBTZXJpYWxpemFibGVDaXBoZXIgPSBDX2xpYi5TZXJpYWxpemFibGVDaXBoZXIgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtGb3JtYXR0ZXJ9IGZvcm1hdCBUaGUgZm9ybWF0dGluZyBzdHJhdGVneSB0byBjb252ZXJ0IGNpcGhlciBwYXJhbSBvYmplY3RzIHRvIGFuZCBmcm9tIGEgc3RyaW5nLiBEZWZhdWx0OiBPcGVuU1NMXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgICAgIGZvcm1hdDogT3BlblNTTEZvcm1hdHRlclxuXHQgICAgICAgIH0pLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRW5jcnlwdHMgYSBtZXNzYWdlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBUaGUgY2lwaGVyIGFsZ29yaXRobSB0byB1c2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGVuY3J5cHQuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IEEgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlNlcmlhbGl6YWJsZUNpcGhlci5lbmNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBtZXNzYWdlLCBrZXkpO1xuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwga2V5LCB7IGl2OiBpdiB9KTtcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuU2VyaWFsaXphYmxlQ2lwaGVyLmVuY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIG1lc3NhZ2UsIGtleSwgeyBpdjogaXYsIGZvcm1hdDogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZW5jcnlwdDogZnVuY3Rpb24gKGNpcGhlciwgbWVzc2FnZSwga2V5LCBjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIGNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXG5cdCAgICAgICAgICAgIC8vIEVuY3J5cHRcblx0ICAgICAgICAgICAgdmFyIGVuY3J5cHRvciA9IGNpcGhlci5jcmVhdGVFbmNyeXB0b3Ioa2V5LCBjZmcpO1xuXHQgICAgICAgICAgICB2YXIgY2lwaGVydGV4dCA9IGVuY3J5cHRvci5maW5hbGl6ZShtZXNzYWdlKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgY2lwaGVyQ2ZnID0gZW5jcnlwdG9yLmNmZztcblxuXHQgICAgICAgICAgICAvLyBDcmVhdGUgYW5kIHJldHVybiBzZXJpYWxpemFibGUgY2lwaGVyIHBhcmFtc1xuXHQgICAgICAgICAgICByZXR1cm4gQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7XG5cdCAgICAgICAgICAgICAgICBjaXBoZXJ0ZXh0OiBjaXBoZXJ0ZXh0LFxuXHQgICAgICAgICAgICAgICAga2V5OiBrZXksXG5cdCAgICAgICAgICAgICAgICBpdjogY2lwaGVyQ2ZnLml2LFxuXHQgICAgICAgICAgICAgICAgYWxnb3JpdGhtOiBjaXBoZXIsXG5cdCAgICAgICAgICAgICAgICBtb2RlOiBjaXBoZXJDZmcubW9kZSxcblx0ICAgICAgICAgICAgICAgIHBhZGRpbmc6IGNpcGhlckNmZy5wYWRkaW5nLFxuXHQgICAgICAgICAgICAgICAgYmxvY2tTaXplOiBjaXBoZXIuYmxvY2tTaXplLFxuXHQgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBjZmcuZm9ybWF0XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBEZWNyeXB0cyBzZXJpYWxpemVkIGNpcGhlcnRleHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIFRoZSBjaXBoZXIgYWxnb3JpdGhtIHRvIHVzZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlclBhcmFtc3xzdHJpbmd9IGNpcGhlcnRleHQgVGhlIGNpcGhlcnRleHQgdG8gZGVjcnlwdC5cblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHBsYWludGV4dC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgZm9ybWF0dGVkQ2lwaGVydGV4dCwga2V5LCB7IGl2OiBpdiwgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTtcblx0ICAgICAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgY2lwaGVydGV4dFBhcmFtcywga2V5LCB7IGl2OiBpdiwgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBkZWNyeXB0OiBmdW5jdGlvbiAoY2lwaGVyLCBjaXBoZXJ0ZXh0LCBrZXksIGNmZykge1xuXHQgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcblx0ICAgICAgICAgICAgY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydCBzdHJpbmcgdG8gQ2lwaGVyUGFyYW1zXG5cdCAgICAgICAgICAgIGNpcGhlcnRleHQgPSB0aGlzLl9wYXJzZShjaXBoZXJ0ZXh0LCBjZmcuZm9ybWF0KTtcblxuXHQgICAgICAgICAgICAvLyBEZWNyeXB0XG5cdCAgICAgICAgICAgIHZhciBwbGFpbnRleHQgPSBjaXBoZXIuY3JlYXRlRGVjcnlwdG9yKGtleSwgY2ZnKS5maW5hbGl6ZShjaXBoZXJ0ZXh0LmNpcGhlcnRleHQpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBwbGFpbnRleHQ7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIHNlcmlhbGl6ZWQgY2lwaGVydGV4dCB0byBDaXBoZXJQYXJhbXMsXG5cdCAgICAgICAgICogZWxzZSBhc3N1bWVkIENpcGhlclBhcmFtcyBhbHJlYWR5IGFuZCByZXR1cm5zIGNpcGhlcnRleHQgdW5jaGFuZ2VkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN8c3RyaW5nfSBjaXBoZXJ0ZXh0IFRoZSBjaXBoZXJ0ZXh0LlxuXHQgICAgICAgICAqIEBwYXJhbSB7Rm9ybWF0dGVyfSBmb3JtYXQgVGhlIGZvcm1hdHRpbmcgc3RyYXRlZ3kgdG8gdXNlIHRvIHBhcnNlIHNlcmlhbGl6ZWQgY2lwaGVydGV4dC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gVGhlIHVuc2VyaWFsaXplZCBjaXBoZXJ0ZXh0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuX3BhcnNlKGNpcGhlcnRleHRTdHJpbmdPclBhcmFtcywgZm9ybWF0KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBfcGFyc2U6IGZ1bmN0aW9uIChjaXBoZXJ0ZXh0LCBmb3JtYXQpIHtcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBjaXBoZXJ0ZXh0ID09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0LnBhcnNlKGNpcGhlcnRleHQsIHRoaXMpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGNpcGhlcnRleHQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBLZXkgZGVyaXZhdGlvbiBmdW5jdGlvbiBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2tkZiA9IEMua2RmID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogT3BlblNTTCBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbi5cblx0ICAgICAqL1xuXHQgICAgdmFyIE9wZW5TU0xLZGYgPSBDX2tkZi5PcGVuU1NMID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIERlcml2ZXMgYSBrZXkgYW5kIElWIGZyb20gYSBwYXNzd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQgdG8gZGVyaXZlIGZyb20uXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGtleVNpemUgVGhlIHNpemUgaW4gd29yZHMgb2YgdGhlIGtleSB0byBnZW5lcmF0ZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gaXZTaXplIFRoZSBzaXplIGluIHdvcmRzIG9mIHRoZSBJViB0byBnZW5lcmF0ZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHNhbHQgKE9wdGlvbmFsKSBBIDY0LWJpdCBzYWx0IHRvIHVzZS4gSWYgb21pdHRlZCwgYSBzYWx0IHdpbGwgYmUgZ2VuZXJhdGVkIHJhbmRvbWx5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBBIGNpcGhlciBwYXJhbXMgb2JqZWN0IHdpdGggdGhlIGtleSwgSVYsIGFuZCBzYWx0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IENyeXB0b0pTLmtkZi5PcGVuU1NMLmV4ZWN1dGUoJ1Bhc3N3b3JkJywgMjU2LzMyLCAxMjgvMzIpO1xuXHQgICAgICAgICAqICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IENyeXB0b0pTLmtkZi5PcGVuU1NMLmV4ZWN1dGUoJ1Bhc3N3b3JkJywgMjU2LzMyLCAxMjgvMzIsICdzYWx0c2FsdCcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGV4ZWN1dGU6IGZ1bmN0aW9uIChwYXNzd29yZCwga2V5U2l6ZSwgaXZTaXplLCBzYWx0KSB7XG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIHJhbmRvbSBzYWx0XG5cdCAgICAgICAgICAgIGlmICghc2FsdCkge1xuXHQgICAgICAgICAgICAgICAgc2FsdCA9IFdvcmRBcnJheS5yYW5kb20oNjQvOCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBEZXJpdmUga2V5IGFuZCBJVlxuXHQgICAgICAgICAgICB2YXIga2V5ID0gRXZwS0RGLmNyZWF0ZSh7IGtleVNpemU6IGtleVNpemUgKyBpdlNpemUgfSkuY29tcHV0ZShwYXNzd29yZCwgc2FsdCk7XG5cblx0ICAgICAgICAgICAgLy8gU2VwYXJhdGUga2V5IGFuZCBJVlxuXHQgICAgICAgICAgICB2YXIgaXYgPSBXb3JkQXJyYXkuY3JlYXRlKGtleS53b3Jkcy5zbGljZShrZXlTaXplKSwgaXZTaXplICogNCk7XG5cdCAgICAgICAgICAgIGtleS5zaWdCeXRlcyA9IGtleVNpemUgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBwYXJhbXNcblx0ICAgICAgICAgICAgcmV0dXJuIENpcGhlclBhcmFtcy5jcmVhdGUoeyBrZXk6IGtleSwgaXY6IGl2LCBzYWx0OiBzYWx0IH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIC8qKlxuXHQgICAgICogQSBzZXJpYWxpemFibGUgY2lwaGVyIHdyYXBwZXIgdGhhdCBkZXJpdmVzIHRoZSBrZXkgZnJvbSBhIHBhc3N3b3JkLFxuXHQgICAgICogYW5kIHJldHVybnMgY2lwaGVydGV4dCBhcyBhIHNlcmlhbGl6YWJsZSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAqL1xuXHQgICAgdmFyIFBhc3N3b3JkQmFzZWRDaXBoZXIgPSBDX2xpYi5QYXNzd29yZEJhc2VkQ2lwaGVyID0gU2VyaWFsaXphYmxlQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtLREZ9IGtkZiBUaGUga2V5IGRlcml2YXRpb24gZnVuY3Rpb24gdG8gdXNlIHRvIGdlbmVyYXRlIGEga2V5IGFuZCBJViBmcm9tIGEgcGFzc3dvcmQuIERlZmF1bHQ6IE9wZW5TU0xcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjZmc6IFNlcmlhbGl6YWJsZUNpcGhlci5jZmcuZXh0ZW5kKHtcblx0ICAgICAgICAgICAga2RmOiBPcGVuU1NMS2RmXG5cdCAgICAgICAgfSksXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBFbmNyeXB0cyBhIG1lc3NhZ2UgdXNpbmcgYSBwYXNzd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgVGhlIGNpcGhlciBhbGdvcml0aG0gdG8gdXNlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBlbmNyeXB0LlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gQSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuUGFzc3dvcmRCYXNlZENpcGhlci5lbmNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBtZXNzYWdlLCAncGFzc3dvcmQnKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuUGFzc3dvcmRCYXNlZENpcGhlci5lbmNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBtZXNzYWdlLCAncGFzc3dvcmQnLCB7IGZvcm1hdDogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZW5jcnlwdDogZnVuY3Rpb24gKGNpcGhlciwgbWVzc2FnZSwgcGFzc3dvcmQsIGNmZykge1xuXHQgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcblx0ICAgICAgICAgICAgY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gRGVyaXZlIGtleSBhbmQgb3RoZXIgcGFyYW1zXG5cdCAgICAgICAgICAgIHZhciBkZXJpdmVkUGFyYW1zID0gY2ZnLmtkZi5leGVjdXRlKHBhc3N3b3JkLCBjaXBoZXIua2V5U2l6ZSwgY2lwaGVyLml2U2l6ZSk7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIElWIHRvIGNvbmZpZ1xuXHQgICAgICAgICAgICBjZmcuaXYgPSBkZXJpdmVkUGFyYW1zLml2O1xuXG5cdCAgICAgICAgICAgIC8vIEVuY3J5cHRcblx0ICAgICAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBTZXJpYWxpemFibGVDaXBoZXIuZW5jcnlwdC5jYWxsKHRoaXMsIGNpcGhlciwgbWVzc2FnZSwgZGVyaXZlZFBhcmFtcy5rZXksIGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gTWl4IGluIGRlcml2ZWQgcGFyYW1zXG5cdCAgICAgICAgICAgIGNpcGhlcnRleHQubWl4SW4oZGVyaXZlZFBhcmFtcyk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNpcGhlcnRleHQ7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIERlY3J5cHRzIHNlcmlhbGl6ZWQgY2lwaGVydGV4dCB1c2luZyBhIHBhc3N3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBUaGUgY2lwaGVyIGFsZ29yaXRobSB0byB1c2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN8c3RyaW5nfSBjaXBoZXJ0ZXh0IFRoZSBjaXBoZXJ0ZXh0IHRvIGRlY3J5cHQuXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC5cblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcGxhaW50ZXh0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgcGxhaW50ZXh0ID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgZm9ybWF0dGVkQ2lwaGVydGV4dCwgJ3Bhc3N3b3JkJywgeyBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pO1xuXHQgICAgICAgICAqICAgICB2YXIgcGxhaW50ZXh0ID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgY2lwaGVydGV4dFBhcmFtcywgJ3Bhc3N3b3JkJywgeyBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGRlY3J5cHQ6IGZ1bmN0aW9uIChjaXBoZXIsIGNpcGhlcnRleHQsIHBhc3N3b3JkLCBjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIGNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIENpcGhlclBhcmFtc1xuXHQgICAgICAgICAgICBjaXBoZXJ0ZXh0ID0gdGhpcy5fcGFyc2UoY2lwaGVydGV4dCwgY2ZnLmZvcm1hdCk7XG5cblx0ICAgICAgICAgICAgLy8gRGVyaXZlIGtleSBhbmQgb3RoZXIgcGFyYW1zXG5cdCAgICAgICAgICAgIHZhciBkZXJpdmVkUGFyYW1zID0gY2ZnLmtkZi5leGVjdXRlKHBhc3N3b3JkLCBjaXBoZXIua2V5U2l6ZSwgY2lwaGVyLml2U2l6ZSwgY2lwaGVydGV4dC5zYWx0KTtcblxuXHQgICAgICAgICAgICAvLyBBZGQgSVYgdG8gY29uZmlnXG5cdCAgICAgICAgICAgIGNmZy5pdiA9IGRlcml2ZWRQYXJhbXMuaXY7XG5cblx0ICAgICAgICAgICAgLy8gRGVjcnlwdFxuXHQgICAgICAgICAgICB2YXIgcGxhaW50ZXh0ID0gU2VyaWFsaXphYmxlQ2lwaGVyLmRlY3J5cHQuY2FsbCh0aGlzLCBjaXBoZXIsIGNpcGhlcnRleHQsIGRlcml2ZWRQYXJhbXMua2V5LCBjZmcpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBwbGFpbnRleHQ7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdH0oKSk7XG5cblxuXHQvKipcblx0ICogQ2lwaGVyIEZlZWRiYWNrIGJsb2NrIG1vZGUuXG5cdCAqL1xuXHRDcnlwdG9KUy5tb2RlLkNGQiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgQ0ZCID0gQ3J5cHRvSlMubGliLkJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTtcblxuXHQgICAgQ0ZCLkVuY3J5cHRvciA9IENGQi5leHRlbmQoe1xuXHQgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXI7XG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplO1xuXG5cdCAgICAgICAgICAgIGdlbmVyYXRlS2V5c3RyZWFtQW5kRW5jcnlwdC5jYWxsKHRoaXMsIHdvcmRzLCBvZmZzZXQsIGJsb2NrU2l6ZSwgY2lwaGVyKTtcblxuXHQgICAgICAgICAgICAvLyBSZW1lbWJlciB0aGlzIGJsb2NrIHRvIHVzZSB3aXRoIG5leHQgYmxvY2tcblx0ICAgICAgICAgICAgdGhpcy5fcHJldkJsb2NrID0gd29yZHMuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBibG9ja1NpemUpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBDRkIuRGVjcnlwdG9yID0gQ0ZCLmV4dGVuZCh7XG5cdCAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlcjtcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cblx0ICAgICAgICAgICAgLy8gUmVtZW1iZXIgdGhpcyBibG9jayB0byB1c2Ugd2l0aCBuZXh0IGJsb2NrXG5cdCAgICAgICAgICAgIHZhciB0aGlzQmxvY2sgPSB3b3Jkcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGJsb2NrU2l6ZSk7XG5cblx0ICAgICAgICAgICAgZ2VuZXJhdGVLZXlzdHJlYW1BbmRFbmNyeXB0LmNhbGwodGhpcywgd29yZHMsIG9mZnNldCwgYmxvY2tTaXplLCBjaXBoZXIpO1xuXG5cdCAgICAgICAgICAgIC8vIFRoaXMgYmxvY2sgYmVjb21lcyB0aGUgcHJldmlvdXMgYmxvY2tcblx0ICAgICAgICAgICAgdGhpcy5fcHJldkJsb2NrID0gdGhpc0Jsb2NrO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBmdW5jdGlvbiBnZW5lcmF0ZUtleXN0cmVhbUFuZEVuY3J5cHQod29yZHMsIG9mZnNldCwgYmxvY2tTaXplLCBjaXBoZXIpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgIHZhciBpdiA9IHRoaXMuX2l2O1xuXG5cdCAgICAgICAgLy8gR2VuZXJhdGUga2V5c3RyZWFtXG5cdCAgICAgICAgaWYgKGl2KSB7XG5cdCAgICAgICAgICAgIHZhciBrZXlzdHJlYW0gPSBpdi5zbGljZSgwKTtcblxuXHQgICAgICAgICAgICAvLyBSZW1vdmUgSVYgZm9yIHN1YnNlcXVlbnQgYmxvY2tzXG5cdCAgICAgICAgICAgIHRoaXMuX2l2ID0gdW5kZWZpbmVkO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHZhciBrZXlzdHJlYW0gPSB0aGlzLl9wcmV2QmxvY2s7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNpcGhlci5lbmNyeXB0QmxvY2soa2V5c3RyZWFtLCAwKTtcblxuXHQgICAgICAgIC8vIEVuY3J5cHRcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7XG5cdCAgICAgICAgICAgIHdvcmRzW29mZnNldCArIGldIF49IGtleXN0cmVhbVtpXTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBDRkI7XG5cdH0oKSk7XG5cblxuXHQvKipcblx0ICogRWxlY3Ryb25pYyBDb2RlYm9vayBibG9jayBtb2RlLlxuXHQgKi9cblx0Q3J5cHRvSlMubW9kZS5FQ0IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIEVDQiA9IENyeXB0b0pTLmxpYi5CbG9ja0NpcGhlck1vZGUuZXh0ZW5kKCk7XG5cblx0ICAgIEVDQi5FbmNyeXB0b3IgPSBFQ0IuZXh0ZW5kKHtcblx0ICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2sod29yZHMsIG9mZnNldCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIEVDQi5EZWNyeXB0b3IgPSBFQ0IuZXh0ZW5kKHtcblx0ICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2NpcGhlci5kZWNyeXB0QmxvY2sod29yZHMsIG9mZnNldCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIHJldHVybiBFQ0I7XG5cdH0oKSk7XG5cblxuXHQvKipcblx0ICogQU5TSSBYLjkyMyBwYWRkaW5nIHN0cmF0ZWd5LlxuXHQgKi9cblx0Q3J5cHRvSlMucGFkLkFuc2lYOTIzID0ge1xuXHQgICAgcGFkOiBmdW5jdGlvbiAoZGF0YSwgYmxvY2tTaXplKSB7XG5cdCAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgdmFyIGRhdGFTaWdCeXRlcyA9IGRhdGEuc2lnQnl0ZXM7XG5cdCAgICAgICAgdmFyIGJsb2NrU2l6ZUJ5dGVzID0gYmxvY2tTaXplICogNDtcblxuXHQgICAgICAgIC8vIENvdW50IHBhZGRpbmcgYnl0ZXNcblx0ICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGJsb2NrU2l6ZUJ5dGVzIC0gZGF0YVNpZ0J5dGVzICUgYmxvY2tTaXplQnl0ZXM7XG5cblx0ICAgICAgICAvLyBDb21wdXRlIGxhc3QgYnl0ZSBwb3NpdGlvblxuXHQgICAgICAgIHZhciBsYXN0Qnl0ZVBvcyA9IGRhdGFTaWdCeXRlcyArIG5QYWRkaW5nQnl0ZXMgLSAxO1xuXG5cdCAgICAgICAgLy8gUGFkXG5cdCAgICAgICAgZGF0YS5jbGFtcCgpO1xuXHQgICAgICAgIGRhdGEud29yZHNbbGFzdEJ5dGVQb3MgPj4+IDJdIHw9IG5QYWRkaW5nQnl0ZXMgPDwgKDI0IC0gKGxhc3RCeXRlUG9zICUgNCkgKiA4KTtcblx0ICAgICAgICBkYXRhLnNpZ0J5dGVzICs9IG5QYWRkaW5nQnl0ZXM7XG5cdCAgICB9LFxuXG5cdCAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgICAvLyBHZXQgbnVtYmVyIG9mIHBhZGRpbmcgYnl0ZXMgZnJvbSBsYXN0IGJ5dGVcblx0ICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGRhdGEud29yZHNbKGRhdGEuc2lnQnl0ZXMgLSAxKSA+Pj4gMl0gJiAweGZmO1xuXG5cdCAgICAgICAgLy8gUmVtb3ZlIHBhZGRpbmdcblx0ICAgICAgICBkYXRhLnNpZ0J5dGVzIC09IG5QYWRkaW5nQnl0ZXM7XG5cdCAgICB9XG5cdH07XG5cblxuXHQvKipcblx0ICogSVNPIDEwMTI2IHBhZGRpbmcgc3RyYXRlZ3kuXG5cdCAqL1xuXHRDcnlwdG9KUy5wYWQuSXNvMTAxMjYgPSB7XG5cdCAgICBwYWQ6IGZ1bmN0aW9uIChkYXRhLCBibG9ja1NpemUpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgIHZhciBibG9ja1NpemVCeXRlcyA9IGJsb2NrU2l6ZSAqIDQ7XG5cblx0ICAgICAgICAvLyBDb3VudCBwYWRkaW5nIGJ5dGVzXG5cdCAgICAgICAgdmFyIG5QYWRkaW5nQnl0ZXMgPSBibG9ja1NpemVCeXRlcyAtIGRhdGEuc2lnQnl0ZXMgJSBibG9ja1NpemVCeXRlcztcblxuXHQgICAgICAgIC8vIFBhZFxuXHQgICAgICAgIGRhdGEuY29uY2F0KENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkucmFuZG9tKG5QYWRkaW5nQnl0ZXMgLSAxKSkuXG5cdCAgICAgICAgICAgICBjb25jYXQoQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoW25QYWRkaW5nQnl0ZXMgPDwgMjRdLCAxKSk7XG5cdCAgICB9LFxuXG5cdCAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgICAvLyBHZXQgbnVtYmVyIG9mIHBhZGRpbmcgYnl0ZXMgZnJvbSBsYXN0IGJ5dGVcblx0ICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGRhdGEud29yZHNbKGRhdGEuc2lnQnl0ZXMgLSAxKSA+Pj4gMl0gJiAweGZmO1xuXG5cdCAgICAgICAgLy8gUmVtb3ZlIHBhZGRpbmdcblx0ICAgICAgICBkYXRhLnNpZ0J5dGVzIC09IG5QYWRkaW5nQnl0ZXM7XG5cdCAgICB9XG5cdH07XG5cblxuXHQvKipcblx0ICogSVNPL0lFQyA5Nzk3LTEgUGFkZGluZyBNZXRob2QgMi5cblx0ICovXG5cdENyeXB0b0pTLnBhZC5Jc285Nzk3MSA9IHtcblx0ICAgIHBhZDogZnVuY3Rpb24gKGRhdGEsIGJsb2NrU2l6ZSkge1xuXHQgICAgICAgIC8vIEFkZCAweDgwIGJ5dGVcblx0ICAgICAgICBkYXRhLmNvbmNhdChDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZShbMHg4MDAwMDAwMF0sIDEpKTtcblxuXHQgICAgICAgIC8vIFplcm8gcGFkIHRoZSByZXN0XG5cdCAgICAgICAgQ3J5cHRvSlMucGFkLlplcm9QYWRkaW5nLnBhZChkYXRhLCBibG9ja1NpemUpO1xuXHQgICAgfSxcblxuXHQgICAgdW5wYWQ6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgLy8gUmVtb3ZlIHplcm8gcGFkZGluZ1xuXHQgICAgICAgIENyeXB0b0pTLnBhZC5aZXJvUGFkZGluZy51bnBhZChkYXRhKTtcblxuXHQgICAgICAgIC8vIFJlbW92ZSBvbmUgbW9yZSBieXRlIC0tIHRoZSAweDgwIGJ5dGVcblx0ICAgICAgICBkYXRhLnNpZ0J5dGVzLS07XG5cdCAgICB9XG5cdH07XG5cblxuXHQvKipcblx0ICogT3V0cHV0IEZlZWRiYWNrIGJsb2NrIG1vZGUuXG5cdCAqL1xuXHRDcnlwdG9KUy5tb2RlLk9GQiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgT0ZCID0gQ3J5cHRvSlMubGliLkJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTtcblxuXHQgICAgdmFyIEVuY3J5cHRvciA9IE9GQi5FbmNyeXB0b3IgPSBPRkIuZXh0ZW5kKHtcblx0ICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyXG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplO1xuXHQgICAgICAgICAgICB2YXIgaXYgPSB0aGlzLl9pdjtcblx0ICAgICAgICAgICAgdmFyIGtleXN0cmVhbSA9IHRoaXMuX2tleXN0cmVhbTtcblxuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSBrZXlzdHJlYW1cblx0ICAgICAgICAgICAgaWYgKGl2KSB7XG5cdCAgICAgICAgICAgICAgICBrZXlzdHJlYW0gPSB0aGlzLl9rZXlzdHJlYW0gPSBpdi5zbGljZSgwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIElWIGZvciBzdWJzZXF1ZW50IGJsb2Nrc1xuXHQgICAgICAgICAgICAgICAgdGhpcy5faXYgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgY2lwaGVyLmVuY3J5cHRCbG9jayhrZXlzdHJlYW0sIDApO1xuXG5cdCAgICAgICAgICAgIC8vIEVuY3J5cHRcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja1NpemU7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbb2Zmc2V0ICsgaV0gXj0ga2V5c3RyZWFtW2ldO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIE9GQi5EZWNyeXB0b3IgPSBFbmNyeXB0b3I7XG5cblx0ICAgIHJldHVybiBPRkI7XG5cdH0oKSk7XG5cblxuXHQvKipcblx0ICogQSBub29wIHBhZGRpbmcgc3RyYXRlZ3kuXG5cdCAqL1xuXHRDcnlwdG9KUy5wYWQuTm9QYWRkaW5nID0ge1xuXHQgICAgcGFkOiBmdW5jdGlvbiAoKSB7XG5cdCAgICB9LFxuXG5cdCAgICB1bnBhZDogZnVuY3Rpb24gKCkge1xuXHQgICAgfVxuXHR9O1xuXG5cblx0KGZ1bmN0aW9uICh1bmRlZmluZWQpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIENpcGhlclBhcmFtcyA9IENfbGliLkNpcGhlclBhcmFtcztcblx0ICAgIHZhciBDX2VuYyA9IEMuZW5jO1xuXHQgICAgdmFyIEhleCA9IENfZW5jLkhleDtcblx0ICAgIHZhciBDX2Zvcm1hdCA9IEMuZm9ybWF0O1xuXG5cdCAgICB2YXIgSGV4Rm9ybWF0dGVyID0gQ19mb3JtYXQuSGV4ID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIHRoZSBjaXBoZXJ0ZXh0IG9mIGEgY2lwaGVyIHBhcmFtcyBvYmplY3QgdG8gYSBoZXhhZGVjaW1hbGx5IGVuY29kZWQgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN9IGNpcGhlclBhcmFtcyBUaGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBoZXhhZGVjaW1hbGx5IGVuY29kZWQgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgaGV4U3RyaW5nID0gQ3J5cHRvSlMuZm9ybWF0LkhleC5zdHJpbmdpZnkoY2lwaGVyUGFyYW1zKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uIChjaXBoZXJQYXJhbXMpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGNpcGhlclBhcmFtcy5jaXBoZXJ0ZXh0LnRvU3RyaW5nKEhleCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgaGV4YWRlY2ltYWxseSBlbmNvZGVkIGNpcGhlcnRleHQgc3RyaW5nIHRvIGEgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgVGhlIGhleGFkZWNpbWFsbHkgZW5jb2RlZCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IFRoZSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlclBhcmFtcyA9IENyeXB0b0pTLmZvcm1hdC5IZXgucGFyc2UoaGV4U3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKGlucHV0KSB7XG5cdCAgICAgICAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gSGV4LnBhcnNlKGlucHV0KTtcblx0ICAgICAgICAgICAgcmV0dXJuIENpcGhlclBhcmFtcy5jcmVhdGUoeyBjaXBoZXJ0ZXh0OiBjaXBoZXJ0ZXh0IH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdH0oKSk7XG5cblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQmxvY2tDaXBoZXIgPSBDX2xpYi5CbG9ja0NpcGhlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIExvb2t1cCB0YWJsZXNcblx0ICAgIHZhciBTQk9YID0gW107XG5cdCAgICB2YXIgSU5WX1NCT1ggPSBbXTtcblx0ICAgIHZhciBTVUJfTUlYXzAgPSBbXTtcblx0ICAgIHZhciBTVUJfTUlYXzEgPSBbXTtcblx0ICAgIHZhciBTVUJfTUlYXzIgPSBbXTtcblx0ICAgIHZhciBTVUJfTUlYXzMgPSBbXTtcblx0ICAgIHZhciBJTlZfU1VCX01JWF8wID0gW107XG5cdCAgICB2YXIgSU5WX1NVQl9NSVhfMSA9IFtdO1xuXHQgICAgdmFyIElOVl9TVUJfTUlYXzIgPSBbXTtcblx0ICAgIHZhciBJTlZfU1VCX01JWF8zID0gW107XG5cblx0ICAgIC8vIENvbXB1dGUgbG9va3VwIHRhYmxlc1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAvLyBDb21wdXRlIGRvdWJsZSB0YWJsZVxuXHQgICAgICAgIHZhciBkID0gW107XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuXHQgICAgICAgICAgICBpZiAoaSA8IDEyOCkge1xuXHQgICAgICAgICAgICAgICAgZFtpXSA9IGkgPDwgMTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGRbaV0gPSAoaSA8PCAxKSBeIDB4MTFiO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gV2FsayBHRigyXjgpXG5cdCAgICAgICAgdmFyIHggPSAwO1xuXHQgICAgICAgIHZhciB4aSA9IDA7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuXHQgICAgICAgICAgICAvLyBDb21wdXRlIHNib3hcblx0ICAgICAgICAgICAgdmFyIHN4ID0geGkgXiAoeGkgPDwgMSkgXiAoeGkgPDwgMikgXiAoeGkgPDwgMykgXiAoeGkgPDwgNCk7XG5cdCAgICAgICAgICAgIHN4ID0gKHN4ID4+PiA4KSBeIChzeCAmIDB4ZmYpIF4gMHg2Mztcblx0ICAgICAgICAgICAgU0JPWFt4XSA9IHN4O1xuXHQgICAgICAgICAgICBJTlZfU0JPWFtzeF0gPSB4O1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgbXVsdGlwbGljYXRpb25cblx0ICAgICAgICAgICAgdmFyIHgyID0gZFt4XTtcblx0ICAgICAgICAgICAgdmFyIHg0ID0gZFt4Ml07XG5cdCAgICAgICAgICAgIHZhciB4OCA9IGRbeDRdO1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgc3ViIGJ5dGVzLCBtaXggY29sdW1ucyB0YWJsZXNcblx0ICAgICAgICAgICAgdmFyIHQgPSAoZFtzeF0gKiAweDEwMSkgXiAoc3ggKiAweDEwMTAxMDApO1xuXHQgICAgICAgICAgICBTVUJfTUlYXzBbeF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOCk7XG5cdCAgICAgICAgICAgIFNVQl9NSVhfMVt4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNik7XG5cdCAgICAgICAgICAgIFNVQl9NSVhfMlt4XSA9ICh0IDw8IDgpICB8ICh0ID4+PiAyNCk7XG5cdCAgICAgICAgICAgIFNVQl9NSVhfM1t4XSA9IHQ7XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBpbnYgc3ViIGJ5dGVzLCBpbnYgbWl4IGNvbHVtbnMgdGFibGVzXG5cdCAgICAgICAgICAgIHZhciB0ID0gKHg4ICogMHgxMDEwMTAxKSBeICh4NCAqIDB4MTAwMDEpIF4gKHgyICogMHgxMDEpIF4gKHggKiAweDEwMTAxMDApO1xuXHQgICAgICAgICAgICBJTlZfU1VCX01JWF8wW3N4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KTtcblx0ICAgICAgICAgICAgSU5WX1NVQl9NSVhfMVtzeF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpO1xuXHQgICAgICAgICAgICBJTlZfU1VCX01JWF8yW3N4XSA9ICh0IDw8IDgpICB8ICh0ID4+PiAyNCk7XG5cdCAgICAgICAgICAgIElOVl9TVUJfTUlYXzNbc3hdID0gdDtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIG5leHQgY291bnRlclxuXHQgICAgICAgICAgICBpZiAoIXgpIHtcblx0ICAgICAgICAgICAgICAgIHggPSB4aSA9IDE7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB4ID0geDIgXiBkW2RbZFt4OCBeIHgyXV1dO1xuXHQgICAgICAgICAgICAgICAgeGkgXj0gZFtkW3hpXV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvLyBQcmVjb21wdXRlZCBSY29uIGxvb2t1cFxuXHQgICAgdmFyIFJDT04gPSBbMHgwMCwgMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNl07XG5cblx0ICAgIC8qKlxuXHQgICAgICogQUVTIGJsb2NrIGNpcGhlciBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBBRVMgPSBDX2FsZ28uQUVTID0gQmxvY2tDaXBoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTa2lwIHJlc2V0IG9mIG5Sb3VuZHMgaGFzIGJlZW4gc2V0IGJlZm9yZSBhbmQga2V5IGRpZCBub3QgY2hhbmdlXG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9uUm91bmRzICYmIHRoaXMuX2tleVByaW9yUmVzZXQgPT09IHRoaXMuX2tleSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXlQcmlvclJlc2V0ID0gdGhpcy5fa2V5O1xuXHQgICAgICAgICAgICB2YXIga2V5V29yZHMgPSBrZXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBrZXlTaXplID0ga2V5LnNpZ0J5dGVzIC8gNDtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIG51bWJlciBvZiByb3VuZHNcblx0ICAgICAgICAgICAgdmFyIG5Sb3VuZHMgPSB0aGlzLl9uUm91bmRzID0ga2V5U2l6ZSArIDY7XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBudW1iZXIgb2Yga2V5IHNjaGVkdWxlIHJvd3Ncblx0ICAgICAgICAgICAgdmFyIGtzUm93cyA9IChuUm91bmRzICsgMSkgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUga2V5IHNjaGVkdWxlXG5cdCAgICAgICAgICAgIHZhciBrZXlTY2hlZHVsZSA9IHRoaXMuX2tleVNjaGVkdWxlID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGtzUm93ID0gMDsga3NSb3cgPCBrc1Jvd3M7IGtzUm93KyspIHtcblx0ICAgICAgICAgICAgICAgIGlmIChrc1JvdyA8IGtleVNpemUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBrZXlTY2hlZHVsZVtrc1Jvd10gPSBrZXlXb3Jkc1trc1Jvd107XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ga2V5U2NoZWR1bGVba3NSb3cgLSAxXTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlmICghKGtzUm93ICUga2V5U2l6ZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gUm90IHdvcmRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdCA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWIgd29yZFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0ID0gKFNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsodCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbdCAmIDB4ZmZdO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1peCBSY29uXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHQgXj0gUkNPTlsoa3NSb3cgLyBrZXlTaXplKSB8IDBdIDw8IDI0O1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5U2l6ZSA+IDYgJiYga3NSb3cgJSBrZXlTaXplID09IDQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3ViIHdvcmRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdCA9IChTQk9YW3QgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsodCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3QgJiAweGZmXTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICBrZXlTY2hlZHVsZVtrc1Jvd10gPSBrZXlTY2hlZHVsZVtrc1JvdyAtIGtleVNpemVdIF4gdDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgaW52IGtleSBzY2hlZHVsZVxuXHQgICAgICAgICAgICB2YXIgaW52S2V5U2NoZWR1bGUgPSB0aGlzLl9pbnZLZXlTY2hlZHVsZSA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpbnZLc1JvdyA9IDA7IGludktzUm93IDwga3NSb3dzOyBpbnZLc1JvdysrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIga3NSb3cgPSBrc1Jvd3MgLSBpbnZLc1JvdztcblxuXHQgICAgICAgICAgICAgICAgaWYgKGludktzUm93ICUgNCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ga2V5U2NoZWR1bGVba3NSb3ddO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGtleVNjaGVkdWxlW2tzUm93IC0gNF07XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGlmIChpbnZLc1JvdyA8IDQgfHwga3NSb3cgPD0gNCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGludktleVNjaGVkdWxlW2ludktzUm93XSA9IHQ7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIGludktleVNjaGVkdWxlW2ludktzUm93XSA9IElOVl9TVUJfTUlYXzBbU0JPWFt0ID4+PiAyNF1dIF4gSU5WX1NVQl9NSVhfMVtTQk9YWyh0ID4+PiAxNikgJiAweGZmXV0gXlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElOVl9TVUJfTUlYXzJbU0JPWFsodCA+Pj4gOCkgJiAweGZmXV0gXiBJTlZfU1VCX01JWF8zW1NCT1hbdCAmIDB4ZmZdXTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBlbmNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZG9DcnlwdEJsb2NrKE0sIG9mZnNldCwgdGhpcy5fa2V5U2NoZWR1bGUsIFNVQl9NSVhfMCwgU1VCX01JWF8xLCBTVUJfTUlYXzIsIFNVQl9NSVhfMywgU0JPWCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGRlY3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTd2FwIDJuZCBhbmQgNHRoIHJvd3Ncblx0ICAgICAgICAgICAgdmFyIHQgPSBNW29mZnNldCArIDFdO1xuXHQgICAgICAgICAgICBNW29mZnNldCArIDFdID0gTVtvZmZzZXQgKyAzXTtcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAzXSA9IHQ7XG5cblx0ICAgICAgICAgICAgdGhpcy5fZG9DcnlwdEJsb2NrKE0sIG9mZnNldCwgdGhpcy5faW52S2V5U2NoZWR1bGUsIElOVl9TVUJfTUlYXzAsIElOVl9TVUJfTUlYXzEsIElOVl9TVUJfTUlYXzIsIElOVl9TVUJfTUlYXzMsIElOVl9TQk9YKTtcblxuXHQgICAgICAgICAgICAvLyBJbnYgc3dhcCAybmQgYW5kIDR0aCByb3dzXG5cdCAgICAgICAgICAgIHZhciB0ID0gTVtvZmZzZXQgKyAxXTtcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAxXSA9IE1bb2Zmc2V0ICsgM107XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0ICsgM10gPSB0O1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9DcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0LCBrZXlTY2hlZHVsZSwgU1VCX01JWF8wLCBTVUJfTUlYXzEsIFNVQl9NSVhfMiwgU1VCX01JWF8zLCBTQk9YKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBuUm91bmRzID0gdGhpcy5fblJvdW5kcztcblxuXHQgICAgICAgICAgICAvLyBHZXQgaW5wdXQsIGFkZCByb3VuZCBrZXlcblx0ICAgICAgICAgICAgdmFyIHMwID0gTVtvZmZzZXRdICAgICBeIGtleVNjaGVkdWxlWzBdO1xuXHQgICAgICAgICAgICB2YXIgczEgPSBNW29mZnNldCArIDFdIF4ga2V5U2NoZWR1bGVbMV07XG5cdCAgICAgICAgICAgIHZhciBzMiA9IE1bb2Zmc2V0ICsgMl0gXiBrZXlTY2hlZHVsZVsyXTtcblx0ICAgICAgICAgICAgdmFyIHMzID0gTVtvZmZzZXQgKyAzXSBeIGtleVNjaGVkdWxlWzNdO1xuXG5cdCAgICAgICAgICAgIC8vIEtleSBzY2hlZHVsZSByb3cgY291bnRlclxuXHQgICAgICAgICAgICB2YXIga3NSb3cgPSA0O1xuXG5cdCAgICAgICAgICAgIC8vIFJvdW5kc1xuXHQgICAgICAgICAgICBmb3IgKHZhciByb3VuZCA9IDE7IHJvdW5kIDwgblJvdW5kczsgcm91bmQrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hpZnQgcm93cywgc3ViIGJ5dGVzLCBtaXggY29sdW1ucywgYWRkIHJvdW5kIGtleVxuXHQgICAgICAgICAgICAgICAgdmFyIHQwID0gU1VCX01JWF8wW3MwID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMxID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczIgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczMgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxID0gU1VCX01JWF8wW3MxID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMyID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczMgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczAgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQyID0gU1VCX01JWF8wW3MyID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMzID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczAgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczEgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQzID0gU1VCX01JWF8wW3MzID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMwID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczEgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczIgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBVcGRhdGUgc3RhdGVcblx0ICAgICAgICAgICAgICAgIHMwID0gdDA7XG5cdCAgICAgICAgICAgICAgICBzMSA9IHQxO1xuXHQgICAgICAgICAgICAgICAgczIgPSB0Mjtcblx0ICAgICAgICAgICAgICAgIHMzID0gdDM7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBTaGlmdCByb3dzLCBzdWIgYnl0ZXMsIGFkZCByb3VuZCBrZXlcblx0ICAgICAgICAgICAgdmFyIHQwID0gKChTQk9YW3MwID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMxID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczIgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MzICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK107XG5cdCAgICAgICAgICAgIHZhciB0MSA9ICgoU0JPWFtzMSA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMiA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMzID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMCAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICB2YXIgdDIgPSAoKFNCT1hbczIgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczMgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczEgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXTtcblx0ICAgICAgICAgICAgdmFyIHQzID0gKChTQk9YW3MzID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMwID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczEgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MyICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK107XG5cblx0ICAgICAgICAgICAgLy8gU2V0IG91dHB1dFxuXHQgICAgICAgICAgICBNW29mZnNldF0gICAgID0gdDA7XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0ICsgMV0gPSB0MTtcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAyXSA9IHQyO1xuXHQgICAgICAgICAgICBNW29mZnNldCArIDNdID0gdDM7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGtleVNpemU6IDI1Ni8zMlxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuQUVTLmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuQUVTLmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpO1xuXHQgICAgICovXG5cdCAgICBDLkFFUyA9IEJsb2NrQ2lwaGVyLl9jcmVhdGVIZWxwZXIoQUVTKTtcblx0fSgpKTtcblxuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQmxvY2tDaXBoZXIgPSBDX2xpYi5CbG9ja0NpcGhlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIFBlcm11dGVkIENob2ljZSAxIGNvbnN0YW50c1xuXHQgICAgdmFyIFBDMSA9IFtcblx0ICAgICAgICA1NywgNDksIDQxLCAzMywgMjUsIDE3LCA5LCAgMSxcblx0ICAgICAgICA1OCwgNTAsIDQyLCAzNCwgMjYsIDE4LCAxMCwgMixcblx0ICAgICAgICA1OSwgNTEsIDQzLCAzNSwgMjcsIDE5LCAxMSwgMyxcblx0ICAgICAgICA2MCwgNTIsIDQ0LCAzNiwgNjMsIDU1LCA0NywgMzksXG5cdCAgICAgICAgMzEsIDIzLCAxNSwgNywgIDYyLCA1NCwgNDYsIDM4LFxuXHQgICAgICAgIDMwLCAyMiwgMTQsIDYsICA2MSwgNTMsIDQ1LCAzNyxcblx0ICAgICAgICAyOSwgMjEsIDEzLCA1LCAgMjgsIDIwLCAxMiwgNFxuXHQgICAgXTtcblxuXHQgICAgLy8gUGVybXV0ZWQgQ2hvaWNlIDIgY29uc3RhbnRzXG5cdCAgICB2YXIgUEMyID0gW1xuXHQgICAgICAgIDE0LCAxNywgMTEsIDI0LCAxLCAgNSxcblx0ICAgICAgICAzLCAgMjgsIDE1LCA2LCAgMjEsIDEwLFxuXHQgICAgICAgIDIzLCAxOSwgMTIsIDQsICAyNiwgOCxcblx0ICAgICAgICAxNiwgNywgIDI3LCAyMCwgMTMsIDIsXG5cdCAgICAgICAgNDEsIDUyLCAzMSwgMzcsIDQ3LCA1NSxcblx0ICAgICAgICAzMCwgNDAsIDUxLCA0NSwgMzMsIDQ4LFxuXHQgICAgICAgIDQ0LCA0OSwgMzksIDU2LCAzNCwgNTMsXG5cdCAgICAgICAgNDYsIDQyLCA1MCwgMzYsIDI5LCAzMlxuXHQgICAgXTtcblxuXHQgICAgLy8gQ3VtdWxhdGl2ZSBiaXQgc2hpZnQgY29uc3RhbnRzXG5cdCAgICB2YXIgQklUX1NISUZUUyA9IFsxLCAgMiwgIDQsICA2LCAgOCwgIDEwLCAxMiwgMTQsIDE1LCAxNywgMTksIDIxLCAyMywgMjUsIDI3LCAyOF07XG5cblx0ICAgIC8vIFNCT1hlcyBhbmQgcm91bmQgcGVybXV0YXRpb24gY29uc3RhbnRzXG5cdCAgICB2YXIgU0JPWF9QID0gW1xuXHQgICAgICAgIHtcblx0ICAgICAgICAgICAgMHgwOiAweDgwODIwMCxcblx0ICAgICAgICAgICAgMHgxMDAwMDAwMDogMHg4MDAwLFxuXHQgICAgICAgICAgICAweDIwMDAwMDAwOiAweDgwODAwMixcblx0ICAgICAgICAgICAgMHgzMDAwMDAwMDogMHgyLFxuXHQgICAgICAgICAgICAweDQwMDAwMDAwOiAweDIwMCxcblx0ICAgICAgICAgICAgMHg1MDAwMDAwMDogMHg4MDgyMDIsXG5cdCAgICAgICAgICAgIDB4NjAwMDAwMDA6IDB4ODAwMjAyLFxuXHQgICAgICAgICAgICAweDcwMDAwMDAwOiAweDgwMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwMDogMHgyMDIsXG5cdCAgICAgICAgICAgIDB4OTAwMDAwMDA6IDB4ODAwMjAwLFxuXHQgICAgICAgICAgICAweGEwMDAwMDAwOiAweDgyMDAsXG5cdCAgICAgICAgICAgIDB4YjAwMDAwMDA6IDB4ODA4MDAwLFxuXHQgICAgICAgICAgICAweGMwMDAwMDAwOiAweDgwMDIsXG5cdCAgICAgICAgICAgIDB4ZDAwMDAwMDA6IDB4ODAwMDAyLFxuXHQgICAgICAgICAgICAweGUwMDAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4ZjAwMDAwMDA6IDB4ODIwMixcblx0ICAgICAgICAgICAgMHg4MDAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MTgwMDAwMDA6IDB4ODA4MjAyLFxuXHQgICAgICAgICAgICAweDI4MDAwMDAwOiAweDgyMDIsXG5cdCAgICAgICAgICAgIDB4MzgwMDAwMDA6IDB4ODAwMCxcblx0ICAgICAgICAgICAgMHg0ODAwMDAwMDogMHg4MDgyMDAsXG5cdCAgICAgICAgICAgIDB4NTgwMDAwMDA6IDB4MjAwLFxuXHQgICAgICAgICAgICAweDY4MDAwMDAwOiAweDgwODAwMixcblx0ICAgICAgICAgICAgMHg3ODAwMDAwMDogMHgyLFxuXHQgICAgICAgICAgICAweDg4MDAwMDAwOiAweDgwMDIwMCxcblx0ICAgICAgICAgICAgMHg5ODAwMDAwMDogMHg4MjAwLFxuXHQgICAgICAgICAgICAweGE4MDAwMDAwOiAweDgwODAwMCxcblx0ICAgICAgICAgICAgMHhiODAwMDAwMDogMHg4MDAyMDIsXG5cdCAgICAgICAgICAgIDB4YzgwMDAwMDA6IDB4ODAwMDAyLFxuXHQgICAgICAgICAgICAweGQ4MDAwMDAwOiAweDgwMDIsXG5cdCAgICAgICAgICAgIDB4ZTgwMDAwMDA6IDB4MjAyLFxuXHQgICAgICAgICAgICAweGY4MDAwMDAwOiAweDgwMDAwMCxcblx0ICAgICAgICAgICAgMHgxOiAweDgwMDAsXG5cdCAgICAgICAgICAgIDB4MTAwMDAwMDE6IDB4Mixcblx0ICAgICAgICAgICAgMHgyMDAwMDAwMTogMHg4MDgyMDAsXG5cdCAgICAgICAgICAgIDB4MzAwMDAwMDE6IDB4ODAwMDAwLFxuXHQgICAgICAgICAgICAweDQwMDAwMDAxOiAweDgwODAwMixcblx0ICAgICAgICAgICAgMHg1MDAwMDAwMTogMHg4MjAwLFxuXHQgICAgICAgICAgICAweDYwMDAwMDAxOiAweDIwMCxcblx0ICAgICAgICAgICAgMHg3MDAwMDAwMTogMHg4MDAyMDIsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDE6IDB4ODA4MjAyLFxuXHQgICAgICAgICAgICAweDkwMDAwMDAxOiAweDgwODAwMCxcblx0ICAgICAgICAgICAgMHhhMDAwMDAwMTogMHg4MDAwMDIsXG5cdCAgICAgICAgICAgIDB4YjAwMDAwMDE6IDB4ODIwMixcblx0ICAgICAgICAgICAgMHhjMDAwMDAwMTogMHgyMDIsXG5cdCAgICAgICAgICAgIDB4ZDAwMDAwMDE6IDB4ODAwMjAwLFxuXHQgICAgICAgICAgICAweGUwMDAwMDAxOiAweDgwMDIsXG5cdCAgICAgICAgICAgIDB4ZjAwMDAwMDE6IDB4MCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxOiAweDgwODIwMixcblx0ICAgICAgICAgICAgMHgxODAwMDAwMTogMHg4MDgwMDAsXG5cdCAgICAgICAgICAgIDB4MjgwMDAwMDE6IDB4ODAwMDAwLFxuXHQgICAgICAgICAgICAweDM4MDAwMDAxOiAweDIwMCxcblx0ICAgICAgICAgICAgMHg0ODAwMDAwMTogMHg4MDAwLFxuXHQgICAgICAgICAgICAweDU4MDAwMDAxOiAweDgwMDAwMixcblx0ICAgICAgICAgICAgMHg2ODAwMDAwMTogMHgyLFxuXHQgICAgICAgICAgICAweDc4MDAwMDAxOiAweDgyMDIsXG5cdCAgICAgICAgICAgIDB4ODgwMDAwMDE6IDB4ODAwMixcblx0ICAgICAgICAgICAgMHg5ODAwMDAwMTogMHg4MDAyMDIsXG5cdCAgICAgICAgICAgIDB4YTgwMDAwMDE6IDB4MjAyLFxuXHQgICAgICAgICAgICAweGI4MDAwMDAxOiAweDgwODIwMCxcblx0ICAgICAgICAgICAgMHhjODAwMDAwMTogMHg4MDAyMDAsXG5cdCAgICAgICAgICAgIDB4ZDgwMDAwMDE6IDB4MCxcblx0ICAgICAgICAgICAgMHhlODAwMDAwMTogMHg4MjAwLFxuXHQgICAgICAgICAgICAweGY4MDAwMDAxOiAweDgwODAwMlxuXHQgICAgICAgIH0sXG5cdCAgICAgICAge1xuXHQgICAgICAgICAgICAweDA6IDB4NDAwODQwMTAsXG5cdCAgICAgICAgICAgIDB4MTAwMDAwMDogMHg0MDAwLFxuXHQgICAgICAgICAgICAweDIwMDAwMDA6IDB4ODAwMDAsXG5cdCAgICAgICAgICAgIDB4MzAwMDAwMDogMHg0MDA4MDAxMCxcblx0ICAgICAgICAgICAgMHg0MDAwMDAwOiAweDQwMDAwMDEwLFxuXHQgICAgICAgICAgICAweDUwMDAwMDA6IDB4NDAwODQwMDAsXG5cdCAgICAgICAgICAgIDB4NjAwMDAwMDogMHg0MDAwNDAwMCxcblx0ICAgICAgICAgICAgMHg3MDAwMDAwOiAweDEwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA6IDB4ODQwMDAsXG5cdCAgICAgICAgICAgIDB4OTAwMDAwMDogMHg0MDAwNDAxMCxcblx0ICAgICAgICAgICAgMHhhMDAwMDAwOiAweDQwMDAwMDAwLFxuXHQgICAgICAgICAgICAweGIwMDAwMDA6IDB4ODQwMTAsXG5cdCAgICAgICAgICAgIDB4YzAwMDAwMDogMHg4MDAxMCxcblx0ICAgICAgICAgICAgMHhkMDAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4ZTAwMDAwMDogMHg0MDEwLFxuXHQgICAgICAgICAgICAweGYwMDAwMDA6IDB4NDAwODAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwOiAweDQwMDA0MDAwLFxuXHQgICAgICAgICAgICAweDE4MDAwMDA6IDB4ODQwMTAsXG5cdCAgICAgICAgICAgIDB4MjgwMDAwMDogMHgxMCxcblx0ICAgICAgICAgICAgMHgzODAwMDAwOiAweDQwMDA0MDEwLFxuXHQgICAgICAgICAgICAweDQ4MDAwMDA6IDB4NDAwODQwMTAsXG5cdCAgICAgICAgICAgIDB4NTgwMDAwMDogMHg0MDAwMDAwMCxcblx0ICAgICAgICAgICAgMHg2ODAwMDAwOiAweDgwMDAwLFxuXHQgICAgICAgICAgICAweDc4MDAwMDA6IDB4NDAwODAwMTAsXG5cdCAgICAgICAgICAgIDB4ODgwMDAwMDogMHg4MDAxMCxcblx0ICAgICAgICAgICAgMHg5ODAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4YTgwMDAwMDogMHg0MDAwLFxuXHQgICAgICAgICAgICAweGI4MDAwMDA6IDB4NDAwODAwMDAsXG5cdCAgICAgICAgICAgIDB4YzgwMDAwMDogMHg0MDAwMDAxMCxcblx0ICAgICAgICAgICAgMHhkODAwMDAwOiAweDg0MDAwLFxuXHQgICAgICAgICAgICAweGU4MDAwMDA6IDB4NDAwODQwMDAsXG5cdCAgICAgICAgICAgIDB4ZjgwMDAwMDogMHg0MDEwLFxuXHQgICAgICAgICAgICAweDEwMDAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MTEwMDAwMDA6IDB4NDAwODAwMTAsXG5cdCAgICAgICAgICAgIDB4MTIwMDAwMDA6IDB4NDAwMDQwMTAsXG5cdCAgICAgICAgICAgIDB4MTMwMDAwMDA6IDB4NDAwODQwMDAsXG5cdCAgICAgICAgICAgIDB4MTQwMDAwMDA6IDB4NDAwODAwMDAsXG5cdCAgICAgICAgICAgIDB4MTUwMDAwMDA6IDB4MTAsXG5cdCAgICAgICAgICAgIDB4MTYwMDAwMDA6IDB4ODQwMTAsXG5cdCAgICAgICAgICAgIDB4MTcwMDAwMDA6IDB4NDAwMCxcblx0ICAgICAgICAgICAgMHgxODAwMDAwMDogMHg0MDEwLFxuXHQgICAgICAgICAgICAweDE5MDAwMDAwOiAweDgwMDAwLFxuXHQgICAgICAgICAgICAweDFhMDAwMDAwOiAweDgwMDEwLFxuXHQgICAgICAgICAgICAweDFiMDAwMDAwOiAweDQwMDAwMDEwLFxuXHQgICAgICAgICAgICAweDFjMDAwMDAwOiAweDg0MDAwLFxuXHQgICAgICAgICAgICAweDFkMDAwMDAwOiAweDQwMDA0MDAwLFxuXHQgICAgICAgICAgICAweDFlMDAwMDAwOiAweDQwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDFmMDAwMDAwOiAweDQwMDg0MDEwLFxuXHQgICAgICAgICAgICAweDEwODAwMDAwOiAweDg0MDEwLFxuXHQgICAgICAgICAgICAweDExODAwMDAwOiAweDgwMDAwLFxuXHQgICAgICAgICAgICAweDEyODAwMDAwOiAweDQwMDgwMDAwLFxuXHQgICAgICAgICAgICAweDEzODAwMDAwOiAweDQwMDAsXG5cdCAgICAgICAgICAgIDB4MTQ4MDAwMDA6IDB4NDAwMDQwMDAsXG5cdCAgICAgICAgICAgIDB4MTU4MDAwMDA6IDB4NDAwODQwMTAsXG5cdCAgICAgICAgICAgIDB4MTY4MDAwMDA6IDB4MTAsXG5cdCAgICAgICAgICAgIDB4MTc4MDAwMDA6IDB4NDAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTg4MDAwMDA6IDB4NDAwODQwMDAsXG5cdCAgICAgICAgICAgIDB4MTk4MDAwMDA6IDB4NDAwMDAwMTAsXG5cdCAgICAgICAgICAgIDB4MWE4MDAwMDA6IDB4NDAwMDQwMTAsXG5cdCAgICAgICAgICAgIDB4MWI4MDAwMDA6IDB4ODAwMTAsXG5cdCAgICAgICAgICAgIDB4MWM4MDAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxZDgwMDAwMDogMHg0MDEwLFxuXHQgICAgICAgICAgICAweDFlODAwMDAwOiAweDQwMDgwMDEwLFxuXHQgICAgICAgICAgICAweDFmODAwMDAwOiAweDg0MDAwXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHgxMDQsXG5cdCAgICAgICAgICAgIDB4MTAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MjAwMDAwOiAweDQwMDAxMDAsXG5cdCAgICAgICAgICAgIDB4MzAwMDAwOiAweDEwMTA0LFxuXHQgICAgICAgICAgICAweDQwMDAwMDogMHgxMDAwNCxcblx0ICAgICAgICAgICAgMHg1MDAwMDA6IDB4NDAwMDAwNCxcblx0ICAgICAgICAgICAgMHg2MDAwMDA6IDB4NDAxMDEwNCxcblx0ICAgICAgICAgICAgMHg3MDAwMDA6IDB4NDAxMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDA6IDB4NDAwMDAwMCxcblx0ICAgICAgICAgICAgMHg5MDAwMDA6IDB4NDAxMDEwMCxcblx0ICAgICAgICAgICAgMHhhMDAwMDA6IDB4MTAxMDAsXG5cdCAgICAgICAgICAgIDB4YjAwMDAwOiAweDQwMTAwMDQsXG5cdCAgICAgICAgICAgIDB4YzAwMDAwOiAweDQwMDAxMDQsXG5cdCAgICAgICAgICAgIDB4ZDAwMDAwOiAweDEwMDAwLFxuXHQgICAgICAgICAgICAweGUwMDAwMDogMHg0LFxuXHQgICAgICAgICAgICAweGYwMDAwMDogMHgxMDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDA6IDB4NDAxMDEwMCxcblx0ICAgICAgICAgICAgMHgxODAwMDA6IDB4NDAxMDAwNCxcblx0ICAgICAgICAgICAgMHgyODAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgzODAwMDA6IDB4NDAwMDEwMCxcblx0ICAgICAgICAgICAgMHg0ODAwMDA6IDB4NDAwMDAwNCxcblx0ICAgICAgICAgICAgMHg1ODAwMDA6IDB4MTAwMDAsXG5cdCAgICAgICAgICAgIDB4NjgwMDAwOiAweDEwMDA0LFxuXHQgICAgICAgICAgICAweDc4MDAwMDogMHgxMDQsXG5cdCAgICAgICAgICAgIDB4ODgwMDAwOiAweDQsXG5cdCAgICAgICAgICAgIDB4OTgwMDAwOiAweDEwMCxcblx0ICAgICAgICAgICAgMHhhODAwMDA6IDB4NDAxMDAwMCxcblx0ICAgICAgICAgICAgMHhiODAwMDA6IDB4MTAxMDQsXG5cdCAgICAgICAgICAgIDB4YzgwMDAwOiAweDEwMTAwLFxuXHQgICAgICAgICAgICAweGQ4MDAwMDogMHg0MDAwMTA0LFxuXHQgICAgICAgICAgICAweGU4MDAwMDogMHg0MDEwMTA0LFxuXHQgICAgICAgICAgICAweGY4MDAwMDogMHg0MDAwMDAwLFxuXHQgICAgICAgICAgICAweDEwMDAwMDA6IDB4NDAxMDEwMCxcblx0ICAgICAgICAgICAgMHgxMTAwMDAwOiAweDEwMDA0LFxuXHQgICAgICAgICAgICAweDEyMDAwMDA6IDB4MTAwMDAsXG5cdCAgICAgICAgICAgIDB4MTMwMDAwMDogMHg0MDAwMTAwLFxuXHQgICAgICAgICAgICAweDE0MDAwMDA6IDB4MTAwLFxuXHQgICAgICAgICAgICAweDE1MDAwMDA6IDB4NDAxMDEwNCxcblx0ICAgICAgICAgICAgMHgxNjAwMDAwOiAweDQwMDAwMDQsXG5cdCAgICAgICAgICAgIDB4MTcwMDAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDE4MDAwMDA6IDB4NDAwMDEwNCxcblx0ICAgICAgICAgICAgMHgxOTAwMDAwOiAweDQwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWEwMDAwMDogMHg0LFxuXHQgICAgICAgICAgICAweDFiMDAwMDA6IDB4MTAxMDAsXG5cdCAgICAgICAgICAgIDB4MWMwMDAwMDogMHg0MDEwMDAwLFxuXHQgICAgICAgICAgICAweDFkMDAwMDA6IDB4MTA0LFxuXHQgICAgICAgICAgICAweDFlMDAwMDA6IDB4MTAxMDQsXG5cdCAgICAgICAgICAgIDB4MWYwMDAwMDogMHg0MDEwMDA0LFxuXHQgICAgICAgICAgICAweDEwODAwMDA6IDB4NDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMTgwMDAwOiAweDEwNCxcblx0ICAgICAgICAgICAgMHgxMjgwMDAwOiAweDQwMTAxMDAsXG5cdCAgICAgICAgICAgIDB4MTM4MDAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDE0ODAwMDA6IDB4MTAwMDQsXG5cdCAgICAgICAgICAgIDB4MTU4MDAwMDogMHg0MDAwMTAwLFxuXHQgICAgICAgICAgICAweDE2ODAwMDA6IDB4MTAwLFxuXHQgICAgICAgICAgICAweDE3ODAwMDA6IDB4NDAxMDAwNCxcblx0ICAgICAgICAgICAgMHgxODgwMDAwOiAweDEwMDAwLFxuXHQgICAgICAgICAgICAweDE5ODAwMDA6IDB4NDAxMDEwNCxcblx0ICAgICAgICAgICAgMHgxYTgwMDAwOiAweDEwMTA0LFxuXHQgICAgICAgICAgICAweDFiODAwMDA6IDB4NDAwMDAwNCxcblx0ICAgICAgICAgICAgMHgxYzgwMDAwOiAweDQwMDAxMDQsXG5cdCAgICAgICAgICAgIDB4MWQ4MDAwMDogMHg0MDEwMDAwLFxuXHQgICAgICAgICAgICAweDFlODAwMDA6IDB4NCxcblx0ICAgICAgICAgICAgMHgxZjgwMDAwOiAweDEwMTAwXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHg4MDQwMTAwMCxcblx0ICAgICAgICAgICAgMHgxMDAwMDogMHg4MDAwMTA0MCxcblx0ICAgICAgICAgICAgMHgyMDAwMDogMHg0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4MzAwMDA6IDB4ODA0MDAwMDAsXG5cdCAgICAgICAgICAgIDB4NDAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHg1MDAwMDogMHg0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4NjAwMDA6IDB4ODAwMDAwNDAsXG5cdCAgICAgICAgICAgIDB4NzAwMDA6IDB4NDAwMDQwLFxuXHQgICAgICAgICAgICAweDgwMDAwOiAweDgwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDkwMDAwOiAweDQwMDAwMCxcblx0ICAgICAgICAgICAgMHhhMDAwMDogMHg0MCxcblx0ICAgICAgICAgICAgMHhiMDAwMDogMHg4MDAwMTAwMCxcblx0ICAgICAgICAgICAgMHhjMDAwMDogMHg4MDQwMDA0MCxcblx0ICAgICAgICAgICAgMHhkMDAwMDogMHgxMDQwLFxuXHQgICAgICAgICAgICAweGUwMDAwOiAweDEwMDAsXG5cdCAgICAgICAgICAgIDB4ZjAwMDA6IDB4ODA0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDogMHg4MDAwMTA0MCxcblx0ICAgICAgICAgICAgMHgxODAwMDogMHg0MCxcblx0ICAgICAgICAgICAgMHgyODAwMDogMHg4MDQwMDA0MCxcblx0ICAgICAgICAgICAgMHgzODAwMDogMHg4MDAwMTAwMCxcblx0ICAgICAgICAgICAgMHg0ODAwMDogMHg0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4NTgwMDA6IDB4ODA0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4NjgwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHg3ODAwMDogMHg4MDQwMDAwMCxcblx0ICAgICAgICAgICAgMHg4ODAwMDogMHgxMDAwLFxuXHQgICAgICAgICAgICAweDk4MDAwOiAweDgwNDAxMDAwLFxuXHQgICAgICAgICAgICAweGE4MDAwOiAweDQwMDAwMCxcblx0ICAgICAgICAgICAgMHhiODAwMDogMHgxMDQwLFxuXHQgICAgICAgICAgICAweGM4MDAwOiAweDgwMDAwMDAwLFxuXHQgICAgICAgICAgICAweGQ4MDAwOiAweDQwMDA0MCxcblx0ICAgICAgICAgICAgMHhlODAwMDogMHg0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4ZjgwMDA6IDB4ODAwMDAwNDAsXG5cdCAgICAgICAgICAgIDB4MTAwMDAwOiAweDQwMDA0MCxcblx0ICAgICAgICAgICAgMHgxMTAwMDA6IDB4NDAxMDAwLFxuXHQgICAgICAgICAgICAweDEyMDAwMDogMHg4MDAwMDA0MCxcblx0ICAgICAgICAgICAgMHgxMzAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxNDAwMDA6IDB4MTA0MCxcblx0ICAgICAgICAgICAgMHgxNTAwMDA6IDB4ODA0MDAwNDAsXG5cdCAgICAgICAgICAgIDB4MTYwMDAwOiAweDgwNDAxMDAwLFxuXHQgICAgICAgICAgICAweDE3MDAwMDogMHg4MDAwMTA0MCxcblx0ICAgICAgICAgICAgMHgxODAwMDA6IDB4ODA0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4MTkwMDAwOiAweDgwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDFhMDAwMDogMHg4MDQwMDAwMCxcblx0ICAgICAgICAgICAgMHgxYjAwMDA6IDB4NDAxMDQwLFxuXHQgICAgICAgICAgICAweDFjMDAwMDogMHg4MDAwMTAwMCxcblx0ICAgICAgICAgICAgMHgxZDAwMDA6IDB4NDAwMDAwLFxuXHQgICAgICAgICAgICAweDFlMDAwMDogMHg0MCxcblx0ICAgICAgICAgICAgMHgxZjAwMDA6IDB4MTAwMCxcblx0ICAgICAgICAgICAgMHgxMDgwMDA6IDB4ODA0MDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTE4MDAwOiAweDgwNDAxMDQwLFxuXHQgICAgICAgICAgICAweDEyODAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDEzODAwMDogMHg0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4MTQ4MDAwOiAweDQwMDA0MCxcblx0ICAgICAgICAgICAgMHgxNTgwMDA6IDB4ODAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTY4MDAwOiAweDgwMDAxMDQwLFxuXHQgICAgICAgICAgICAweDE3ODAwMDogMHg0MCxcblx0ICAgICAgICAgICAgMHgxODgwMDA6IDB4ODAwMDAwNDAsXG5cdCAgICAgICAgICAgIDB4MTk4MDAwOiAweDEwMDAsXG5cdCAgICAgICAgICAgIDB4MWE4MDAwOiAweDgwMDAxMDAwLFxuXHQgICAgICAgICAgICAweDFiODAwMDogMHg4MDQwMDA0MCxcblx0ICAgICAgICAgICAgMHgxYzgwMDA6IDB4MTA0MCxcblx0ICAgICAgICAgICAgMHgxZDgwMDA6IDB4ODA0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4MWU4MDAwOiAweDQwMDAwMCxcblx0ICAgICAgICAgICAgMHgxZjgwMDA6IDB4NDAxMDQwXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHg4MCxcblx0ICAgICAgICAgICAgMHgxMDAwOiAweDEwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4MjAwMDogMHg0MDAwMCxcblx0ICAgICAgICAgICAgMHgzMDAwOiAweDIwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDQwMDA6IDB4MjAwNDAwODAsXG5cdCAgICAgICAgICAgIDB4NTAwMDogMHgxMDAwMDgwLFxuXHQgICAgICAgICAgICAweDYwMDA6IDB4MjEwMDAwODAsXG5cdCAgICAgICAgICAgIDB4NzAwMDogMHg0MDA4MCxcblx0ICAgICAgICAgICAgMHg4MDAwOiAweDEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4OTAwMDogMHgyMDA0MDAwMCxcblx0ICAgICAgICAgICAgMHhhMDAwOiAweDIwMDAwMDgwLFxuXHQgICAgICAgICAgICAweGIwMDA6IDB4MjEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4YzAwMDogMHgyMTA0MDAwMCxcblx0ICAgICAgICAgICAgMHhkMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4ZTAwMDogMHgxMDQwMDgwLFxuXHQgICAgICAgICAgICAweGYwMDA6IDB4MjEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwOiAweDEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MTgwMDogMHgyMTAwMDA4MCxcblx0ICAgICAgICAgICAgMHgyODAwOiAweDgwLFxuXHQgICAgICAgICAgICAweDM4MDA6IDB4MTA0MDAwMCxcblx0ICAgICAgICAgICAgMHg0ODAwOiAweDQwMDAwLFxuXHQgICAgICAgICAgICAweDU4MDA6IDB4MjAwNDAwODAsXG5cdCAgICAgICAgICAgIDB4NjgwMDogMHgyMTA0MDAwMCxcblx0ICAgICAgICAgICAgMHg3ODAwOiAweDIwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDg4MDA6IDB4MjAwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4OTgwMDogMHgwLFxuXHQgICAgICAgICAgICAweGE4MDA6IDB4MjEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4YjgwMDogMHgxMDAwMDgwLFxuXHQgICAgICAgICAgICAweGM4MDA6IDB4MjAwMDAwODAsXG5cdCAgICAgICAgICAgIDB4ZDgwMDogMHgyMTAwMDAwMCxcblx0ICAgICAgICAgICAgMHhlODAwOiAweDEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ZjgwMDogMHg0MDA4MCxcblx0ICAgICAgICAgICAgMHgxMDAwMDogMHg0MDAwMCxcblx0ICAgICAgICAgICAgMHgxMTAwMDogMHg4MCxcblx0ICAgICAgICAgICAgMHgxMjAwMDogMHgyMDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMzAwMDogMHgyMTAwMDA4MCxcblx0ICAgICAgICAgICAgMHgxNDAwMDogMHgxMDAwMDgwLFxuXHQgICAgICAgICAgICAweDE1MDAwOiAweDIxMDQwMDAwLFxuXHQgICAgICAgICAgICAweDE2MDAwOiAweDIwMDQwMDgwLFxuXHQgICAgICAgICAgICAweDE3MDAwOiAweDEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTgwMDA6IDB4MjEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MTkwMDA6IDB4MjEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWEwMDA6IDB4MTA0MDAwMCxcblx0ICAgICAgICAgICAgMHgxYjAwMDogMHgyMDA0MDAwMCxcblx0ICAgICAgICAgICAgMHgxYzAwMDogMHg0MDA4MCxcblx0ICAgICAgICAgICAgMHgxZDAwMDogMHgyMDAwMDA4MCxcblx0ICAgICAgICAgICAgMHgxZTAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDFmMDAwOiAweDEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MTA4MDA6IDB4MjEwMDAwODAsXG5cdCAgICAgICAgICAgIDB4MTE4MDA6IDB4MTAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMjgwMDogMHgxMDQwMDAwLFxuXHQgICAgICAgICAgICAweDEzODAwOiAweDIwMDQwMDgwLFxuXHQgICAgICAgICAgICAweDE0ODAwOiAweDIwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDE1ODAwOiAweDEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MTY4MDA6IDB4ODAsXG5cdCAgICAgICAgICAgIDB4MTc4MDA6IDB4MjEwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTg4MDA6IDB4NDAwODAsXG5cdCAgICAgICAgICAgIDB4MTk4MDA6IDB4MjEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MWE4MDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxYjgwMDogMHgyMTAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxYzgwMDogMHgxMDAwMDgwLFxuXHQgICAgICAgICAgICAweDFkODAwOiAweDQwMDAwLFxuXHQgICAgICAgICAgICAweDFlODAwOiAweDIwMDQwMDAwLFxuXHQgICAgICAgICAgICAweDFmODAwOiAweDIwMDAwMDgwXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHgxMDAwMDAwOCxcblx0ICAgICAgICAgICAgMHgxMDA6IDB4MjAwMCxcblx0ICAgICAgICAgICAgMHgyMDA6IDB4MTAyMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MzAwOiAweDEwMjAyMDA4LFxuXHQgICAgICAgICAgICAweDQwMDogMHgxMDAwMjAwMCxcblx0ICAgICAgICAgICAgMHg1MDA6IDB4MjAwMDAwLFxuXHQgICAgICAgICAgICAweDYwMDogMHgyMDAwMDgsXG5cdCAgICAgICAgICAgIDB4NzAwOiAweDEwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDogMHgwLFxuXHQgICAgICAgICAgICAweDkwMDogMHgxMDAwMjAwOCxcblx0ICAgICAgICAgICAgMHhhMDA6IDB4MjAyMDAwLFxuXHQgICAgICAgICAgICAweGIwMDogMHg4LFxuXHQgICAgICAgICAgICAweGMwMDogMHgxMDIwMDAwOCxcblx0ICAgICAgICAgICAgMHhkMDA6IDB4MjAyMDA4LFxuXHQgICAgICAgICAgICAweGUwMDogMHgyMDA4LFxuXHQgICAgICAgICAgICAweGYwMDogMHgxMDIwMjAwMCxcblx0ICAgICAgICAgICAgMHg4MDogMHgxMDIwMDAwMCxcblx0ICAgICAgICAgICAgMHgxODA6IDB4MTAyMDIwMDgsXG5cdCAgICAgICAgICAgIDB4MjgwOiAweDgsXG5cdCAgICAgICAgICAgIDB4MzgwOiAweDIwMDAwMCxcblx0ICAgICAgICAgICAgMHg0ODA6IDB4MjAyMDA4LFxuXHQgICAgICAgICAgICAweDU4MDogMHgxMDAwMDAwOCxcblx0ICAgICAgICAgICAgMHg2ODA6IDB4MTAwMDIwMDAsXG5cdCAgICAgICAgICAgIDB4NzgwOiAweDIwMDgsXG5cdCAgICAgICAgICAgIDB4ODgwOiAweDIwMDAwOCxcblx0ICAgICAgICAgICAgMHg5ODA6IDB4MjAwMCxcblx0ICAgICAgICAgICAgMHhhODA6IDB4MTAwMDIwMDgsXG5cdCAgICAgICAgICAgIDB4YjgwOiAweDEwMjAwMDA4LFxuXHQgICAgICAgICAgICAweGM4MDogMHgwLFxuXHQgICAgICAgICAgICAweGQ4MDogMHgxMDIwMjAwMCxcblx0ICAgICAgICAgICAgMHhlODA6IDB4MjAyMDAwLFxuXHQgICAgICAgICAgICAweGY4MDogMHgxMDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMDAwOiAweDEwMDAyMDAwLFxuXHQgICAgICAgICAgICAweDExMDA6IDB4MTAyMDAwMDgsXG5cdCAgICAgICAgICAgIDB4MTIwMDogMHgxMDIwMjAwOCxcblx0ICAgICAgICAgICAgMHgxMzAwOiAweDIwMDgsXG5cdCAgICAgICAgICAgIDB4MTQwMDogMHgyMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTUwMDogMHgxMDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxNjAwOiAweDEwMDAwMDA4LFxuXHQgICAgICAgICAgICAweDE3MDA6IDB4MjAyMDAwLFxuXHQgICAgICAgICAgICAweDE4MDA6IDB4MjAyMDA4LFxuXHQgICAgICAgICAgICAweDE5MDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxYTAwOiAweDgsXG5cdCAgICAgICAgICAgIDB4MWIwMDogMHgxMDIwMDAwMCxcblx0ICAgICAgICAgICAgMHgxYzAwOiAweDIwMDAsXG5cdCAgICAgICAgICAgIDB4MWQwMDogMHgxMDAwMjAwOCxcblx0ICAgICAgICAgICAgMHgxZTAwOiAweDEwMjAyMDAwLFxuXHQgICAgICAgICAgICAweDFmMDA6IDB4MjAwMDA4LFxuXHQgICAgICAgICAgICAweDEwODA6IDB4OCxcblx0ICAgICAgICAgICAgMHgxMTgwOiAweDIwMjAwMCxcblx0ICAgICAgICAgICAgMHgxMjgwOiAweDIwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMzgwOiAweDEwMDAwMDA4LFxuXHQgICAgICAgICAgICAweDE0ODA6IDB4MTAwMDIwMDAsXG5cdCAgICAgICAgICAgIDB4MTU4MDogMHgyMDA4LFxuXHQgICAgICAgICAgICAweDE2ODA6IDB4MTAyMDIwMDgsXG5cdCAgICAgICAgICAgIDB4MTc4MDogMHgxMDIwMDAwMCxcblx0ICAgICAgICAgICAgMHgxODgwOiAweDEwMjAyMDAwLFxuXHQgICAgICAgICAgICAweDE5ODA6IDB4MTAyMDAwMDgsXG5cdCAgICAgICAgICAgIDB4MWE4MDogMHgyMDAwLFxuXHQgICAgICAgICAgICAweDFiODA6IDB4MjAyMDA4LFxuXHQgICAgICAgICAgICAweDFjODA6IDB4MjAwMDA4LFxuXHQgICAgICAgICAgICAweDFkODA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxZTgwOiAweDEwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDFmODA6IDB4MTAwMDIwMDhcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHtcblx0ICAgICAgICAgICAgMHgwOiAweDEwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMDogMHgyMDAwNDAxLFxuXHQgICAgICAgICAgICAweDIwOiAweDQwMCxcblx0ICAgICAgICAgICAgMHgzMDogMHgxMDA0MDEsXG5cdCAgICAgICAgICAgIDB4NDA6IDB4MjEwMDQwMSxcblx0ICAgICAgICAgICAgMHg1MDogMHgwLFxuXHQgICAgICAgICAgICAweDYwOiAweDEsXG5cdCAgICAgICAgICAgIDB4NzA6IDB4MjEwMDAwMSxcblx0ICAgICAgICAgICAgMHg4MDogMHgyMDAwNDAwLFxuXHQgICAgICAgICAgICAweDkwOiAweDEwMDAwMSxcblx0ICAgICAgICAgICAgMHhhMDogMHgyMDAwMDAxLFxuXHQgICAgICAgICAgICAweGIwOiAweDIxMDA0MDAsXG5cdCAgICAgICAgICAgIDB4YzA6IDB4MjEwMDAwMCxcblx0ICAgICAgICAgICAgMHhkMDogMHg0MDEsXG5cdCAgICAgICAgICAgIDB4ZTA6IDB4MTAwNDAwLFxuXHQgICAgICAgICAgICAweGYwOiAweDIwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ODogMHgyMTAwMDAxLFxuXHQgICAgICAgICAgICAweDE4OiAweDAsXG5cdCAgICAgICAgICAgIDB4Mjg6IDB4MjAwMDQwMSxcblx0ICAgICAgICAgICAgMHgzODogMHgyMTAwNDAwLFxuXHQgICAgICAgICAgICAweDQ4OiAweDEwMDAwMCxcblx0ICAgICAgICAgICAgMHg1ODogMHgyMDAwMDAxLFxuXHQgICAgICAgICAgICAweDY4OiAweDIwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4Nzg6IDB4NDAxLFxuXHQgICAgICAgICAgICAweDg4OiAweDEwMDQwMSxcblx0ICAgICAgICAgICAgMHg5ODogMHgyMDAwNDAwLFxuXHQgICAgICAgICAgICAweGE4OiAweDIxMDAwMDAsXG5cdCAgICAgICAgICAgIDB4Yjg6IDB4MTAwMDAxLFxuXHQgICAgICAgICAgICAweGM4OiAweDQwMCxcblx0ICAgICAgICAgICAgMHhkODogMHgyMTAwNDAxLFxuXHQgICAgICAgICAgICAweGU4OiAweDEsXG5cdCAgICAgICAgICAgIDB4Zjg6IDB4MTAwNDAwLFxuXHQgICAgICAgICAgICAweDEwMDogMHgyMDAwMDAwLFxuXHQgICAgICAgICAgICAweDExMDogMHgxMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTIwOiAweDIwMDA0MDEsXG5cdCAgICAgICAgICAgIDB4MTMwOiAweDIxMDAwMDEsXG5cdCAgICAgICAgICAgIDB4MTQwOiAweDEwMDAwMSxcblx0ICAgICAgICAgICAgMHgxNTA6IDB4MjAwMDQwMCxcblx0ICAgICAgICAgICAgMHgxNjA6IDB4MjEwMDQwMCxcblx0ICAgICAgICAgICAgMHgxNzA6IDB4MTAwNDAxLFxuXHQgICAgICAgICAgICAweDE4MDogMHg0MDEsXG5cdCAgICAgICAgICAgIDB4MTkwOiAweDIxMDA0MDEsXG5cdCAgICAgICAgICAgIDB4MWEwOiAweDEwMDQwMCxcblx0ICAgICAgICAgICAgMHgxYjA6IDB4MSxcblx0ICAgICAgICAgICAgMHgxYzA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxZDA6IDB4MjEwMDAwMCxcblx0ICAgICAgICAgICAgMHgxZTA6IDB4MjAwMDAwMSxcblx0ICAgICAgICAgICAgMHgxZjA6IDB4NDAwLFxuXHQgICAgICAgICAgICAweDEwODogMHgxMDA0MDAsXG5cdCAgICAgICAgICAgIDB4MTE4OiAweDIwMDA0MDEsXG5cdCAgICAgICAgICAgIDB4MTI4OiAweDIxMDAwMDEsXG5cdCAgICAgICAgICAgIDB4MTM4OiAweDEsXG5cdCAgICAgICAgICAgIDB4MTQ4OiAweDIwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTU4OiAweDEwMDAwMCxcblx0ICAgICAgICAgICAgMHgxNjg6IDB4NDAxLFxuXHQgICAgICAgICAgICAweDE3ODogMHgyMTAwNDAwLFxuXHQgICAgICAgICAgICAweDE4ODogMHgyMDAwMDAxLFxuXHQgICAgICAgICAgICAweDE5ODogMHgyMTAwMDAwLFxuXHQgICAgICAgICAgICAweDFhODogMHgwLFxuXHQgICAgICAgICAgICAweDFiODogMHgyMTAwNDAxLFxuXHQgICAgICAgICAgICAweDFjODogMHgxMDA0MDEsXG5cdCAgICAgICAgICAgIDB4MWQ4OiAweDQwMCxcblx0ICAgICAgICAgICAgMHgxZTg6IDB4MjAwMDQwMCxcblx0ICAgICAgICAgICAgMHgxZjg6IDB4MTAwMDAxXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHg4MDAwODIwLFxuXHQgICAgICAgICAgICAweDE6IDB4MjAwMDAsXG5cdCAgICAgICAgICAgIDB4MjogMHg4MDAwMDAwLFxuXHQgICAgICAgICAgICAweDM6IDB4MjAsXG5cdCAgICAgICAgICAgIDB4NDogMHgyMDAyMCxcblx0ICAgICAgICAgICAgMHg1OiAweDgwMjA4MjAsXG5cdCAgICAgICAgICAgIDB4NjogMHg4MDIwODAwLFxuXHQgICAgICAgICAgICAweDc6IDB4ODAwLFxuXHQgICAgICAgICAgICAweDg6IDB4ODAyMDAwMCxcblx0ICAgICAgICAgICAgMHg5OiAweDgwMDA4MDAsXG5cdCAgICAgICAgICAgIDB4YTogMHgyMDgwMCxcblx0ICAgICAgICAgICAgMHhiOiAweDgwMjAwMjAsXG5cdCAgICAgICAgICAgIDB4YzogMHg4MjAsXG5cdCAgICAgICAgICAgIDB4ZDogMHgwLFxuXHQgICAgICAgICAgICAweGU6IDB4ODAwMDAyMCxcblx0ICAgICAgICAgICAgMHhmOiAweDIwODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDAwOiAweDgwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwMTogMHg4MDIwODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDAyOiAweDgwMDA4MjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDM6IDB4ODAwMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwNDogMHg4MDIwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA1OiAweDIwODAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA2OiAweDIwODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA3OiAweDIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA4OiAweDgwMDAwMjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDk6IDB4ODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDBhOiAweDIwMDIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDBiOiAweDgwMjA4MDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMGM6IDB4MCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwZDogMHg4MDIwMDIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDBlOiAweDgwMDA4MDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMGY6IDB4MjAwMDAsXG5cdCAgICAgICAgICAgIDB4MTA6IDB4MjA4MjAsXG5cdCAgICAgICAgICAgIDB4MTE6IDB4ODAyMDgwMCxcblx0ICAgICAgICAgICAgMHgxMjogMHgyMCxcblx0ICAgICAgICAgICAgMHgxMzogMHg4MDAsXG5cdCAgICAgICAgICAgIDB4MTQ6IDB4ODAwMDgwMCxcblx0ICAgICAgICAgICAgMHgxNTogMHg4MDAwMDIwLFxuXHQgICAgICAgICAgICAweDE2OiAweDgwMjAwMjAsXG5cdCAgICAgICAgICAgIDB4MTc6IDB4MjAwMDAsXG5cdCAgICAgICAgICAgIDB4MTg6IDB4MCxcblx0ICAgICAgICAgICAgMHgxOTogMHgyMDAyMCxcblx0ICAgICAgICAgICAgMHgxYTogMHg4MDIwMDAwLFxuXHQgICAgICAgICAgICAweDFiOiAweDgwMDA4MjAsXG5cdCAgICAgICAgICAgIDB4MWM6IDB4ODAyMDgyMCxcblx0ICAgICAgICAgICAgMHgxZDogMHgyMDgwMCxcblx0ICAgICAgICAgICAgMHgxZTogMHg4MjAsXG5cdCAgICAgICAgICAgIDB4MWY6IDB4ODAwMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxMDogMHgyMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxMTogMHg4MDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMTI6IDB4ODAyMDAyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxMzogMHgyMDgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxNDogMHgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxNTogMHg4MDIwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDE2OiAweDgwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMTc6IDB4ODAwMDgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxODogMHg4MDIwODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDE5OiAweDgwMDAwMjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMWE6IDB4ODAwMDgwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxYjogMHgwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDFjOiAweDIwODAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDFkOiAweDgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxZTogMHgyMDAyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxZjogMHg4MDIwODAwXG5cdCAgICAgICAgfVxuXHQgICAgXTtcblxuXHQgICAgLy8gTWFza3MgdGhhdCBzZWxlY3QgdGhlIFNCT1ggaW5wdXRcblx0ICAgIHZhciBTQk9YX01BU0sgPSBbXG5cdCAgICAgICAgMHhmODAwMDAwMSwgMHgxZjgwMDAwMCwgMHgwMWY4MDAwMCwgMHgwMDFmODAwMCxcblx0ICAgICAgICAweDAwMDFmODAwLCAweDAwMDAxZjgwLCAweDAwMDAwMWY4LCAweDgwMDAwMDFmXG5cdCAgICBdO1xuXG5cdCAgICAvKipcblx0ICAgICAqIERFUyBibG9jayBjaXBoZXIgYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgREVTID0gQ19hbGdvLkRFUyA9IEJsb2NrQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXk7XG5cdCAgICAgICAgICAgIHZhciBrZXlXb3JkcyA9IGtleS53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBTZWxlY3QgNTYgYml0cyBhY2NvcmRpbmcgdG8gUEMxXG5cdCAgICAgICAgICAgIHZhciBrZXlCaXRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTY7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGtleUJpdFBvcyA9IFBDMVtpXSAtIDE7XG5cdCAgICAgICAgICAgICAgICBrZXlCaXRzW2ldID0gKGtleVdvcmRzW2tleUJpdFBvcyA+Pj4gNV0gPj4+ICgzMSAtIGtleUJpdFBvcyAlIDMyKSkgJiAxO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gQXNzZW1ibGUgMTYgc3Via2V5c1xuXHQgICAgICAgICAgICB2YXIgc3ViS2V5cyA9IHRoaXMuX3N1YktleXMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgblN1YktleSA9IDA7IG5TdWJLZXkgPCAxNjsgblN1YktleSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBDcmVhdGUgc3Via2V5XG5cdCAgICAgICAgICAgICAgICB2YXIgc3ViS2V5ID0gc3ViS2V5c1tuU3ViS2V5XSA9IFtdO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICAgICAgdmFyIGJpdFNoaWZ0ID0gQklUX1NISUZUU1tuU3ViS2V5XTtcblxuXHQgICAgICAgICAgICAgICAgLy8gU2VsZWN0IDQ4IGJpdHMgYWNjb3JkaW5nIHRvIFBDMlxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gU2VsZWN0IGZyb20gdGhlIGxlZnQgMjgga2V5IGJpdHNcblx0ICAgICAgICAgICAgICAgICAgICBzdWJLZXlbKGkgLyA2KSB8IDBdIHw9IGtleUJpdHNbKChQQzJbaV0gLSAxKSArIGJpdFNoaWZ0KSAlIDI4XSA8PCAoMzEgLSBpICUgNik7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBTZWxlY3QgZnJvbSB0aGUgcmlnaHQgMjgga2V5IGJpdHNcblx0ICAgICAgICAgICAgICAgICAgICBzdWJLZXlbNCArICgoaSAvIDYpIHwgMCldIHw9IGtleUJpdHNbMjggKyAoKChQQzJbaSArIDI0XSAtIDEpICsgYml0U2hpZnQpICUgMjgpXSA8PCAoMzEgLSBpICUgNik7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIFNpbmNlIGVhY2ggc3Via2V5IGlzIGFwcGxpZWQgdG8gYW4gZXhwYW5kZWQgMzItYml0IGlucHV0LFxuXHQgICAgICAgICAgICAgICAgLy8gdGhlIHN1YmtleSBjYW4gYmUgYnJva2VuIGludG8gOCB2YWx1ZXMgc2NhbGVkIHRvIDMyLWJpdHMsXG5cdCAgICAgICAgICAgICAgICAvLyB3aGljaCBhbGxvd3MgdGhlIGtleSB0byBiZSB1c2VkIHdpdGhvdXQgZXhwYW5zaW9uXG5cdCAgICAgICAgICAgICAgICBzdWJLZXlbMF0gPSAoc3ViS2V5WzBdIDw8IDEpIHwgKHN1YktleVswXSA+Pj4gMzEpO1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCA3OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdWJLZXlbaV0gPSBzdWJLZXlbaV0gPj4+ICgoaSAtIDEpICogNCArIDMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgc3ViS2V5WzddID0gKHN1YktleVs3XSA8PCA1KSB8IChzdWJLZXlbN10gPj4+IDI3KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgaW52ZXJzZSBzdWJrZXlzXG5cdCAgICAgICAgICAgIHZhciBpbnZTdWJLZXlzID0gdGhpcy5faW52U3ViS2V5cyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIGludlN1YktleXNbaV0gPSBzdWJLZXlzWzE1IC0gaV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgZW5jcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2RvQ3J5cHRCbG9jayhNLCBvZmZzZXQsIHRoaXMuX3N1YktleXMpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBkZWNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZG9DcnlwdEJsb2NrKE0sIG9mZnNldCwgdGhpcy5faW52U3ViS2V5cyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0NyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQsIHN1YktleXMpIHtcblx0ICAgICAgICAgICAgLy8gR2V0IGlucHV0XG5cdCAgICAgICAgICAgIHRoaXMuX2xCbG9jayA9IE1bb2Zmc2V0XTtcblx0ICAgICAgICAgICAgdGhpcy5fckJsb2NrID0gTVtvZmZzZXQgKyAxXTtcblxuXHQgICAgICAgICAgICAvLyBJbml0aWFsIHBlcm11dGF0aW9uXG5cdCAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCA0LCAgMHgwZjBmMGYwZik7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCAxNiwgMHgwMDAwZmZmZik7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlUkwuY2FsbCh0aGlzLCAyLCAgMHgzMzMzMzMzMyk7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlUkwuY2FsbCh0aGlzLCA4LCAgMHgwMGZmMDBmZik7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCAxLCAgMHg1NTU1NTU1NSk7XG5cblx0ICAgICAgICAgICAgLy8gUm91bmRzXG5cdCAgICAgICAgICAgIGZvciAodmFyIHJvdW5kID0gMDsgcm91bmQgPCAxNjsgcm91bmQrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgc3ViS2V5ID0gc3ViS2V5c1tyb3VuZF07XG5cdCAgICAgICAgICAgICAgICB2YXIgbEJsb2NrID0gdGhpcy5fbEJsb2NrO1xuXHQgICAgICAgICAgICAgICAgdmFyIHJCbG9jayA9IHRoaXMuX3JCbG9jaztcblxuXHQgICAgICAgICAgICAgICAgLy8gRmVpc3RlbCBmdW5jdGlvblxuXHQgICAgICAgICAgICAgICAgdmFyIGYgPSAwO1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBmIHw9IFNCT1hfUFtpXVsoKHJCbG9jayBeIHN1YktleVtpXSkgJiBTQk9YX01BU0tbaV0pID4+PiAwXTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHRoaXMuX2xCbG9jayA9IHJCbG9jaztcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3JCbG9jayA9IGxCbG9jayBeIGY7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBVbmRvIHN3YXAgZnJvbSBsYXN0IHJvdW5kXG5cdCAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fbEJsb2NrO1xuXHQgICAgICAgICAgICB0aGlzLl9sQmxvY2sgPSB0aGlzLl9yQmxvY2s7XG5cdCAgICAgICAgICAgIHRoaXMuX3JCbG9jayA9IHQ7XG5cblx0ICAgICAgICAgICAgLy8gRmluYWwgcGVybXV0YXRpb25cblx0ICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDEsICAweDU1NTU1NTU1KTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VSTC5jYWxsKHRoaXMsIDgsICAweDAwZmYwMGZmKTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VSTC5jYWxsKHRoaXMsIDIsICAweDMzMzMzMzMzKTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDE2LCAweDAwMDBmZmZmKTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDQsICAweDBmMGYwZjBmKTtcblxuXHQgICAgICAgICAgICAvLyBTZXQgb3V0cHV0XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0XSA9IHRoaXMuX2xCbG9jaztcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAxXSA9IHRoaXMuX3JCbG9jaztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAga2V5U2l6ZTogNjQvMzIsXG5cblx0ICAgICAgICBpdlNpemU6IDY0LzMyLFxuXG5cdCAgICAgICAgYmxvY2tTaXplOiA2NC8zMlxuXHQgICAgfSk7XG5cblx0ICAgIC8vIFN3YXAgYml0cyBhY3Jvc3MgdGhlIGxlZnQgYW5kIHJpZ2h0IHdvcmRzXG5cdCAgICBmdW5jdGlvbiBleGNoYW5nZUxSKG9mZnNldCwgbWFzaykge1xuXHQgICAgICAgIHZhciB0ID0gKCh0aGlzLl9sQmxvY2sgPj4+IG9mZnNldCkgXiB0aGlzLl9yQmxvY2spICYgbWFzaztcblx0ICAgICAgICB0aGlzLl9yQmxvY2sgXj0gdDtcblx0ICAgICAgICB0aGlzLl9sQmxvY2sgXj0gdCA8PCBvZmZzZXQ7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGV4Y2hhbmdlUkwob2Zmc2V0LCBtYXNrKSB7XG5cdCAgICAgICAgdmFyIHQgPSAoKHRoaXMuX3JCbG9jayA+Pj4gb2Zmc2V0KSBeIHRoaXMuX2xCbG9jaykgJiBtYXNrO1xuXHQgICAgICAgIHRoaXMuX2xCbG9jayBePSB0O1xuXHQgICAgICAgIHRoaXMuX3JCbG9jayBePSB0IDw8IG9mZnNldDtcblx0ICAgIH1cblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5ERVMuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7XG5cdCAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5ERVMuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7XG5cdCAgICAgKi9cblx0ICAgIEMuREVTID0gQmxvY2tDaXBoZXIuX2NyZWF0ZUhlbHBlcihERVMpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFRyaXBsZS1ERVMgYmxvY2sgY2lwaGVyIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFRyaXBsZURFUyA9IENfYWxnby5UcmlwbGVERVMgPSBCbG9ja0NpcGhlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5O1xuXHQgICAgICAgICAgICB2YXIga2V5V29yZHMgPSBrZXkud29yZHM7XG5cblx0ICAgICAgICAgICAgLy8gQ3JlYXRlIERFUyBpbnN0YW5jZXNcblx0ICAgICAgICAgICAgdGhpcy5fZGVzMSA9IERFUy5jcmVhdGVFbmNyeXB0b3IoV29yZEFycmF5LmNyZWF0ZShrZXlXb3Jkcy5zbGljZSgwLCAyKSkpO1xuXHQgICAgICAgICAgICB0aGlzLl9kZXMyID0gREVTLmNyZWF0ZUVuY3J5cHRvcihXb3JkQXJyYXkuY3JlYXRlKGtleVdvcmRzLnNsaWNlKDIsIDQpKSk7XG5cdCAgICAgICAgICAgIHRoaXMuX2RlczMgPSBERVMuY3JlYXRlRW5jcnlwdG9yKFdvcmRBcnJheS5jcmVhdGUoa2V5V29yZHMuc2xpY2UoNCwgNikpKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgZW5jcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2RlczEuZW5jcnlwdEJsb2NrKE0sIG9mZnNldCk7XG5cdCAgICAgICAgICAgIHRoaXMuX2RlczIuZGVjcnlwdEJsb2NrKE0sIG9mZnNldCk7XG5cdCAgICAgICAgICAgIHRoaXMuX2RlczMuZW5jcnlwdEJsb2NrKE0sIG9mZnNldCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGRlY3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICB0aGlzLl9kZXMzLmRlY3J5cHRCbG9jayhNLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICB0aGlzLl9kZXMyLmVuY3J5cHRCbG9jayhNLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICB0aGlzLl9kZXMxLmRlY3J5cHRCbG9jayhNLCBvZmZzZXQpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBrZXlTaXplOiAxOTIvMzIsXG5cblx0ICAgICAgICBpdlNpemU6IDY0LzMyLFxuXG5cdCAgICAgICAgYmxvY2tTaXplOiA2NC8zMlxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuVHJpcGxlREVTLmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuVHJpcGxlREVTLmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpO1xuXHQgICAgICovXG5cdCAgICBDLlRyaXBsZURFUyA9IEJsb2NrQ2lwaGVyLl9jcmVhdGVIZWxwZXIoVHJpcGxlREVTKTtcblx0fSgpKTtcblxuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBTdHJlYW1DaXBoZXIgPSBDX2xpYi5TdHJlYW1DaXBoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFJDNCBzdHJlYW0gY2lwaGVyIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFJDNCA9IENfYWxnby5SQzQgPSBTdHJlYW1DaXBoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGtleSA9IHRoaXMuX2tleTtcblx0ICAgICAgICAgICAgdmFyIGtleVdvcmRzID0ga2V5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIga2V5U2lnQnl0ZXMgPSBrZXkuc2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gSW5pdCBzYm94XG5cdCAgICAgICAgICAgIHZhciBTID0gdGhpcy5fUyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBTW2ldID0gaTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEtleSBzZXR1cFxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IDA7IGkgPCAyNTY7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGtleUJ5dGVJbmRleCA9IGkgJSBrZXlTaWdCeXRlcztcblx0ICAgICAgICAgICAgICAgIHZhciBrZXlCeXRlID0gKGtleVdvcmRzW2tleUJ5dGVJbmRleCA+Pj4gMl0gPj4+ICgyNCAtIChrZXlCeXRlSW5kZXggJSA0KSAqIDgpKSAmIDB4ZmY7XG5cblx0ICAgICAgICAgICAgICAgIGogPSAoaiArIFNbaV0gKyBrZXlCeXRlKSAlIDI1NjtcblxuXHQgICAgICAgICAgICAgICAgLy8gU3dhcFxuXHQgICAgICAgICAgICAgICAgdmFyIHQgPSBTW2ldO1xuXHQgICAgICAgICAgICAgICAgU1tpXSA9IFNbal07XG5cdCAgICAgICAgICAgICAgICBTW2pdID0gdDtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIENvdW50ZXJzXG5cdCAgICAgICAgICAgIHRoaXMuX2kgPSB0aGlzLl9qID0gMDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0XSBePSBnZW5lcmF0ZUtleXN0cmVhbVdvcmQuY2FsbCh0aGlzKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAga2V5U2l6ZTogMjU2LzMyLFxuXG5cdCAgICAgICAgaXZTaXplOiAwXG5cdCAgICB9KTtcblxuXHQgICAgZnVuY3Rpb24gZ2VuZXJhdGVLZXlzdHJlYW1Xb3JkKCkge1xuXHQgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgIHZhciBTID0gdGhpcy5fUztcblx0ICAgICAgICB2YXIgaSA9IHRoaXMuX2k7XG5cdCAgICAgICAgdmFyIGogPSB0aGlzLl9qO1xuXG5cdCAgICAgICAgLy8gR2VuZXJhdGUga2V5c3RyZWFtIHdvcmRcblx0ICAgICAgICB2YXIga2V5c3RyZWFtV29yZCA9IDA7XG5cdCAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCA0OyBuKyspIHtcblx0ICAgICAgICAgICAgaSA9IChpICsgMSkgJSAyNTY7XG5cdCAgICAgICAgICAgIGogPSAoaiArIFNbaV0pICUgMjU2O1xuXG5cdCAgICAgICAgICAgIC8vIFN3YXBcblx0ICAgICAgICAgICAgdmFyIHQgPSBTW2ldO1xuXHQgICAgICAgICAgICBTW2ldID0gU1tqXTtcblx0ICAgICAgICAgICAgU1tqXSA9IHQ7XG5cblx0ICAgICAgICAgICAga2V5c3RyZWFtV29yZCB8PSBTWyhTW2ldICsgU1tqXSkgJSAyNTZdIDw8ICgyNCAtIG4gKiA4KTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBVcGRhdGUgY291bnRlcnNcblx0ICAgICAgICB0aGlzLl9pID0gaTtcblx0ICAgICAgICB0aGlzLl9qID0gajtcblxuXHQgICAgICAgIHJldHVybiBrZXlzdHJlYW1Xb3JkO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9ucyB0byB0aGUgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgY2lwaGVydGV4dCA9IENyeXB0b0pTLlJDNC5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTtcblx0ICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLlJDNC5kZWNyeXB0KGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcblx0ICAgICAqL1xuXHQgICAgQy5SQzQgPSBTdHJlYW1DaXBoZXIuX2NyZWF0ZUhlbHBlcihSQzQpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIE1vZGlmaWVkIFJDNCBzdHJlYW0gY2lwaGVyIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFJDNERyb3AgPSBDX2FsZ28uUkM0RHJvcCA9IFJDNC5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkcm9wIFRoZSBudW1iZXIgb2Yga2V5c3RyZWFtIHdvcmRzIHRvIGRyb3AuIERlZmF1bHQgMTkyXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBSQzQuY2ZnLmV4dGVuZCh7XG5cdCAgICAgICAgICAgIGRyb3A6IDE5MlxuXHQgICAgICAgIH0pLFxuXG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgUkM0Ll9kb1Jlc2V0LmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgLy8gRHJvcFxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5jZmcuZHJvcDsgaSA+IDA7IGktLSkge1xuXHQgICAgICAgICAgICAgICAgZ2VuZXJhdGVLZXlzdHJlYW1Xb3JkLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5SQzREcm9wLmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuUkM0RHJvcC5kZWNyeXB0KGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcblx0ICAgICAqL1xuXHQgICAgQy5SQzREcm9wID0gU3RyZWFtQ2lwaGVyLl9jcmVhdGVIZWxwZXIoUkM0RHJvcCk7XG5cdH0oKSk7XG5cblxuXHQvKiogQHByZXNlcnZlXG5cdCAqIENvdW50ZXIgYmxvY2sgbW9kZSBjb21wYXRpYmxlIHdpdGggIERyIEJyaWFuIEdsYWRtYW4gZmlsZWVuYy5jXG5cdCAqIGRlcml2ZWQgZnJvbSBDcnlwdG9KUy5tb2RlLkNUUlxuXHQgKiBKYW4gSHJ1YnkgamhydWJ5LndlYkBnbWFpbC5jb21cblx0ICovXG5cdENyeXB0b0pTLm1vZGUuQ1RSR2xhZG1hbiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgQ1RSR2xhZG1hbiA9IENyeXB0b0pTLmxpYi5CbG9ja0NpcGhlck1vZGUuZXh0ZW5kKCk7XG5cblx0XHRmdW5jdGlvbiBpbmNXb3JkKHdvcmQpXG5cdFx0e1xuXHRcdFx0aWYgKCgod29yZCA+PiAyNCkgJiAweGZmKSA9PT0gMHhmZikgeyAvL292ZXJmbG93XG5cdFx0XHR2YXIgYjEgPSAod29yZCA+PiAxNikmMHhmZjtcblx0XHRcdHZhciBiMiA9ICh3b3JkID4+IDgpJjB4ZmY7XG5cdFx0XHR2YXIgYjMgPSB3b3JkICYgMHhmZjtcblxuXHRcdFx0aWYgKGIxID09PSAweGZmKSAvLyBvdmVyZmxvdyBiMVxuXHRcdFx0e1xuXHRcdFx0YjEgPSAwO1xuXHRcdFx0aWYgKGIyID09PSAweGZmKVxuXHRcdFx0e1xuXHRcdFx0XHRiMiA9IDA7XG5cdFx0XHRcdGlmIChiMyA9PT0gMHhmZilcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGIzID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdHtcblx0XHRcdFx0XHQrK2IzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdCsrYjI7XG5cdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHQrK2IxO1xuXHRcdFx0fVxuXG5cdFx0XHR3b3JkID0gMDtcblx0XHRcdHdvcmQgKz0gKGIxIDw8IDE2KTtcblx0XHRcdHdvcmQgKz0gKGIyIDw8IDgpO1xuXHRcdFx0d29yZCArPSBiMztcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdHdvcmQgKz0gKDB4MDEgPDwgMjQpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHdvcmQ7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaW5jQ291bnRlcihjb3VudGVyKVxuXHRcdHtcblx0XHRcdGlmICgoY291bnRlclswXSA9IGluY1dvcmQoY291bnRlclswXSkpID09PSAwKVxuXHRcdFx0e1xuXHRcdFx0XHQvLyBlbmNyX2RhdGEgaW4gZmlsZWVuYy5jIGZyb20gIERyIEJyaWFuIEdsYWRtYW4ncyBjb3VudHMgb25seSB3aXRoIERXT1JEIGogPCA4XG5cdFx0XHRcdGNvdW50ZXJbMV0gPSBpbmNXb3JkKGNvdW50ZXJbMV0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNvdW50ZXI7XG5cdFx0fVxuXG5cdCAgICB2YXIgRW5jcnlwdG9yID0gQ1RSR2xhZG1hbi5FbmNyeXB0b3IgPSBDVFJHbGFkbWFuLmV4dGVuZCh7XG5cdCAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlclxuXHQgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZTtcblx0ICAgICAgICAgICAgdmFyIGl2ID0gdGhpcy5faXY7XG5cdCAgICAgICAgICAgIHZhciBjb3VudGVyID0gdGhpcy5fY291bnRlcjtcblxuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSBrZXlzdHJlYW1cblx0ICAgICAgICAgICAgaWYgKGl2KSB7XG5cdCAgICAgICAgICAgICAgICBjb3VudGVyID0gdGhpcy5fY291bnRlciA9IGl2LnNsaWNlKDApO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBSZW1vdmUgSVYgZm9yIHN1YnNlcXVlbnQgYmxvY2tzXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9pdiA9IHVuZGVmaW5lZDtcblx0ICAgICAgICAgICAgfVxuXG5cdFx0XHRcdGluY0NvdW50ZXIoY291bnRlcik7XG5cblx0XHRcdFx0dmFyIGtleXN0cmVhbSA9IGNvdW50ZXIuc2xpY2UoMCk7XG5cdCAgICAgICAgICAgIGNpcGhlci5lbmNyeXB0QmxvY2soa2V5c3RyZWFtLCAwKTtcblxuXHQgICAgICAgICAgICAvLyBFbmNyeXB0XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tTaXplOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW29mZnNldCArIGldIF49IGtleXN0cmVhbVtpXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBDVFJHbGFkbWFuLkRlY3J5cHRvciA9IEVuY3J5cHRvcjtcblxuXHQgICAgcmV0dXJuIENUUkdsYWRtYW47XG5cdH0oKSk7XG5cblxuXG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFN0cmVhbUNpcGhlciA9IENfbGliLlN0cmVhbUNpcGhlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIFJldXNhYmxlIG9iamVjdHNcblx0ICAgIHZhciBTICA9IFtdO1xuXHQgICAgdmFyIENfID0gW107XG5cdCAgICB2YXIgRyAgPSBbXTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBSYWJiaXQgc3RyZWFtIGNpcGhlciBhbGdvcml0aG1cblx0ICAgICAqL1xuXHQgICAgdmFyIFJhYmJpdCA9IENfYWxnby5SYWJiaXQgPSBTdHJlYW1DaXBoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIEsgPSB0aGlzLl9rZXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBpdiA9IHRoaXMuY2ZnLml2O1xuXG5cdCAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBLW2ldID0gKCgoS1tpXSA8PCA4KSAgfCAoS1tpXSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAgICAoKChLW2ldIDw8IDI0KSB8IChLW2ldID4+PiA4KSkgICYgMHhmZjAwZmYwMCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSBpbml0aWFsIHN0YXRlIHZhbHVlc1xuXHQgICAgICAgICAgICB2YXIgWCA9IHRoaXMuX1ggPSBbXG5cdCAgICAgICAgICAgICAgICBLWzBdLCAoS1szXSA8PCAxNikgfCAoS1syXSA+Pj4gMTYpLFxuXHQgICAgICAgICAgICAgICAgS1sxXSwgKEtbMF0gPDwgMTYpIHwgKEtbM10gPj4+IDE2KSxcblx0ICAgICAgICAgICAgICAgIEtbMl0sIChLWzFdIDw8IDE2KSB8IChLWzBdID4+PiAxNiksXG5cdCAgICAgICAgICAgICAgICBLWzNdLCAoS1syXSA8PCAxNikgfCAoS1sxXSA+Pj4gMTYpXG5cdCAgICAgICAgICAgIF07XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUgaW5pdGlhbCBjb3VudGVyIHZhbHVlc1xuXHQgICAgICAgICAgICB2YXIgQyA9IHRoaXMuX0MgPSBbXG5cdCAgICAgICAgICAgICAgICAoS1syXSA8PCAxNikgfCAoS1syXSA+Pj4gMTYpLCAoS1swXSAmIDB4ZmZmZjAwMDApIHwgKEtbMV0gJiAweDAwMDBmZmZmKSxcblx0ICAgICAgICAgICAgICAgIChLWzNdIDw8IDE2KSB8IChLWzNdID4+PiAxNiksIChLWzFdICYgMHhmZmZmMDAwMCkgfCAoS1syXSAmIDB4MDAwMGZmZmYpLFxuXHQgICAgICAgICAgICAgICAgKEtbMF0gPDwgMTYpIHwgKEtbMF0gPj4+IDE2KSwgKEtbMl0gJiAweGZmZmYwMDAwKSB8IChLWzNdICYgMHgwMDAwZmZmZiksXG5cdCAgICAgICAgICAgICAgICAoS1sxXSA8PCAxNikgfCAoS1sxXSA+Pj4gMTYpLCAoS1szXSAmIDB4ZmZmZjAwMDApIHwgKEtbMF0gJiAweDAwMDBmZmZmKVxuXHQgICAgICAgICAgICBdO1xuXG5cdCAgICAgICAgICAgIC8vIENhcnJ5IGJpdFxuXHQgICAgICAgICAgICB0aGlzLl9iID0gMDtcblxuXHQgICAgICAgICAgICAvLyBJdGVyYXRlIHRoZSBzeXN0ZW0gZm91ciB0aW1lc1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgbmV4dFN0YXRlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBNb2RpZnkgdGhlIGNvdW50ZXJzXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBDW2ldIF49IFhbKGkgKyA0KSAmIDddO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gSVYgc2V0dXBcblx0ICAgICAgICAgICAgaWYgKGl2KSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgIHZhciBJViA9IGl2LndvcmRzO1xuXHQgICAgICAgICAgICAgICAgdmFyIElWXzAgPSBJVlswXTtcblx0ICAgICAgICAgICAgICAgIHZhciBJVl8xID0gSVZbMV07XG5cblx0ICAgICAgICAgICAgICAgIC8vIEdlbmVyYXRlIGZvdXIgc3VidmVjdG9yc1xuXHQgICAgICAgICAgICAgICAgdmFyIGkwID0gKCgoSVZfMCA8PCA4KSB8IChJVl8wID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfCAoKChJVl8wIDw8IDI0KSB8IChJVl8wID4+PiA4KSkgJiAweGZmMDBmZjAwKTtcblx0ICAgICAgICAgICAgICAgIHZhciBpMiA9ICgoKElWXzEgPDwgOCkgfCAoSVZfMSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwgKCgoSVZfMSA8PCAyNCkgfCAoSVZfMSA+Pj4gOCkpICYgMHhmZjAwZmYwMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgaTEgPSAoaTAgPj4+IDE2KSB8IChpMiAmIDB4ZmZmZjAwMDApO1xuXHQgICAgICAgICAgICAgICAgdmFyIGkzID0gKGkyIDw8IDE2KSAgfCAoaTAgJiAweDAwMDBmZmZmKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gTW9kaWZ5IGNvdW50ZXIgdmFsdWVzXG5cdCAgICAgICAgICAgICAgICBDWzBdIF49IGkwO1xuXHQgICAgICAgICAgICAgICAgQ1sxXSBePSBpMTtcblx0ICAgICAgICAgICAgICAgIENbMl0gXj0gaTI7XG5cdCAgICAgICAgICAgICAgICBDWzNdIF49IGkzO1xuXHQgICAgICAgICAgICAgICAgQ1s0XSBePSBpMDtcblx0ICAgICAgICAgICAgICAgIENbNV0gXj0gaTE7XG5cdCAgICAgICAgICAgICAgICBDWzZdIF49IGkyO1xuXHQgICAgICAgICAgICAgICAgQ1s3XSBePSBpMztcblxuXHQgICAgICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtIGZvdXIgdGltZXNcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbmV4dFN0YXRlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBYID0gdGhpcy5fWDtcblxuXHQgICAgICAgICAgICAvLyBJdGVyYXRlIHRoZSBzeXN0ZW1cblx0ICAgICAgICAgICAgbmV4dFN0YXRlLmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUgZm91ciBrZXlzdHJlYW0gd29yZHNcblx0ICAgICAgICAgICAgU1swXSA9IFhbMF0gXiAoWFs1XSA+Pj4gMTYpIF4gKFhbM10gPDwgMTYpO1xuXHQgICAgICAgICAgICBTWzFdID0gWFsyXSBeIChYWzddID4+PiAxNikgXiAoWFs1XSA8PCAxNik7XG5cdCAgICAgICAgICAgIFNbMl0gPSBYWzRdIF4gKFhbMV0gPj4+IDE2KSBeIChYWzddIDw8IDE2KTtcblx0ICAgICAgICAgICAgU1szXSA9IFhbNl0gXiAoWFszXSA+Pj4gMTYpIF4gKFhbMV0gPDwgMTYpO1xuXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICAgICAgU1tpXSA9ICgoKFNbaV0gPDwgOCkgIHwgKFNbaV0gPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgICAgKCgoU1tpXSA8PCAyNCkgfCAoU1tpXSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBFbmNyeXB0XG5cdCAgICAgICAgICAgICAgICBNW29mZnNldCArIGldIF49IFNbaV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgYmxvY2tTaXplOiAxMjgvMzIsXG5cblx0ICAgICAgICBpdlNpemU6IDY0LzMyXG5cdCAgICB9KTtcblxuXHQgICAgZnVuY3Rpb24gbmV4dFN0YXRlKCkge1xuXHQgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgIHZhciBYID0gdGhpcy5fWDtcblx0ICAgICAgICB2YXIgQyA9IHRoaXMuX0M7XG5cblx0ICAgICAgICAvLyBTYXZlIG9sZCBjb3VudGVyIHZhbHVlc1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7XG5cdCAgICAgICAgICAgIENfW2ldID0gQ1tpXTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBDYWxjdWxhdGUgbmV3IGNvdW50ZXIgdmFsdWVzXG5cdCAgICAgICAgQ1swXSA9IChDWzBdICsgMHg0ZDM0ZDM0ZCArIHRoaXMuX2IpIHwgMDtcblx0ICAgICAgICBDWzFdID0gKENbMV0gKyAweGQzNGQzNGQzICsgKChDWzBdID4+PiAwKSA8IChDX1swXSA+Pj4gMCkgPyAxIDogMCkpIHwgMDtcblx0ICAgICAgICBDWzJdID0gKENbMl0gKyAweDM0ZDM0ZDM0ICsgKChDWzFdID4+PiAwKSA8IChDX1sxXSA+Pj4gMCkgPyAxIDogMCkpIHwgMDtcblx0ICAgICAgICBDWzNdID0gKENbM10gKyAweDRkMzRkMzRkICsgKChDWzJdID4+PiAwKSA8IChDX1syXSA+Pj4gMCkgPyAxIDogMCkpIHwgMDtcblx0ICAgICAgICBDWzRdID0gKENbNF0gKyAweGQzNGQzNGQzICsgKChDWzNdID4+PiAwKSA8IChDX1szXSA+Pj4gMCkgPyAxIDogMCkpIHwgMDtcblx0ICAgICAgICBDWzVdID0gKENbNV0gKyAweDM0ZDM0ZDM0ICsgKChDWzRdID4+PiAwKSA8IChDX1s0XSA+Pj4gMCkgPyAxIDogMCkpIHwgMDtcblx0ICAgICAgICBDWzZdID0gKENbNl0gKyAweDRkMzRkMzRkICsgKChDWzVdID4+PiAwKSA8IChDX1s1XSA+Pj4gMCkgPyAxIDogMCkpIHwgMDtcblx0ICAgICAgICBDWzddID0gKENbN10gKyAweGQzNGQzNGQzICsgKChDWzZdID4+PiAwKSA8IChDX1s2XSA+Pj4gMCkgPyAxIDogMCkpIHwgMDtcblx0ICAgICAgICB0aGlzLl9iID0gKENbN10gPj4+IDApIDwgKENfWzddID4+PiAwKSA/IDEgOiAwO1xuXG5cdCAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBnLXZhbHVlc1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7XG5cdCAgICAgICAgICAgIHZhciBneCA9IFhbaV0gKyBDW2ldO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnN0cnVjdCBoaWdoIGFuZCBsb3cgYXJndW1lbnQgZm9yIHNxdWFyaW5nXG5cdCAgICAgICAgICAgIHZhciBnYSA9IGd4ICYgMHhmZmZmO1xuXHQgICAgICAgICAgICB2YXIgZ2IgPSBneCA+Pj4gMTY7XG5cblx0ICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGhpZ2ggYW5kIGxvdyByZXN1bHQgb2Ygc3F1YXJpbmdcblx0ICAgICAgICAgICAgdmFyIGdoID0gKCgoKGdhICogZ2EpID4+PiAxNykgKyBnYSAqIGdiKSA+Pj4gMTUpICsgZ2IgKiBnYjtcblx0ICAgICAgICAgICAgdmFyIGdsID0gKCgoZ3ggJiAweGZmZmYwMDAwKSAqIGd4KSB8IDApICsgKCgoZ3ggJiAweDAwMDBmZmZmKSAqIGd4KSB8IDApO1xuXG5cdCAgICAgICAgICAgIC8vIEhpZ2ggWE9SIGxvd1xuXHQgICAgICAgICAgICBHW2ldID0gZ2ggXiBnbDtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBDYWxjdWxhdGUgbmV3IHN0YXRlIHZhbHVlc1xuXHQgICAgICAgIFhbMF0gPSAoR1swXSArICgoR1s3XSA8PCAxNikgfCAoR1s3XSA+Pj4gMTYpKSArICgoR1s2XSA8PCAxNikgfCAoR1s2XSA+Pj4gMTYpKSkgfCAwO1xuXHQgICAgICAgIFhbMV0gPSAoR1sxXSArICgoR1swXSA8PCA4KSAgfCAoR1swXSA+Pj4gMjQpKSArIEdbN10pIHwgMDtcblx0ICAgICAgICBYWzJdID0gKEdbMl0gKyAoKEdbMV0gPDwgMTYpIHwgKEdbMV0gPj4+IDE2KSkgKyAoKEdbMF0gPDwgMTYpIHwgKEdbMF0gPj4+IDE2KSkpIHwgMDtcblx0ICAgICAgICBYWzNdID0gKEdbM10gKyAoKEdbMl0gPDwgOCkgIHwgKEdbMl0gPj4+IDI0KSkgKyBHWzFdKSB8IDA7XG5cdCAgICAgICAgWFs0XSA9IChHWzRdICsgKChHWzNdIDw8IDE2KSB8IChHWzNdID4+PiAxNikpICsgKChHWzJdIDw8IDE2KSB8IChHWzJdID4+PiAxNikpKSB8IDA7XG5cdCAgICAgICAgWFs1XSA9IChHWzVdICsgKChHWzRdIDw8IDgpICB8IChHWzRdID4+PiAyNCkpICsgR1szXSkgfCAwO1xuXHQgICAgICAgIFhbNl0gPSAoR1s2XSArICgoR1s1XSA8PCAxNikgfCAoR1s1XSA+Pj4gMTYpKSArICgoR1s0XSA8PCAxNikgfCAoR1s0XSA+Pj4gMTYpKSkgfCAwO1xuXHQgICAgICAgIFhbN10gPSAoR1s3XSArICgoR1s2XSA8PCA4KSAgfCAoR1s2XSA+Pj4gMjQpKSArIEdbNV0pIHwgMDtcblx0ICAgIH1cblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5SYWJiaXQuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7XG5cdCAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5SYWJiaXQuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7XG5cdCAgICAgKi9cblx0ICAgIEMuUmFiYml0ID0gU3RyZWFtQ2lwaGVyLl9jcmVhdGVIZWxwZXIoUmFiYml0KTtcblx0fSgpKTtcblxuXG5cdC8qKlxuXHQgKiBDb3VudGVyIGJsb2NrIG1vZGUuXG5cdCAqL1xuXHRDcnlwdG9KUy5tb2RlLkNUUiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgQ1RSID0gQ3J5cHRvSlMubGliLkJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTtcblxuXHQgICAgdmFyIEVuY3J5cHRvciA9IENUUi5FbmNyeXB0b3IgPSBDVFIuZXh0ZW5kKHtcblx0ICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyXG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplO1xuXHQgICAgICAgICAgICB2YXIgaXYgPSB0aGlzLl9pdjtcblx0ICAgICAgICAgICAgdmFyIGNvdW50ZXIgPSB0aGlzLl9jb3VudGVyO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGtleXN0cmVhbVxuXHQgICAgICAgICAgICBpZiAoaXYpIHtcblx0ICAgICAgICAgICAgICAgIGNvdW50ZXIgPSB0aGlzLl9jb3VudGVyID0gaXYuc2xpY2UoMCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBJViBmb3Igc3Vic2VxdWVudCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIHRoaXMuX2l2ID0gdW5kZWZpbmVkO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHZhciBrZXlzdHJlYW0gPSBjb3VudGVyLnNsaWNlKDApO1xuXHQgICAgICAgICAgICBjaXBoZXIuZW5jcnlwdEJsb2NrKGtleXN0cmVhbSwgMCk7XG5cblx0ICAgICAgICAgICAgLy8gSW5jcmVtZW50IGNvdW50ZXJcblx0ICAgICAgICAgICAgY291bnRlcltibG9ja1NpemUgLSAxXSA9IChjb3VudGVyW2Jsb2NrU2l6ZSAtIDFdICsgMSkgfCAwXG5cblx0ICAgICAgICAgICAgLy8gRW5jcnlwdFxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBrZXlzdHJlYW1baV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgQ1RSLkRlY3J5cHRvciA9IEVuY3J5cHRvcjtcblxuXHQgICAgcmV0dXJuIENUUjtcblx0fSgpKTtcblxuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBTdHJlYW1DaXBoZXIgPSBDX2xpYi5TdHJlYW1DaXBoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBSZXVzYWJsZSBvYmplY3RzXG5cdCAgICB2YXIgUyAgPSBbXTtcblx0ICAgIHZhciBDXyA9IFtdO1xuXHQgICAgdmFyIEcgID0gW107XG5cblx0ICAgIC8qKlxuXHQgICAgICogUmFiYml0IHN0cmVhbSBjaXBoZXIgYWxnb3JpdGhtLlxuXHQgICAgICpcblx0ICAgICAqIFRoaXMgaXMgYSBsZWdhY3kgdmVyc2lvbiB0aGF0IG5lZ2xlY3RlZCB0byBjb252ZXJ0IHRoZSBrZXkgdG8gbGl0dGxlLWVuZGlhbi5cblx0ICAgICAqIFRoaXMgZXJyb3IgZG9lc24ndCBhZmZlY3QgdGhlIGNpcGhlcidzIHNlY3VyaXR5LFxuXHQgICAgICogYnV0IGl0IGRvZXMgYWZmZWN0IGl0cyBjb21wYXRpYmlsaXR5IHdpdGggb3RoZXIgaW1wbGVtZW50YXRpb25zLlxuXHQgICAgICovXG5cdCAgICB2YXIgUmFiYml0TGVnYWN5ID0gQ19hbGdvLlJhYmJpdExlZ2FjeSA9IFN0cmVhbUNpcGhlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgSyA9IHRoaXMuX2tleS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGl2ID0gdGhpcy5jZmcuaXY7XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUgaW5pdGlhbCBzdGF0ZSB2YWx1ZXNcblx0ICAgICAgICAgICAgdmFyIFggPSB0aGlzLl9YID0gW1xuXHQgICAgICAgICAgICAgICAgS1swXSwgKEtbM10gPDwgMTYpIHwgKEtbMl0gPj4+IDE2KSxcblx0ICAgICAgICAgICAgICAgIEtbMV0sIChLWzBdIDw8IDE2KSB8IChLWzNdID4+PiAxNiksXG5cdCAgICAgICAgICAgICAgICBLWzJdLCAoS1sxXSA8PCAxNikgfCAoS1swXSA+Pj4gMTYpLFxuXHQgICAgICAgICAgICAgICAgS1szXSwgKEtbMl0gPDwgMTYpIHwgKEtbMV0gPj4+IDE2KVxuXHQgICAgICAgICAgICBdO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGluaXRpYWwgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICAgICAgdmFyIEMgPSB0aGlzLl9DID0gW1xuXHQgICAgICAgICAgICAgICAgKEtbMl0gPDwgMTYpIHwgKEtbMl0gPj4+IDE2KSwgKEtbMF0gJiAweGZmZmYwMDAwKSB8IChLWzFdICYgMHgwMDAwZmZmZiksXG5cdCAgICAgICAgICAgICAgICAoS1szXSA8PCAxNikgfCAoS1szXSA+Pj4gMTYpLCAoS1sxXSAmIDB4ZmZmZjAwMDApIHwgKEtbMl0gJiAweDAwMDBmZmZmKSxcblx0ICAgICAgICAgICAgICAgIChLWzBdIDw8IDE2KSB8IChLWzBdID4+PiAxNiksIChLWzJdICYgMHhmZmZmMDAwMCkgfCAoS1szXSAmIDB4MDAwMGZmZmYpLFxuXHQgICAgICAgICAgICAgICAgKEtbMV0gPDwgMTYpIHwgKEtbMV0gPj4+IDE2KSwgKEtbM10gJiAweGZmZmYwMDAwKSB8IChLWzBdICYgMHgwMDAwZmZmZilcblx0ICAgICAgICAgICAgXTtcblxuXHQgICAgICAgICAgICAvLyBDYXJyeSBiaXRcblx0ICAgICAgICAgICAgdGhpcy5fYiA9IDA7XG5cblx0ICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtIGZvdXIgdGltZXNcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gTW9kaWZ5IHRoZSBjb3VudGVyc1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgQ1tpXSBePSBYWyhpICsgNCkgJiA3XTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIElWIHNldHVwXG5cdCAgICAgICAgICAgIGlmIChpdikge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgSVYgPSBpdi53b3Jkcztcblx0ICAgICAgICAgICAgICAgIHZhciBJVl8wID0gSVZbMF07XG5cdCAgICAgICAgICAgICAgICB2YXIgSVZfMSA9IElWWzFdO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBmb3VyIHN1YnZlY3RvcnNcblx0ICAgICAgICAgICAgICAgIHZhciBpMCA9ICgoKElWXzAgPDwgOCkgfCAoSVZfMCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwgKCgoSVZfMCA8PCAyNCkgfCAoSVZfMCA+Pj4gOCkpICYgMHhmZjAwZmYwMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgaTIgPSAoKChJVl8xIDw8IDgpIHwgKElWXzEgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8ICgoKElWXzEgPDwgMjQpIHwgKElWXzEgPj4+IDgpKSAmIDB4ZmYwMGZmMDApO1xuXHQgICAgICAgICAgICAgICAgdmFyIGkxID0gKGkwID4+PiAxNikgfCAoaTIgJiAweGZmZmYwMDAwKTtcblx0ICAgICAgICAgICAgICAgIHZhciBpMyA9IChpMiA8PCAxNikgIHwgKGkwICYgMHgwMDAwZmZmZik7XG5cblx0ICAgICAgICAgICAgICAgIC8vIE1vZGlmeSBjb3VudGVyIHZhbHVlc1xuXHQgICAgICAgICAgICAgICAgQ1swXSBePSBpMDtcblx0ICAgICAgICAgICAgICAgIENbMV0gXj0gaTE7XG5cdCAgICAgICAgICAgICAgICBDWzJdIF49IGkyO1xuXHQgICAgICAgICAgICAgICAgQ1szXSBePSBpMztcblx0ICAgICAgICAgICAgICAgIENbNF0gXj0gaTA7XG5cdCAgICAgICAgICAgICAgICBDWzVdIF49IGkxO1xuXHQgICAgICAgICAgICAgICAgQ1s2XSBePSBpMjtcblx0ICAgICAgICAgICAgICAgIENbN10gXj0gaTM7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhlIHN5c3RlbSBmb3VyIHRpbWVzXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgWCA9IHRoaXMuX1g7XG5cblx0ICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtXG5cdCAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGZvdXIga2V5c3RyZWFtIHdvcmRzXG5cdCAgICAgICAgICAgIFNbMF0gPSBYWzBdIF4gKFhbNV0gPj4+IDE2KSBeIChYWzNdIDw8IDE2KTtcblx0ICAgICAgICAgICAgU1sxXSA9IFhbMl0gXiAoWFs3XSA+Pj4gMTYpIF4gKFhbNV0gPDwgMTYpO1xuXHQgICAgICAgICAgICBTWzJdID0gWFs0XSBeIChYWzFdID4+PiAxNikgXiAoWFs3XSA8PCAxNik7XG5cdCAgICAgICAgICAgIFNbM10gPSBYWzZdIF4gKFhbM10gPj4+IDE2KSBeIChYWzFdIDw8IDE2KTtcblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgICAgIFNbaV0gPSAoKChTW2ldIDw8IDgpICB8IChTW2ldID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICAgICgoKFNbaV0gPDwgMjQpIHwgKFNbaV0gPj4+IDgpKSAgJiAweGZmMDBmZjAwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gRW5jcnlwdFxuXHQgICAgICAgICAgICAgICAgTVtvZmZzZXQgKyBpXSBePSBTW2ldO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGJsb2NrU2l6ZTogMTI4LzMyLFxuXG5cdCAgICAgICAgaXZTaXplOiA2NC8zMlxuXHQgICAgfSk7XG5cblx0ICAgIGZ1bmN0aW9uIG5leHRTdGF0ZSgpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICB2YXIgWCA9IHRoaXMuX1g7XG5cdCAgICAgICAgdmFyIEMgPSB0aGlzLl9DO1xuXG5cdCAgICAgICAgLy8gU2F2ZSBvbGQgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHQgICAgICAgICAgICBDX1tpXSA9IENbaV07XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBjb3VudGVyIHZhbHVlc1xuXHQgICAgICAgIENbMF0gPSAoQ1swXSArIDB4NGQzNGQzNGQgKyB0aGlzLl9iKSB8IDA7XG5cdCAgICAgICAgQ1sxXSA9IChDWzFdICsgMHhkMzRkMzRkMyArICgoQ1swXSA+Pj4gMCkgPCAoQ19bMF0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1syXSA9IChDWzJdICsgMHgzNGQzNGQzNCArICgoQ1sxXSA+Pj4gMCkgPCAoQ19bMV0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1szXSA9IChDWzNdICsgMHg0ZDM0ZDM0ZCArICgoQ1syXSA+Pj4gMCkgPCAoQ19bMl0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s0XSA9IChDWzRdICsgMHhkMzRkMzRkMyArICgoQ1szXSA+Pj4gMCkgPCAoQ19bM10gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s1XSA9IChDWzVdICsgMHgzNGQzNGQzNCArICgoQ1s0XSA+Pj4gMCkgPCAoQ19bNF0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s2XSA9IChDWzZdICsgMHg0ZDM0ZDM0ZCArICgoQ1s1XSA+Pj4gMCkgPCAoQ19bNV0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s3XSA9IChDWzddICsgMHhkMzRkMzRkMyArICgoQ1s2XSA+Pj4gMCkgPCAoQ19bNl0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgdGhpcy5fYiA9IChDWzddID4+PiAwKSA8IChDX1s3XSA+Pj4gMCkgPyAxIDogMDtcblxuXHQgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZy12YWx1ZXNcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHQgICAgICAgICAgICB2YXIgZ3ggPSBYW2ldICsgQ1tpXTtcblxuXHQgICAgICAgICAgICAvLyBDb25zdHJ1Y3QgaGlnaCBhbmQgbG93IGFyZ3VtZW50IGZvciBzcXVhcmluZ1xuXHQgICAgICAgICAgICB2YXIgZ2EgPSBneCAmIDB4ZmZmZjtcblx0ICAgICAgICAgICAgdmFyIGdiID0gZ3ggPj4+IDE2O1xuXG5cdCAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBoaWdoIGFuZCBsb3cgcmVzdWx0IG9mIHNxdWFyaW5nXG5cdCAgICAgICAgICAgIHZhciBnaCA9ICgoKChnYSAqIGdhKSA+Pj4gMTcpICsgZ2EgKiBnYikgPj4+IDE1KSArIGdiICogZ2I7XG5cdCAgICAgICAgICAgIHZhciBnbCA9ICgoKGd4ICYgMHhmZmZmMDAwMCkgKiBneCkgfCAwKSArICgoKGd4ICYgMHgwMDAwZmZmZikgKiBneCkgfCAwKTtcblxuXHQgICAgICAgICAgICAvLyBIaWdoIFhPUiBsb3dcblx0ICAgICAgICAgICAgR1tpXSA9IGdoIF4gZ2w7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBzdGF0ZSB2YWx1ZXNcblx0ICAgICAgICBYWzBdID0gKEdbMF0gKyAoKEdbN10gPDwgMTYpIHwgKEdbN10gPj4+IDE2KSkgKyAoKEdbNl0gPDwgMTYpIHwgKEdbNl0gPj4+IDE2KSkpIHwgMDtcblx0ICAgICAgICBYWzFdID0gKEdbMV0gKyAoKEdbMF0gPDwgOCkgIHwgKEdbMF0gPj4+IDI0KSkgKyBHWzddKSB8IDA7XG5cdCAgICAgICAgWFsyXSA9IChHWzJdICsgKChHWzFdIDw8IDE2KSB8IChHWzFdID4+PiAxNikpICsgKChHWzBdIDw8IDE2KSB8IChHWzBdID4+PiAxNikpKSB8IDA7XG5cdCAgICAgICAgWFszXSA9IChHWzNdICsgKChHWzJdIDw8IDgpICB8IChHWzJdID4+PiAyNCkpICsgR1sxXSkgfCAwO1xuXHQgICAgICAgIFhbNF0gPSAoR1s0XSArICgoR1szXSA8PCAxNikgfCAoR1szXSA+Pj4gMTYpKSArICgoR1syXSA8PCAxNikgfCAoR1syXSA+Pj4gMTYpKSkgfCAwO1xuXHQgICAgICAgIFhbNV0gPSAoR1s1XSArICgoR1s0XSA8PCA4KSAgfCAoR1s0XSA+Pj4gMjQpKSArIEdbM10pIHwgMDtcblx0ICAgICAgICBYWzZdID0gKEdbNl0gKyAoKEdbNV0gPDwgMTYpIHwgKEdbNV0gPj4+IDE2KSkgKyAoKEdbNF0gPDwgMTYpIHwgKEdbNF0gPj4+IDE2KSkpIHwgMDtcblx0ICAgICAgICBYWzddID0gKEdbN10gKyAoKEdbNl0gPDwgOCkgIHwgKEdbNl0gPj4+IDI0KSkgKyBHWzVdKSB8IDA7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuUmFiYml0TGVnYWN5LmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuUmFiYml0TGVnYWN5LmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpO1xuXHQgICAgICovXG5cdCAgICBDLlJhYmJpdExlZ2FjeSA9IFN0cmVhbUNpcGhlci5fY3JlYXRlSGVscGVyKFJhYmJpdExlZ2FjeSk7XG5cdH0oKSk7XG5cblxuXHQvKipcblx0ICogWmVybyBwYWRkaW5nIHN0cmF0ZWd5LlxuXHQgKi9cblx0Q3J5cHRvSlMucGFkLlplcm9QYWRkaW5nID0ge1xuXHQgICAgcGFkOiBmdW5jdGlvbiAoZGF0YSwgYmxvY2tTaXplKSB7XG5cdCAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICB2YXIgYmxvY2tTaXplQnl0ZXMgPSBibG9ja1NpemUgKiA0O1xuXG5cdCAgICAgICAgLy8gUGFkXG5cdCAgICAgICAgZGF0YS5jbGFtcCgpO1xuXHQgICAgICAgIGRhdGEuc2lnQnl0ZXMgKz0gYmxvY2tTaXplQnl0ZXMgLSAoKGRhdGEuc2lnQnl0ZXMgJSBibG9ja1NpemVCeXRlcykgfHwgYmxvY2tTaXplQnl0ZXMpO1xuXHQgICAgfSxcblxuXHQgICAgdW5wYWQ6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkcztcblxuXHQgICAgICAgIC8vIFVucGFkXG5cdCAgICAgICAgdmFyIGkgPSBkYXRhLnNpZ0J5dGVzIC0gMTtcblx0ICAgICAgICB3aGlsZSAoISgoZGF0YVdvcmRzW2kgPj4+IDJdID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICYgMHhmZikpIHtcblx0ICAgICAgICAgICAgaS0tO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBkYXRhLnNpZ0J5dGVzID0gaSArIDE7XG5cdCAgICB9XG5cdH07XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlM7XG5cbn0pKTsiLCJsZXQgYnVzaW5lc3NMb2FuVG90YWxEYXRhID0gXCJkby9YVjEzKzRTRGFJZXJ6T3pWYkJCOUh2N044eUpTeWc1aDRYMjVEcVV1amlJMFRpNndneFNubndGRUZyQUtmQy94MDhOTWx3NWZLZEM5ak9IaTdwcU04QU9uSjFXT1h2QWRINDd0LzUxUEhHVDNPNXpXY2psZVM2a1VHcHg0WTA0YXg5TUh2dDZ1QmI5Tkh2SEJoaHU0ZGRKbW9IY3l3Z3hhWXcxeXd4cmlDUEZPNE9EMWw3M2ZRbFg5aGlVQWV1OFFhdkc4TVkxWnVnV2RUTUE2clZTcnR2eUp3NnBPWEMvdnQyVmlEYmlNPVwiO1xyXG5cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUJ1c2luZXNzTG9hblRvdGFsUmVzcG9uc2UoYmxvY2spIHtcclxuICAgIGJsb2NrKGJ1c2luZXNzTG9hblRvdGFsRGF0YSk7XHJcbn1cclxuXHJcbmV4cG9ydCB7IGhhbmRsZUJ1c2luZXNzTG9hblRvdGFsUmVzcG9uc2UgfSIsImxldCBidXNpbmVzc1JlcGF5bWVudFBsYW5EYXRhID0gXCJFczNlZUU2bmRJa1dob1lYa09xdGdxRCtqWG5NQThSS1RHWWIrSXQ4NkZEZlZGNmx5bHZnWm1ocVg4MjcrTmE5ZVM2OTdVQWpaN0dVeXZFWVNzd0FFenJZTW00VGZWaENLaW5Lem0wNThMQ1o4SkRVc2tlVTN6OEtNVW53ZXhzUEZZVnVKS0xpTHpyT3dmRlJpVzhoMmtDWjB0ajFDdE8yU1gwbjd6ZUNDZlN2aW9aN0wyUnJ4UW9peFRtOWl0MGI5RDRVYTBzeUQwWkhsMmlPc1JCZitmMThwclpzMCtMZlZrR3FxQWd3ajFLWFVKcmpvajh3dUx0M1lTWlVYaHUxNFQ1VDhocE51alRyNFlCVFZKVzNoMHNPajNhRWM1K3k0Vno0dmFFNTJhSG1meDNTWXZNZnMraFNBUUZYQmpUNk42SUZxWFNOcDkxNnVWQVBNZzRtTHRrSGc2M3Q1S2VLN2Nwcy9lT1I4OVY2cndBU3BoZlUxTm9HYTdackQ3QU1ZdmpXYlFoUWtpYkNHdXZxK0lEWHJVVGNaUEZPMytRVVVydW9uOWVjeGxmVjI1MW5uSWNqU09NZjBuejBlWXY3bUxhTkRwN3pEblJBdnNMc2FUUFVPZnJFWDNkcGFyU2lnMTh2NThBT0sxV01ERGE0bXRGZFlvZkVIa0paSWloQUNMY3dIOWVPQ3MrZzNMUUlGV25QM01iSXVTZjJvbXM0WDFNRWplYXpyQTF4U3BnSU1lZU1MZkczbjB0NzduMU1DM3VQVzkxQ2x0RmFLRjdYR0hRZmZ0bE9aRUFMMFdYUG1LcUNCeDdZai9KTElmMFIxUlRJWWtYa21Fb1hZZXU1c01TVGZXL0ZqdjJYY2docFZhQWExYzY5RXljS2xqbyt0UzRNSTA1MVcycWlCTUpjZEEyMk9JZVc1TXJuSkEveTQzRzVUS1BsaWpnQVNuakxaeE51eXU0YVkrY25KbWpFaHR4Q0NxNmpwVTZQWXVyYzZ1L2o4MjZVQkNnd2NXbDZxTDgyWFpQSzg1cmFJa3o4dFZzWlJpNkNrc0ZMTW9TeGxTZk5zMU9hZi9Xd0IzUkVLVUhCUnhXSmV4UC9OcDlJVUVBMTQzSmVNMHFUcHozSEFoZmpLWHZCNEk3eUZxQ1R2dXZkZE9weStKOEJSaWxoci9GQjVUblJ5cnNReFFiTHlsNEp0bHJTZ1ZKRitDSlRaaVNwRCswUzN3bmJta3p4Y29XUk5ybW0xckMyVzk2eDA4OWJSYXBhTWpKQk54aUsvQ0FQYVlBUWl2MitsOUQvVzRRdWtxVHl0MWF3REVBQmtIb2F0V1NYNXJTUTgrUVE5RE5uYU1LdWl5ZmdEWHhZSXZsN0s5UG14SG5LVXU2d2xRQS9RaFZtS1hRY252WWRnaVRuMDdoVGI0TnFLTURlK2RxUENHS1pVb0VGNFNROFplN01yRVptY3B5RHQzSkZHRGxIazFUa0VFSnBWUzZDcjgvUWZsc3VrY3JGemNXWVBYZUQ4MWw2TnF5T2prdEp0Ymt3NGlQeFdkd0poc2NiYndrMTVoZG0zcGVxRFBMVWpmWVNUNkFpSjludnhxUlZHN21VdlBvSGRVVjV2dVFJazJiYW1CcHRTR3JlYkpmVjJVZDBkaW15VGdSQy9JeHBrQVoxRHRWUDVuN2h2aHZjNDRDcy9TY0txbHFpSjNBTytwTDVVTVhKZWNxOW50ZWZOcWU1R2o4MldmazhVTTlZendSQXpkM2cwZVAzSEtQMXhZTFRSR3ZTeHhOTW1iSmtyaEdtbkcweUkvNjN3ckRWTHZLZ3pjaDdjaldUVlRLeFJWZHFMZHhnRElLRWJDVlBGaWM0MCtxMTBEZWhpYzVNU0JpOHBnSUdoaTU3Vnp0Y2dYemZkcG81YnF3ZkZha2xqVGVETStyQWp2a1pvNmhReElBSGltcmJlY29heDZERTMxUmVwY3BiNEdab2FsL051L2pXdlhrdXZlMUFJMmV4bE1yeEdFck1BQlByR2pTM3liTFAwMzRab0QzS3BUSFplMldUSGVTOVlocHFtT2RveXo5ZHYwMEdRbkFRSXNBMEIzUTk3dmg3eis2b2YxaHJWSkRzTkJ2Z3RENDNiZ002QVIwSkhjclFyUDJNQzlqVW1HVTk2a3NoL1JIVkZNaGlSZVNZU2hkaDY3azAydmNMMS83b1YzaVNqMVF5U3dPRmJKZWtFUEZuMHZKc1dXc3Zzd09XQVpnV1B4NjQxTUdqdTBYc1hhMllBOHN6MXZMTmp2TllFRnp1SVVvQ0h2NGhHQnc4Nmo3cXV2bFF6Q3hCOUNjQWNlRDZ5MU5hVHM4SmJQbnZtUHYwT1AzdnhxUlZHN21VdlBvSGRVVjV2dVFJKzRReFJwckZQSm5aUm5RdCthT3pZditqVTYyQzV3VEx4MUs4S2tYUndDdnppOWhVSlpBbEo5blFRNFQ4aHZMd0hPcVNMU1VXTHhUOGFBWm5Mem5zZCtkYU9GUldDcU10MjFEbkMzRUJaMjhPQ3NIaFAvWWZLWEtrNEkzV0RQbjJyaEdtbkcweUkvNjN3ckRWTHZLZ3phNHl2czBEYXRVb0NWM2RTRzhIRDhuWmFwb09Ia2h1KzFDaldxOXg0SHhUN0RsK3hlN2JSeVcyRm9zZStDOU5kWlZiRzZ1OGFsRXpwSmFpQXlxVjFTN0pJUndEdzJZbElCM2xJVGFyVmFRUDMxUmVwY3BiNEdab2FsL051L2pXdlhrdXZlMUFJMmV4bE1yeEdFck1BQk9GTjJGYXM4akJXRUJ1bVN0N1FtTzUrUkNZM2xmTzI0a0tSeFRiNGpMWnlrdzd5MXE1bFc2VnV5dkxxNm9NQTE1RFJGbFN1T0hnZXdvR09GR3h6RjJBQ0h2ajcxZityZGZ6R3ZuWCtPakVTVXNoL1JIVkZNaGlSZVNZU2hkaDY3bFcwUE9lMHY5VExxcjBjQ3JQT250ZHFqOVluby9PQks1cHBCU2Q3VHhLNlBleHBkaWpZc3plS1JURDUyQnRGMExYK0dUVEo0MWgwYzJKakhJeGZRT0VYeVE5OWsyd2xoenpnWmJiNVl6V3p6NzJiM1NEejEvK1Z5S1JKdWFRZUdydnhxUlZHN21VdlBvSGRVVjV2dVFJMlNocFBXZ3pCM240UWdvVjQvUXFTc1FvR2d0RVd4VVBmcmVGbFVSSzdiT2hxeC85Wmk2VGtRVDZ1OFpta2dBcmFWLzhONElCRW41VHdzZDJnMWlTVytkYU9GUldDcU10MjFEbkMzRUJaMis0aTFXWTZXSThCQ2xQL2Q5ZjVGMVlyaEdtbkcweUkvNjN3ckRWTHZLZ3phaFZNS2ttYUZiN29WQkVtbyszT2ZKb2VEbXkrK3VMVm9Nc0xhbWNvODRRZGpMWlhuUTJJRDZQVStnWTgvNkpxaE5yV3hhWXBDY2FNR3ZFQ3NVWXVyNFdEQndIdjVTUlJ0RUFGb0Fsb3ZsYjMxUmVwY3BiNEdab2FsL051L2pXdlFsMjU3dmNXdG12dUNwclJXWU90ZlpnK09sN1RyMnpUU1FheDlNWjdqK2RmZE83YTVtcktwakxmaldJYjM3SmNBNVFBVnhPSVZ2TjFKZVN2RE1rRll4eGpOdElwaFU3M1FOSmtmL1hua1FoMnhaWFNxL0Y5VDVjeE9oOVpMRnVwRXNoL1JIVkZNaGlSZVNZU2hkaDY3bGlNcUpna3FwOVZGay9pZzkrVmNRTXVkbEtmZkxoUWQxMnNjd0ZDbWkzWmhtWDJ6S3NTSVlJUXdlVVJOMXV5cFRWM3ZQT0ZHUFhqbGJzVTBPcFBQMktwY3JteXVVUVJOS0RldlZ3VWJWNlJVaTJVR2dRbXpRbEpiSjBuOEQrSDNUdnhxUlZHN21VdlBvSGRVVjV2dVFJV2o4Q3IxeDRRNDEzYUhMdG9PQ0hOTjZvZHFubndkM043bWkxckdxVmF4enYyUTBxNEQ2NXNCTkZNSDJSNkRYQnB0OXZJNktyNHZKd2l6UHRuSXkyYStkYU9GUldDcU10MjFEbkMzRUJaMjlZYnd6WGlybWZHM1BQWEo3Y3Rib1hyaEdtbkcweUkvNjN3ckRWTHZLZ3phV2F1YUlRZjgzOFp1NDdrOU1ONk11M1NJb2VQQUh6RWNuby83TnlBcXBCTktUSWxadnZkTlBkRVhTM1dLNWNOQ3dqdTd3YXUwQkpXNjNVWGVLaGVObWE0MjE5dnB3Rk9oWHpUT2dOTng5QjMxUmVwY3BiNEdab2FsL051L2pXdlFsMjU3dmNXdG12dUNwclJXWU90ZmFQOHhzbXJTejZFZGdYbmk0OW9TZmZpaHplaC9jdW8yR0sxeTg5M2JackRINlNyQ3VwN2EyVkdOY1pZSnNaZ05tMkVCMnlzOVZXR1c1bHN6MnB4d1kzTVpJVmM2aEJlU1ZaUUQrczRnaXJUa3NoL1JIVkZNaGlSZVNZU2hkaDY3a1RVZVVxZ3N1MnpPd0drQ1J2UUdxUEY5NytTck5JUGoyMDlkNkFreXh0ODRBWUhwVyt6eFlhUGF6S2V5WmNXd3JhU0YrWjFPYW5RdWVKQlk2UVFlUlVDSXdiUTRjKytxSDdGcVQrNDFqQTN4bXdPdUYrdXM0amNoWDhoVDhjUTdYdnhxUlZHN21VdlBvSGRVVjV2dVFJTXRJaThFb1VRSzlUdmxiWHdlL3RUK2poeTUrbXl5bE1sRUplQXFMdG5sSmRhaGREc2htbjNveVRIeXhydUlhUXBPZ1ZpTk9pZEpPWm91SCtpT045QWVkYU9GUldDcU10MjFEbkMzRUJaMjg3Z0V0M1ljUjFtYjVqMmphUGpZSnZyaEdtbkcweUkvNjN3ckRWTHZLZ3pUeWFrcStrR29OdXM5dTJsc2ViSlFqUGVCUHppc2ZMdVZCZkszTjBobWtPK0pYdEFuMXU0YmZyRVpkMXd3ak5UK2pkZWFtUGtiaUM4UTdYUVg0cnNSWmFWUWw3WkpibThnZlo3UVNPeEpxQjMxUmVwY3BiNEdab2FsL051L2pXdlFsMjU3dmNXdG12dUNwclJXWU90ZmFHckhKWXNaQ0hzMzA3czdxVUV0V2ZBMlN3eU9BckxsVFYrMGNVOHo5d1lIei8yNndxaTdRcWRXR1JTbURELzV0MXg5azRpZU5LWmx3Q1JYRVlaUzRFS1lYMW43cFMwT1RiejZNVnppZVp6VXNoL1JIVkZNaGlSZVNZU2hkaDY3bjA5ZXE4SVEyam5CMHZKUlN6dXJCNzhHL3lPUzlvMjJMS0xTOGVjc2dsYVFNYkFQanBwSmNRMFFFdWtIT3pSU3FxZklBdEh1ZXl5Tk1OeU53Tm1FVjJHTjVoZXlKWFQwSnpUd2dMd3pXMmZET0VMV2h0ZmZUaDZsemNoOFU1QWF2dnhxUlZHN21VdlBvSGRVVjV2dVFJcnlnK3dwSXJnb0IrZ09OQWpEbTlBMlc1bDNtcWNWMmpzRWp1b0ZyZGg5SlN0d0tNQk1rUFZhdHhSSnhnTWtQZ2k0SVc3c0VmZ0lVZ1c4Qk8vSk85UU9kYU9GUldDcU10MjFEbkMzRUJaMjhuak5GN1FFZ1BXSElOc2VveEZGRE5yaEdtbkcweUkvNjN3ckRWTHZLZ3pTSjR0Z3Z5d3IxdW1QMGt3OUdKcFdzNjFwWk9kMGZWUlY1WlJZeFFidDRvYU5aRFhlOUV2KzJQanozSHFHaFJKdFNYb0pvOVpIQUNjUlN4L1B5MHM2TEN0Sk1nSFFMblQ0T2FhMC9EYWhYeDMxUmVwY3BiNEdab2FsL051L2pXdlFsMjU3dmNXdG12dUNwclJXWU90ZlpuRUxTdWtNVWtnTzdYRzh4Z0xQU014UWg4OWl2K1JsalFRY01pZE8yQTJrODI0Y1pJVExuYmRJK3lkZmhwNjhnQzc5WEN4dUJnY1FjZW44VXdqRWVYT052NXFHSEM3YjBwQ1lIUHYwNVI3a3NoL1JIVkZNaGlSZVNZU2hkaDY3a3lTQXJUZnFFL2xwc0FYeXg0TEdibDJtT243NGZqTjZvc0d3UDFrNVJmMDEvVWcwcnhmSEZ2eHVTZ0krT3QwQUU3LzNxOXlPWWxIM29RTG41eGtNZGxCcllyRzdpSytBVzgrV1FGdlR4MFk3RHE0SnNheTRWVFF1d2JhOGRObXJmdnhxUlZHN21VdlBvSGRVVjV2dVFJT3ltZ05aMXVVY0xid2NZWVExUDJuS3BJbGgvU3F3THc0bHBXM0RCVWM4cnZGc1N5TjlLeXN4K2s1aWRNRGI0b3p3enRJcmpVaXlITnQ0Yy9oR21kYU9kYU9GUldDcU10MjFEbkMzRUJaMi9ibmRFTnoxUldESlg1NUNJSG8xdHNyaEdtbkcweUkvNjN3ckRWTHZLZ3pWdnVvZjdpRUV3ZnJtdDYyRkdjVjVSUzg1cC94NDR2ZWRmcTkyK21vNWVGTVA3K0JmKzZPbGIwWmszRzlWc21laTNaUSs2UWNPdHlBRGRweUpKbStONDlYL0dyVitsa0JUSWNLb0xFbDdXbTMxUmVwY3BiNEdab2FsL051L2pXdlFsMjU3dmNXdG12dUNwclJXWU90ZmFJMC9nV2pVSmx5NSt4NFNUTlBNM3F4eWpubEl0ek53MjdtUXh3bDNTMkMza0dCa1hhY2hMbkprT3k3OFYxUXdUdE0wVmVIMmJIOEpJZ3ZoYkhCUnZDUExFYWVWRnIranVTY3hxNGtxUDlJVXNoL1JIVkZNaGlSZVNZU2hkaDY3bWVZOFJXK0NHdHZsTnQrLzBISXNOYzZQVUpMc2ZDT1VJRGVJWXNQeVpsNlpmVlllUU9DTUJpdU9TR1dwWTRXeENOaHJrODhHdkUvZVA5OTJVTnJTY1ZkY3p1RitMMHBZTFpOOWpYdktpN1BrMEdVbEs4MGlnOTlhamRZaU9SdkxEdnhxUlZHN21VdlBvSGRVVjV2dVFJKytQTDBCR1JhSzFqZFRCeXFRcjM1SSthdCtrTFFkVDRWUkNnT2Q4bHl5SU9SVktualVKMVhTa0dBMVZBZGM2M01ZRXcwL0crQVJKbWp2WVNDbFd1ZGVkYU9GUldDcU10MjFEbkMzRUJaMitWWHpubGdPOW9saHM4anBsNmZqRGVyaEdtbkcweUkvNjN3ckRWTHZLZ3pmNkxQU0V1RFkyMXhJbi9BVG5JQi9BWVRmWjFyQzh0ejFLdDBOMVZZb0E1UGtvTmJ6bU5TT0N0TzR0b2RsYmJKeWJFRTNLaDhFQ1V3azBhRVVNcUE3ejFOOW9NYXZrWWpoSGdRL2UzbEl1djMxUmVwY3BiNEdab2FsL051L2pXdlFsMjU3dmNXdG12dUNwclJXWU90Zlk5V3NNdS8vY3JNMFRpdTdpUnE5M2JnQkxSQ0V4VXdHS2J0N2EwejV1enhoTVdRQ29rdWVmcWVXREFLRnQzNFBjSGN2TlZ6N21JUkRlalZtWEI4Z0lwQ3ZrdTFHZXJta3VXdUJKL0s2Mm42MHNoL1JIVkZNaGlSZVNZU2hkaDY3bXhVNEVyQk1zenlVRFJtVXVIaUh0alJGY0w3SGdwUXVzUGxTZHAvSEg4Y2ZJc3h0R3crWkZtTzhoV1l5S2lWeXE2VERQN2Y4QVZaWFV4bVhFWFplQzhydzM5ZmVuUXJFYXUrRkxVQzhwdk1CYW8xTDJESFJEbk5Pc1dnaElNSFNudnhxUlZHN21VdlBvSGRVVjV2dVFJR2JMK1p4UVhDSkNsVThCRGVuaWtZc3dJMCs4QnJZdGNubVlLbW5VcFZ3dm9RSTZrOUp0U1BmRC82Q0hLV0c3YWRKNHdyU001eElQbi9GVTFoTlNPcXVkYU9GUldDcU10MjFEbkMzRUJaMjhTb1lzMEZhK0cwYVExUWIveFJwRXRyaEdtbkcweUkvNjN3ckRWTHZLZ3pSREZNc3k1MXMvUkxWamJhdEt3eE80RkZVeUFzTmxKVDArQXIxeHcrRm0vck9FOUVhR0dwS29lbzNQcUlFVmJXQis0dmlaNEFPOHNRWGNFZ2VoTXVJWkE4Ukc4VGFDdzVZT2k2aXprOVY0YTMxUmVwY3BiNEdab2FsL051L2pXdlFsMjU3dmNXdG12dUNwclJXWU90ZllaZEVRRUdLWXhyTVI1cXJZRURTYko4ZDRsZHY0SHkvWUw5VHBJLzU3SUFQMU1VQ1N2eVYxV3h0WDhsR29FU2NhT2ZuYlg0RTBKaThtS04zNm0vMHpsTWdtdEt4dEh2YzFCU3UzR2NVdnlwVXNoL1JIVkZNaGlSZVNZU2hkaDY3a0w4ZUZtU29OcGJkdnM4bVJsNElDSlJZVWZrdFRzMytmTC96LzZFVi96NG45UllwTHdVVjQvNXExVHZmR2ZZbGFuWkZ2Qy9qV0VzYVNXNDdseEkxeXNQVXp3ZHplVmh4M3p0U3Q1YUZxUG1HWGhUak5SbWRZc09weGN1RnQvU2VQdnhxUlZHN21VdlBvSGRVVjV2dVFJS0cwWUs2SXM3N05zRkc4ckZxTVRudmR6RVhDRXMyUjhBcEppTUFyMG5EdEo2dklIbTVqVm1pbGwrb2EyeHVPVUhnV216dGhiSHQ1ZjMzZllRbGVHSmVkYU9GUldDcU10MjFEbkMzRUJaMi9jZmY2bnUvVGFuTlB4UDBUQ0lZZndyaEdtbkcweUkvNjN3ckRWTHZLZ3pVbGdwZU94THFxTVFSbklZUUF0VDZMTjdUOWlCOThrK0J6K044a3E3dDdGaWdrbEc1U0lOMFJ1ZHl1UUxJL3V1WUJaUWg0WFdHTW4rR3FzcXpIVDdMTXdBcFV5YS9SM3RuU0JQRXdONFU2czMxUmVwY3BiNEdab2FsL051L2pXdlFsMjU3dmNXdG12dUNwclJXWU90ZllFRXlMdlErbG5xR2tjaFNwN2xrV21vT3FSeFA3K1ZwTHdibUdIVWYwTU5NcEJUZEJaWHhXYndicE5BVjd2c1JBcTFHREw5a05MTWtSUDdVVEpRanArT0FyOUNSOFZmOG1oa0hZa3QzMHRwMHNoL1JIVkZNaGlSZVNZU2hkaDY3bE4xd3BLMzlnd2s2bUJxTmVDV2ptaW5uMkh2OFh5cW5RQUc5T3ZJNmIrd1dzVDE2KzloajQrS1Q2K1I2SlFZUkVwZExDSndKNFA5SU1lMDllNTk0QjgrUmhRZnRHNUNLK1FCSzJKa3lBb3NJSklHNmVKSjRTVXJRUVBKOVI4NE0vdnhxUlZHN21VdlBvSGRVVjV2dVFJS2ZnN2Q2T1FPbDZ4RFJjbVhqMXZvL1VzSWJIK0d6am1BZkVFeUZ0SlNVQ2ZjSXdqTE02T2VYWnQ5TnZGUXZOOUpkcGdyZDZCVE9yeWRQRnlNdHpkSk9kYU9GUldDcU10MjFEbkMzRUJaMi83SmVVektFNlJqV0w1dEkvQ2lUdDByaEdtbkcweUkvNjN3ckRWTHZLZ3pjSHg3ZkoxdjF0Tlg3S3FEaHdVcmVCZnZ0ZHhuS1hCcy9QbHdDcS91b3k2N25ENXBFY1VqNk9Nc0o0NEttUnZSeWJqRG9NRnN1TC9oc2FmVitoVlZYalNLblFDeEx6UU00dTdYaGVVOWZQUDMxUmVwY3BiNEdab2FsL051L2pXdmVTOTk4blhUaGNJUXgwMTd4VkV1M3FpVUEvUFlVR3ArbnZJWi9sd0ZmWEdmNXU0cWVqenRTS3AwU1V3OTFoM291RXYxVUNmbmVrOWNhVnhPZ1AydTlmdjM5NjhCRXVxVHVEMit1NCtuNlh0S2pPd3F3YkZNVmtHRlZyS0ovdUVLRXNoL1JIVkZNaGlSZVNZU2hkaDY3bnV6QVlTYTBRMW1uWDNEM2cvbXhkejVENk1md1hWKzkrRWdSdWRIQWQ4c2FkQVlOZVNjc1VLRTErZnZINisrNTd4L2FaNVJKM0w1TTNKeE9vdlRQZFpNamJWaUJBYmZySWUvOXV0SUFUdjhwamh0RDFlT291NnJmT3Y2OURpN1JmdnhxUlZHN21VdlBvSGRVVjV2dVFJL21qU3ZUWHV3anR2ZUVSd2t2SzdjTFVjUy9Ga1NER2NtWE1BMVo3TjFjeEEyV2grbHAwdmF1dVBPUUhjUE51cWkycnBITDZkZnJGRjJpakJEVGR6NStkYU9GUldDcU10MjFEbkMzRUJaMjhROUZNY0VhUGRCUGlpWmpjR0JwRE5yaEdtbkcweUkvNjN3ckRWTHZLZ3piOXREOUhGZ1FGN3dCRTlYbmJsUU1WYW9BbnZ6eW05UTdQbWxrWDQ2blBPc3V5dEpxSGRGRit5WWt2ZUNqUkh4R1BKanlJSGpPaG1xdDVscjZWQnZBUS9WOE05TXBnd1p1cHY0NENYUDdOZDMxUmVwY3BiNEdab2FsL051L2pXdmVTOTk4blhUaGNJUXgwMTd4VkV1M3BvUzFybVJNN1dMOXRWVFl5MHg1QXp6bDJoUVlMemJXQWxXQm0rSDVKK3VDcnFEbGNycXdWWU0yRjE2L2EzK0ZzY0FCQ3l4VGNiTDR0OTNnTmUvOWE1cUI0bTRTaXhZS2Q4Q2JPWSsxWXFvVXNoL1JIVkZNaGlSZVNZU2hkaDY3bi9Td2VROElXeFZEcXBNc3c0dXIyVjkxZUw4Z0ZMeEVuOC9kM3NyakdsRk5QYkJPQ1hjenR4VTNrL2NCeDRmY29MUWI4SUlqci90RHRWRlRTSk5lQW9yMWxVVlhiZitkZXhYT2pjTzJYbmh0Y2YyOStHcGgrME8rWGptL2l2M05YdnhxUlZHN21VdlBvSGRVVjV2dVFJckd3cE11aHJlSGRQZVpxWC9jNTlHdGtpdGJiM3pyNC9rSnp6WFRCYjRYSGI5NXZqbURFMnJ4OHBFdlB5T3ppelVGcHlKbVkveDRsUFlTRVpBOENXTU9kYU9GUldDcU10MjFEbkMzRUJaMitiWUU1YS9UT0FuQ21xeEhaZ00xSlNyaEdtbkcweUkvNjN3ckRWTHZLZ3pVSFNzbWlKRVp1QVhUUWdSaHNGRlRpLzNSTWJzVk9NM3NEQUFmdEM5cytrSzU1dnltT2ZyZk5ON2R0Q3ltTHVXRzBuK2hjVVdQeHVJcVFmbUR1OXFyT3QzT0xVVGtHNjc4ZUpaaXJxcmtSUzMxUmVwY3BiNEdab2FsL051L2pXdmVTOTk4blhUaGNJUXgwMTd4VkV1M3JGS09zak9zN0x2cEUwWU9zVXpKdjBPdzAvYUlOSFlTYmdqZWVLQk5lWmdqMzhRNHkrNnh3ZVJwNUZVbEhTV3ZpUkRNNktYcEMyY1FaV2Fwc1c3QmtBK2EzeE1FQ1lERnBnZ3pFZWtoZWJCa3NoL1JIVkZNaGlSZVNZU2hkaDY3a0JCOW1ROUt1cGQ1NEtpcWZtOVhON0dHRXl3bU5vaHNkNnNtaURMSTJMTUVZdXhNYm9jVVp2cXdiYmp6TWRHRXB6aXZMOGtQWUJOL1BsTWRnZmVDaTFWdktZMy9OUkNVOEIwU3B1YW1WWUYwQk9HSnZKRlVoYVpNQnhVQkdub1ZUdnhxUlZHN21VdlBvSGRVVjV2dVFJcDVmYWpDcFA5bFl5K1k2MHFuLzhta3RwZ2NjODBRNXM4R0tYNDZRb1lsenlYak9CVHcrS3dqMDNpZG04aTd3VTlRRGhrYTM2NldQbStEUzhqaVpyQ3VkYU9GUldDcU10MjFEbkMzRUJaMithNDY1N2xGUmpNMlVYQ25WMXBRK2FyaEdtbkcweUkvNjN3ckRWTHZLZ3paRmNueFFiMXJYUUJvSytjZDlSUnV5alRJcVMvSU1SMUVKY1FVelJONDVoSGZqS1ZVZlN3c1lEMGk3WEQzRUt6N1kvMVpWNzBDS2hWZzc5Z3JiQk01TERIQjliNFZvN3g5NEptUDRIVHFmNTMxUmVwY3BiNEdab2FsL051L2pXdmVTOTk4blhUaGNJUXgwMTd4VkV1M29NVUNwRU15bkpoTERKdkdTbUxBQy9nZEY4VDYyM3BFcWtYdnVzQ0lyOFBaVnZQS1R5cnpKSU5TQzdmQnhFM3dqK3VvdkdCb0FZZVViQ2FUbTVEZE8yaDhERzAweXpsSklid0FVZ0VzOFRra3NoL1JIVkZNaGlSZVNZU2hkaDY3bWROakRFRUNBV1JjelcvYi9QT2pRRVBBTUtqSjhNemhDdnRMV3h2cjZUM2xUN1d4OFJ5ODZVVys4QUpVQUJqOTVMU2FVa1lpUTFwS3NyN0txVzFkc3draGtBbXd4OTB0cGcvZ2s0ejR6ZlUvbkkwK0RMS1ZUcHF4ZHdDeHUwemludnhxUlZHN21VdlBvSGRVVjV2dVFJOFE3SDM1WGdwemZlT1FEcFhkZUNLemRkbkM5MU1lOTdqeVplNDFzUEdsS0FqWFZHVE5vR2NnVXd5bXUvZmpwV2ZPZW03cldXcS9Ob1VUSUlIUXVlWU9kYU9GUldDcU10MjFEbkMzRUJaMjhCTFNOckxZTndwNG1Qd3BZZXNsbDNyaEdtbkcweUkvNjN3ckRWTHZLZ3pjV2cwSUFheDFVaS91clNtQVVVdWp2cDRoUHIzL1ZOeWJXa2lhWmZYTzMyMjdBemI0cGpyRnZHMzlxTE9XNlFISGZBcnZaZ1V1aVV1eVFoSkY4WDFIRXN0dDE2dno5Q1NvYVlpY016KzNLNjMxUmVwY3BiNEdab2FsL051L2pXdmVTOTk4blhUaGNJUXgwMTd4VkV1M3A4T0lNeXpzdVNOZFllSE43MUtiTzVla2pJcmYzVEFiS1J3dGhXWkM3c3RVS2c4OGRuVmRXQnlsLyt4VUpjWDJ5WHExKzh0TVZyQXJNS2tWMllMbEpCdytRVUwwaUl5WUZMYXZEb3BpQXF4a3NoL1JIVkZNaGlSZVNZU2hkaDY3bE95WTZVSjBTQUdkWGFiOC91NnFVWTFUSWxOMFRjZ2hvMkE2MW0xekpFZE4xNldRMkpvVWgyU25kVXU0dGxraWRubWVIamtjRlF6RmJMYzlSRlhpRzF2OFZtdUtvOWxqeVh5ekUySmFia0k0MWpSTmI3UW9nUmxnbi9lblFTbGZYdnhxUlZHN21VdlBvSGRVVjV2dVFJbzBzK1k1azR1OS8xRHMrOHhIQW5sU2wzUlpJUGZYdlQrWExsaTdDMFMrNm44aTBVWjdqSE0vc2FzWExianlBTnhOclNoZXZDSHo4b2lEdUNWRE9FdU9kYU9GUldDcU10MjFEbkMzRUJaMi9RbUtYUWlEMmpGS3RRYzBTQmxVTHJyaEdtbkcweUkvNjN3ckRWTHZLZ3pUeGd1RCt1S2QzSnM5c1VqOEVwcklvTDdMeHJzUjlGQ2JKYysvelV5dmFZQjZwZ2VjYWliTzlIS3kxTlJrWjQ2TnBEckJ1NW5KenQwY0ZUUjRMSGNiR1pQN1A2bGdKcWlRcC9zVUpCL2R1eTMxUmVwY3BiNEdab2FsL051L2pXdmVTOTk4blhUaGNJUXgwMTd4VkV1M3JKbnF2NTZaOHI5SGx4c1I2Z3lSZFdDN0pyaXN5eTBaYUcwT0NkSS9rNzJJYnRMMHNsN29HVEJFNDcwalE4T2NGZ1ZHNmd3QUhuZzRlMmxTclRIbFdFcFZRUU5uNFdFZW5WRWluaVliT0Jpa3NoL1JIVkZNaGlSZVNZU2hkaDY3azhydDk4N081U00vYjRuNFFuUjdBNkxxSFVMeS9Rb1BQZlNSVWdQQW5mRUZSb3MwQlFaTkR2OUF5TnlKdUZUN082WHpyalFUNkQ4KzMwUkR6WjVqaWxydGRCRXcwMjhUbnN4YkRXbmpNQU5qRlhFRmR2Z1U5Y0grVEhHN1poT1I3dnhxUlZHN21VdlBvSGRVVjV2dVFJTG9rODBQbWVPVU4wSFhib1NKVHY4ZE5maURkTThyK1RaRFpmeFo3NnJIb3Z0UkpYT2YxQU5tR1hSNDRrK09PV1M3V0N3Z1VVcDIzTi9yRWxsajB0cStkYU9GUldDcU10MjFEbkMzRUJaMit5MmlUZklKcWhUZ1dwRjNxZlF2SHZyaEdtbkcweUkvNjN3ckRWTHZLZ3pSbmtCZ1lyWlFPZ1BlMnNSQldNbTZQVWhRdXRKT3huMkxiVEkwb3NEczBhMU5pVFlaWWRXZjl6M3d6aE54c3JUTG5kQjVjL2gra2M2SmlpYlVvY1NpUkxLYVZFcHY3SGhtSitXc1BLMnl2dDMxUmVwY3BiNEdab2FsL051L2pXdmVTOTk4blhUaGNJUXgwMTd4VkV1M3BvRGtkd3lVNXV1UFZJdDcwZ1NpMStkMDB0clMwSGlQb0hCMVpXZWxueTcrYmdKUlJOc0hNTzNUNnU2UlQycXoyWlhhY2kvTkVuMTVWS0hQV0xrRGo1SHhobG14N0tSWlpXZUNIckJuMzIxMHNoL1JIVkZNaGlSZVNZU2hkaDY3bEJHZ0l4NE50VjVZRnlneTJ3eERJOGhJaS9OUXJ2ZWFlZ3BPRkxZL1lUT2E5aSs0QlMzRHhvWlBXRWFkSmFabkgyUEFUaWhWV0cxWFhYSFptNkQwUkZIaTYzdSt3MjYwdTBxRlRpMVRTYzlmWHBCM29aRFo1SmJVVUNmZFh0VWhydnhxUlZHN21VdlBvSGRVVjV2dVFJa05BeW1ia1FBUHpTU0dLYkJDendiSS9YV0JCS0d1SlhFVjBUaXVXeFdIVXR5Tkt0OFY2RVVEU01vbll0WkpjZ3h3VG1ua3F2U014Y1ZGd2pRM1ppVnVkYU9GUldDcU10MjFEbkMzRUJaMjhGekVtS0NadXNnRWJOSkx5dWs2d2xyaEdtbkcweUkvNjN3ckRWTHZLZ3paSHlmK0tmajV5ZDJ4VXBMaEc0K296bC9MTFV6Rjg5ZkdCYWhKaEFLVTZFaTVEUFZCMDJoREhYWXRZNUlDTzhOSUVydTU3K2tNTXNzSmptTTlCci9NeFVIQyt2QjIyVUYvaU5HN2hhNUduNjMxUmVwY3BiNEdab2FsL051L2pXdmVTOTk4blhUaGNJUXgwMTd4VkV1M3BBT3pDdzV2MG9VQkZPS2ZRM3MvbHk4MGlqcVBkYnZEQndoV3pzMS8rc3RlMFE0RU1pcHgzb3RRWFFmWmZXRkJDd3pLbDIxL1kyeVh5SDhpbHVPYkl6YStzZ3lSZkNnL1lST0NiRmNnYXFnMHNoL1JIVkZNaGlSZVNZU2hkaDY3bklZTy81M1J4QU5neGlRaSs2NW44YXlIT05rWWpBQTlzaFo4b2swSkVkTXVqbFVSNFozZXV3MS9IUXJ3eEVoVFozNmY5S3kra3I5VVpsUXQxRTY5bmNhTmN3bHZKZTRERWpFUjJLdTZqQW5vZ3FoYllKL1pMeU5xbWljUlhtTGw3dnhxUlZHN21VdlBvSGRVVjV2dVFJYXhNWDV2c0IzcjBSVUJvQnV5cTI3cjdLWGhETWtaSG8vaWU2OHdXZit0bjFtUmpudUIrTHNuMkVEbXFMa214OUxXbys5ajZKdm9WNXl6cHpKMHNDd09kYU9GUldDcU10MjFEbkMzRUJaMitvZVZObm1VM2xFbGFMZyt1MkV5dElyaEdtbkcweUkvNjN3ckRWTHZLZ3pYYjJOZkxGbFNDNXJOeTJpc1ZEc0R1cWlWSTcxT1lpYmI0dDlBNUt2MUg4eElMeW5Vd3BzSUJXVnpNdWcrakl0d2NNYXNYa1AyaXlYQms5eHM3U094RzJ5MTdsVWNXaGM2MXF3Lzg5MEJlVTMxUmVwY3BiNEdab2FsL051L2pXdmZ5R2xPMTN3LzM4Q3hyaGd3Yzg5OFFDQzN5U1pRb1k2UTRmTXgrKzZRVEdSRytpTExPcmxDTEFOcy9qcEJ0QVN1QjhqYUdiS1k5bkwwc3JrYmFMZ1oyVXB3d3lmaC9GMU1DeDFEQ2FyNWhZTE5rR0ZkdXZjUzNJMXVvc1E4eXV0a3NoL1JIVkZNaGlSZVNZU2hkaDY3bDM0L0FiZHVZSjlIcGRqRFkwRXlaZE9qSitTZldsTTdHSXlEOUEybUdqa1dUUWkwdEpTUkRnMDQ3TDQwMklJZzU1UlliR2RRcEdhejhzR3dyakRLOEZEQ1VvMWphRGZObGZmUEpMZzJmejlLckZkUUVUclB6VDdnNGN6aGRjV0hydnhxUlZHN21VdlBvSGRVVjV2dVFJaUUwNTlaeCtUZHFwaGJieW1hMVo2YmxKZmllb3BRQ3NpQ25zZFhJTjlkckpYRTArK3Z0Q1o1R01hZ0tKL2pSL2MveVhpam41OVZLdm53ZUw2dEJMcCtkYU9GUldDcU10MjFEbkMzRUJaMi9BZFBrdC9qL2RVY0k5SlJWdGdsVTFyaEdtbkcweUkvNjN3ckRWTHZLZ3piMHpqbXp5a3hkWWJMaDZueTQ1bE8vclRSaHE2VlJNek1pbG11OU81YTU1eFQ2T2VWZ0RUYjkxaGxQb2N3eXBpWVZpYzFpUUREN1VLK1p4VFQ2ckpPak5DZ0hjL0J4ZytoRGpaVkJVSTFCejMxUmVwY3BiNEdab2FsL051L2pXdmZ5R2xPMTN3LzM4Q3hyaGd3Yzg5OFFtSXFQSS9pd21PWERRUE94alFPTktsYzJvV3NNVlo0UHNqdHBTY1BOcm1GSGlNQlh3UUJJTFdXcTZ1UlBYTzdCdVZiNEp2UzAxTEE5Znk3TkZDRnB1NzZxOFBXNWw0ZkF0Q0hmaWVhbVkxRXNoL1JIVkZNaGlSZVNZU2hkaDY3bjhMQ1ZKM3lxdFZSQVQ4WnArdzROVS91R2ZqcVBmQXZrUHdseEFETmRYOWhsOUZxbUpyVTJkYTZLaEROeDl2VGN0Wk9IZlNLQldyalphTUsvUXdtSEQycEFCenp0Z24wdGlPcUxmVzlTYWw2emNNMFhhTUloZ0Zsb01oZTJ1enZIdnhxUlZHN21VdlBvSGRVVjV2dVFJK21reEI5R2dDZUJnYmFwbzlJK2dKKzRSaTBNVWVKZDRsd1EyWFkwS0ZCSVNuVEVoU0hGTSsyNkVPUWlOOHRmcTdkcHlpQ0k0eTh2aWNCcnVONEhmLytkYU9GUldDcU10MjFEbkMzRUJaMjliN2JZM1Z0ZW5FRWF4cnozN09abFFyaEdtbkcweUkvNjN3ckRWTHZLZ3pTMUtQdnVuYksyN1RIU096RTdNcDVabFNvcno2aGpRc3A0NFZZR3h2Smd0Rk1Xd0RIWXhTQ3FNV2ZBRytlR3FMSXNpZkxVajc3ZDh2dXk3eFFVMTEwaUlPYWY1Y1N4U1o5M3FxNkQ3VUlvMDMxUmVwY3BiNEdab2FsL051L2pXdmZ5R2xPMTN3LzM4Q3hyaGd3Yzg5OFJuT0RnSmJLWWEwN0dkSG9iVlQ1YlRRNFEwQkxzK0J1eDg3aHRNa2RZZkt0QW9LdmxkbWFHZHN6dm5wbzlBL0pnWDZUR1d3RGpmYUNCQ2VkazRnWC9wbTFKNDdQU09LQmhFOWVFaWYzdEJWVXNoL1JIVkZNaGlSZVNZU2hkaDY3a20yMWQ3SkV2a2M1S05Damw3dUNpNGNMZFFINkE0WWMrR1ZKQXJwZktWNEorV25BMUZCZTlCaXJnd1dxeG41R0dmRE5TYWJIWHFrQm93SnIzaGJubUJkN0dkeVVuM0FvMzFMSnBIUWdHTExMNmgwZjJBZUF2c3B2c0lESHVaMkNmdnhxUlZHN21VdlBvSGRVVjV2dVFJc0FZanZrcWtCemp3OEptV1piSmoxUG5jdW9DOEFqNThPQnMzekVKOHlSSldteGhVMGlTY3QyYXlRU2tJMUNPYXBsYTN1TFBjOUozODhQQm81aVY1VStkYU9GUldDcU10MjFEbkMzRUJaMjhrQzBSb0cyMXdtTCtKSnVtVXZQQ3pyaEdtbkcweUkvNjN3ckRWTHZLZ3pYRHp3VHZYSGd2aVUwYjgyVEp3YTE1cFoxR2ZyR2I0SGFJb3BOV1pKc0NmaWtlWXlHaTRLbGw4WWNUNW5aa0RMVTVuQjJ5a29VcDg3Y212RGtEci83bG5TTHF6UFJEdlA2TWJ1THVuNGNaUzMxUmVwY3BiNEdab2FsL051L2pXdmZ5R2xPMTN3LzM4Q3hyaGd3Yzg5OFFVQnJSWXZ2WGVNM25zM1ZzN0duZXd5RFJHV1A5Y1NEZjBmbTdrbE1EL3pHYXJDUlhyWHlvM00zOFc3RTlkUHYxcmdRRDNzMkFWOHEwNGVqYzR0VXRaQkRZaTdXdDRpcEpMWTFyR255RDVkRXNoL1JIVkZNaGlSZVNZU2hkaDY3a3JhTm1FZUhNNnQ4ZExZYU5PcDFBQUlZT1oxenMyeGNBUmMwUXFjVzJ3bm1ud0c1ZTZKazFTdEU3ZkJPUW1vZGp0VVpDSU01dFE3b3ZDNVY3clVlMzBzNlg4MmRRZlFzc2lWRnBod1MrRFRIWHY1UG12OWxTV0dQYVVNcjJtM05EdnhxUlZHN21VdlBvSGRVVjV2dVFJbFFIaWU4RER1YjVHOGlCZjdJdEtMMXE4OEdUMkV1QnZUZjZtM1c1dkdVOWRFeUVlK2g4dmJOMXRlb2dYUTBvQlZVQVU2dWtSVlkwWU5qNzQxNUJqSXVkYU9GUldDcU10MjFEbkMzRUJaMi81dEZDbnJaTUs1Z2tPRG5ORWpubVFyaEdtbkcweUkvNjN3ckRWTHZLZ3phQTE2d0dlaXVUSVExaTRJd25OcGcwMkVsbFIycnp2N1NuVG92RldqUkdtVGYrZzNoSnR5RUdDbFJEcEo0bTJhVUtMQndDVkpJUGtRSEFJRU9LL2dPU0Y1NDlqTjMwclpWcDJGSmJlOWQ0dTMxUmVwY3BiNEdab2FsL051L2pXdmZ5R2xPMTN3LzM4Q3hyaGd3Yzg5OFFkbkZaa0hRcll3ZFZpREZRR01ZZDNqNGlNR3dENVArTTJFdHVBQlpUVmFLZC8rdTJQTi9rTk9CUXFOZE1GeENXYmYrZWpIRHdNNzljNUN2endramJyK3NXSWI0SlZZN0JxVHRkQ1VKeERGeFZtS1hRY252WWRnaVRuMDdoVGI0TWxWTmlzdTNNV3V5KzRLdGZncDAvcHMxUWlGbE1lY3BRNDlNeVh4aTBXZnFVSEpNNm5ITFBjYXFCVDMwTnNDb1BYQTFrVlRDRHR2UittWGZNN2lEODh1T3p1YTBFU1BSRCswQTRkZUN2cnIwOEJSS2FobVZUZWxUbkg0M2JoTGpRRXhmS2k0RFlMNlhPdS9BdlVubTN1OWJ1L1lKcU8zcVpGVjUvZEt3dldNOEFHS1hpaWVpSnk3Sm10dUl5Q2UySkxwbWxJNVQwSlBKTGxGRnFIZ0hlMkRCMzIyS2lSV1Y5a2kzVDROVVMyNjZ0VzlmV1ZrUjFPMzEzdVh3QUNvZ2pobGNFaTVFeG1XelJ6a0Urd2ZQUnhxTDgyWFpQSzg1cmFJa3o4dFZzWlJoY0ZETkNMM3ArZ0NxclRFdG0yam5GWVBlQkpWYUR2eWs1ZHdwSEtEQzI0Y3ZRQWRIR2ZSM2ZZK2ViZi9UbW9ycHQ3RDNJeHQrTzNlWjBRTUNKd1BrTG5XamhVVmdxakxkdFE1d3R4QVdkdkU5SWhiV2x2TkN5WHd5VFo0YXNRWHE0UnBweHRNaVArdDhLdzFTN3lvTTFjOGFXVDNQYS9RODd6WDV5ZTY4QTczaCtJK3EzYW9QYVVPWFNzVmNSaWtJMWJVaU41T3ZEZ0tSV0tUNmw4aU1ENmxEUzc5T3VxK0ZDYnBkV2pIYWYzbXc0QnNtVkxTcVNpTUxzb29IbjEzdnJFWDNkcGFyU2lnMTh2NThBT0sxV01ERGE0bXRGZFlvZkVIa0paSWloQTB3c1Iwc3o2UkEzTkhEZnJaSHRtTWlZdkJjRjJkM044WFR6Y1hLTjNhWkZCeUkzRUlVZkkrTEN3OElTaXRZWkVYNkE1aFZKODF1L3FVa2pDeGNHdnF6dVJCendSZ0wwak84dmpaU2NmNkdTMG90Z3E1cjRjVHRZT3ZuRFFJLzd0SE9YRnpOSDAxcVVMYStLN01wK0lMUnFsYVQ3Tkg3U2lJT2hwZk9TRUNaYmJnU1hZNnViZFFqMzhCOGREaXFlWmxHVDFjcXdzV3Fid2xvOFl6MS84a0tFU2RlL2Y4Y1h1VjA4MWlsSFlaTnJId2lOeVhiUSttbXRzTGdGeXlNZzQ5RDRVYTBzeUQwWkhsMmlPc1JCZitYM1JoQmI3WUJFUWJSWndqdUpSL1RwSG82cFBuSGtpRE05MnYzWlFsUTdhY09PTkF6dENncXk2SlNabjBoOGcyYkFYUG14c1FkRzFUVU9PTzBKSjduTXNuNEhHa2dnR1MvSWQ0RTVuejNsR0JPcEE4SE1MeW91Z3NjUzNNQnpSVnUvR3BGVWJ1WlM4K2dkMVJYbSs1QWhrSHFqZWVIL0VzMzJGTTlKd3lpSERwYXJoQWFNRW9TWG1DakpwQXI4ZTk3a3ZBYzZScmdrbEdqTXg3cDJOWUhJUEdLMk5CNElFeHRIY2JMQTlmN0U5WWp2ZVE2R01Zc01sUU9rdkF4QkZxeFR2UmlwTkxzb2wxK3E2MkVsL0IzMS9EWUY0Myt4QWwwQzVDZXREbWp4Mm9ubUxQUWEwZFNoaFNZNVVGNS9JenhIaFJralVJTis1TkR5TDdGTnVKdFBlMWx5MTFRZlAyZDd4N2t1bG00dkE2WTlZYzdqZktoQk0rUU5hN0p6Zkt2Vzd0TWlwU2JuQ3BYV2Y0OU8vd2dPZnhSNldPQ2RITnBxS09pZ3lGamJTN1JMZkNkdWFUUEZ5aFpFMnVhYldzUE9RZTBmb0NKemNiSnJmKzlvclB5cFQydTRtRzBsbHdYVU16eXVuQ01YY2IwTDNNSDA3SCs1MHljdEY3dlJZMzMzb0VuMWNDTVF1VCt5NUtCZldKaG5jUFBpTGtKcWI1L3RwbkxXUWlGVm4zQkFQdG82VjhtMkV2YWk2QWRCbklFZVFINXkwb1ZHZ1NZbHJoQVA3bHVRZExCTGtNU1JUOFRkQWg0QTRxUFBLLzRUbGFvNGx5SmpRK3MxRlowRzFaeTIzZFcyRGppVlg4bUQxU05YN2NoZjJxRThqZzlxZnZoTkRrYjhFOEdtcVdvdjM5eWpCYkwvMDIyM1VvdHJZUGtzaC9SSFZGTWhpUmVTWVNoZGg2N2tOVDRpb0thS0VjTi9saXZVQVptZkc4aUFIVkp3elBoekJPWmJkWG95MnZGQzNoWmZOcDVyQ1NqOFVoUDl3c0FXUG45aHBSdjBLbEgyT0F2WUFEeTFuSmZlZXo4TzZaUWtCaU1TanlKb2NPOU1raC9lZ2dEK0xTQkRhcGVtbDlPREZEZE93MlV0aTBMZEgzM3dqb2s4Z211WVNTOGRMVHh0MHQyN1EyOGtSQ0N0R3BHYXI2bGlPS2xhSWFYTzJjeG92ZGRLNkR0V2diNWprdzBIT29SdUVGMFNZVXNCVEJTU3R6aXVkYkhGd25MbEwwNGNpUGVHbWtkbk1DVjhpY3FPWFRrclI0STBkY0Y0RmVicTZmVXNGMlFlRHJlM2twNHJ0eW16OTQ1SHoxZUwrcGJkUEpGbEpnZ2hWaiszY3pPS1NGZWt3U1ZlUEtnRjZCazI1dDg3Y2QrUjkzOGhqcVBsNUxyVXVYWkVPYjAxNFptQ3dUd0lhOGU2NDVXSTdOTUtJVytvR0loNDg5cU11T1F6a1pDR1pwWThoM054RE5JdFMyYU8zL29ZN2ZJdjQ4U2RtZkR6OGY2RXhieWkvamJnM2JQUEM5b1NHVUZHL0VxdDY2TmIxUHZUVjR1YWxqV1k4S2l4a0I1dUF4bTBhbU8xZ1pLRDdpMDdaYk0wdUh3WkxRNlZkc0R3dXJaaFNpeEZmQlpMcys0NEoxdTJHMU02bjUrYzhvU2tTMHQ5VVhxWEtXK0JtYUdwZnpidjQxcjNCZE1SUVZER1lycHhTUHZjZ1h3aDJDYlRoakpER1JTL0xqaEUyQy9SWEhiaXlCQlV2N1d4eS9xamdBd0FSVkFuOEx5cWJ2cExMaWRvL3JoeWRaVHdtR0RwYko0bEVBMmNWeUMwK09DSVNvZFZWazRFeVdON29MVnp1eXVraHRsTVZaaWwwSEo3MkhZSWs1OU80VTIrRGJMd2hRbjVjYnNRa0NGTUQ2L3Z0azdYTUl4V0pHK1VpNjdhUlgzSXZlN2dkSlY3R3I0anJMTGMvMlpLczV1RGpqU0dHOFRvaHhxU0UwcVBwYTZIS2ViRVBHWTR5NkwzZ0RNMkFZQXc0NnZZNTF4aCtVendYdjV5Q2NMYzR2QVJXQk1YeW91QTJDK2x6cnZ3TDFKNXQ3aTVZZjZpYnNJYmswbFdyVGp5T0NsRHVWUFEyV3RYZnQ2ejZ5SGF2SUdVd0FIZGx3ZHB3QWdaNTU4clo2NWxydXZnRTVzMWh2K1NPMHcwY0M3Nm4vVytzNWk0Q0krczZQVUxORlFQcm9MR1cxc09PYnZtcTRETHZHYlc5bXhjK09haS9ObDJUeXZPYTJpSk0vTFZiR1VhQlZWdWg3ejVXZ2FUYXNicDJBNUZGby9JNUdac0ovZW1Fd0pLSXV1anVRbk1kWW11d0F1Vndpc0Q0UGxLdUxSV1NNdVF6UjRveW4wampHZDdlNU1GTjUxbzRWRllLb3kzYlVPY0xjUUZuYnplUG9wbDFnUW9PSFFHQ05TMWs0YW11RWFhY2JUSWovcmZDc05VdThxRE4wVTY5L29ucWI1ZnlLMWVDS0xxOW1IcnEyV05QRjNZZ3pwTVlRN1U1dUNTbE9Sb1p2RXE2OUdDN3o1VU9xcTV3c1NWMnhGcVo5QnNEbWtseDlmRTJDbFIwMnUvNEtiUnk5Vzc4U2lYanBYRDZ4RjkzYVdxMG9vTmZMK2ZBRGl0VmpBdzJ1SnJSWFdLSHhCNUNXU0lvUUVqMTN2eTdOSUxkTXAwQVZCK1BBekFVNElIcXdLdHIwOHV4NjNObG4wMEhIUXhDSUFpSzExMzllc1Nob1Z2a0JpWVZhTTNxWTF5dVA4L05JaW9DNW1ZaExFNGd3YVQ3UWFSMko3UE1pdHQxdEtMWUt1YStIRTdXRHI1dzBDUCs3V1ZZamZiOWNQOHR4WkhrQ0dhOVhWell1MlRUWW0zN0w2MENQUjNuT3Z2dHZkRis4cEU3YjJGbVBzTEx3YllmQ1ArR1J3bFZLUmNDcENnYlc0K3NlSE0ybElhazVIdER5cUU5RERSMmRmQlV0SzVRSndzd1ZnbVJKUS9jeEMyQkF2UStGR3RMTWc5R1I1ZG9qckVRWC9tZ0c1T1RSWDlvbGZSQk9jbncwU3lPVWM3eE5mWE5wTHh6TEYyT0VMU1FjV1UzelZSVGJWYUx3SXdtMFl4US90L01ZbEs5aG9CZEJSM3hDOW9CMWhIc1BKaFhOdXZJQzlFaVVrdkxxNjQwSTNaRDNOeEsxZ1NNZER6V2VOTDU5S1B2eHFSVkc3bVV2UG9IZFVWNXZ1UUk3T2ZxeWtOZ3RENnhoaEpyZmtGNmE2TnpMNVlRTmVMZitzMWlQbmdaTVhwSk5peW1rNjBtZHZlSC9BRS9kZDdiSmd5ZFB0akttNUZpRXRoVzJRMVk5T0dBSFVOc1YzZktDVXJvb2NoZUJaRHRFdWJxNnpFT0drRDNRU3YwMzYxZmZ3MkJlTi9zUUpkQXVRbnJRNW84ZG5yeVZndUQzTGpNY0MxSGFWczVqVUhqZGViQmVIYk1ZdGVaT2NBRlkxa3VZa1NENXhlODNFamFtTkpHRzFBdG93NEZ3L3ZjN2NFd3JJbnltaHlrRXl1TXp3NW9zb1ZhdnZxM3ZqSXR4MjZTNkw1dW1jdUlObW5jUHIvZFJaR0NydTBTM3duYm1renhjb1dSTnJtbTFyQnNGam9KVERpRDBPdmlwTnhKU3BtUFUvRjd5WWJPcHZLQ2QwYklGcjVxeW44Qi9kL0l0NnNsTTZiT0tTcWd5N2lEUzF1Q29Eakp3OVR6QnF2T0h2dS9DbUtXZGpFd1QycldWUWZyd2U0cHg5d1FEN2FPbGZKdGhMMm91Z0hRWnlEZWlrRmh2TzJXNGgzbjFKMWs2REdNallPZUhjdm4vM0srV21uS0IreEZPMitZR24vaGJpb2tsV2RnMFNOV2ozRE9NcWZwZFAwRTBDc04wdTNjTEVDcU13U0s3TDZuakJGd1VCOUJMQUZDUUhNclk1aHlnMjgvMnk4aHRNT3JXQ2RMSWYwUjFSVElZa1hrbUVvWFlldTVvdmYwNFV5VzM3WVpZOWdYUG9XbVBGQTFyTlA0d3l6dkNoYmdpNE9CR0s3b01saXlyRHJ0OW9ndk4zVDRVMVN2ZjR4azdJYStWU0RoalpyR0RzUmJvcDF4Z1k3dGoybHFzVWUzTE4ycWEvbEV3VFR3NTZtZXF3Rk9ZeEpid3Q4a0JNWHlvdUEyQytsenJ2d0wxSjV0N29JemZSYmc2WWdnM1VTTW9aaE4rUE9UU1dWK0pudFlFOXlJcEVHdXlZUHhDSzE1d1FEeEdydlBjZWd3ZUZ3dllxbUdCQ1FRV1lCbldMajdxMjV6WVZlTmd3eUZVcXBybHNiRjRuWDgrZG9SMjl2U3M4cXFGNHFlRVlwMjF5ODcxKy9HcEZVYnVaUzgrZ2QxUlhtKzVBZzFjR21GeEZSYW1aVlNpT29pVWJKdnFST09DWDl5NWJKcXhtQUZqNkVLZnBCemNDUHZkKzFCVjFtaGx3TXdZWTZkeWhITCtjRG9QbXovNHlvTFEwOXpqaGFWYlZ1dXJwV1o2Q241SmxsN0pScWhkVURDVHBIT1NKdElSY0RyMWVIWkI0T3Q3ZVNuaXUzS2JQM2prZlBWRzZxSzMxNjV6ODVaQ0FyemlDbjNvQlRDMy9uelRTVjBYSEVkS0h0N2VmZG5JVUoyU2htZEpTSDJwNE1IRG5HUERzZjdlM2gvbXFuc1BaakZJZm9MdCtTbEdzQitDN0twS1hCdUJPSFlHSlY5c3FVUHlOWGQrWG4yajZ0VHdRUk1yaEdtbkcweUkvNjN3ckRWTHZLZ3plZ1NOUE5ET05GV25VWVhDb1lHMnhWR1h0NUEwRE5TeENMQ3NCdzc4NmlkKzMzUG1iR0tMT3lCV2YyZGg0ZkRTMUVHckhWTVZiQ3hDcjd5Y1RIb3ZtWEZORnNBSmdrbFhyamVkS3FERlQrNFFDSU90U2lZSFVqTEs5MGkyNjdNcGUwUzN3bmJta3p4Y29XUk5ybW0xckFUWjBtaUpTMHF1VFEveXFCOW9aUDBlbE03QmV4S1hSYXVyTXNQeVBVdVMxM01kNGdSSFptVnpwY0MzUENzQWlNVUhMM1lRckQ1SW8yQloram5UMFdXN05sb2dnbmdvMjh6NVEyb3ZwYmFjZDlVWHFYS1crQm1hR3BmemJ2NDFyMFZBcVNXVmVzSDFidkZMZjNCU2ovV0QydEFRRmlsa3NiYkdOQzRjdEJCblZZVGM4TnEvbFc3bWthT1lKSzdyeWllSURpOFZURnZISS8weVpqVHBoNWtkelpJRCtMeUltWjduTytmUmx2b3VqZGpSeXhCOXBtZTl5ZlRzNlZVMFRxMG90Z3E1cjRjVHRZT3ZuRFFJLzd0QTVYcUh5L2dZTkZwbk9vL2l6VHMxc29yRENldmJuSytWS3hjek1RNzhGY0xscFJVL2lGUU5xeWs3NjVlL0VuUy8yTHNxT2RicSszWnRrUjE3TTFCRzhtOTRMYjlNbjJPam5taFlPSEtxNCtaRk01ek5EOGNtWDFUM09GOC9HNndTeUg5RWRVVXlHSkY1SmhLRjJIcnVjdUs1NTJmcTdBRUhOTFNjcW54UXJINEo3WnJFS2ZtUGtoSXJJTjZhVk05Q2lVQ2xDdFowN1d5Ymt5VHlHNEVJWVlEQW01dEFrU2NacUZvd2dNZVk5dFhDUjNaNVpxd2M1cVM1MWJ5aVFzWnBlS0V5d2FQWUpDam1LalZtNWJ2RGdURjhxTGdOZ3ZwYzY3OEM5U2ViZTc1VEpJQVZtemozZWVzdDgwVXl3N3M2V0pENGszeUdma0pLWmhWZ2dkaVVUMFJhRDBLbUVMaU02dDE0TlBkY3ZiRXVEeXRJQ21YSGdGTXloengwOVorR0NHWlBuT2kzT0Nxa05IdzhDSzhhd2lLanpvd3B6UXFZZC9xWlE2SzZxenZ4cVJWRzdtVXZQb0hkVVY1dnVRSStsaGt4OHBlTUJCeFhwbDNQWVNiRWRwc3BJK3E0aUp6ejZTV3RuQ2IweG9lZEdQYi83bkl3Wkk1S0J2VVFLM2ViREl4MnVJSTYrTW9jK290YzQvR1FMbDc3Y0FTdnVSTXczaUhEZVFIVm1uVTdVaFZFcnoyY2RVYUNDWFZyYTJ3MlFlRHJlM2twNHJ0eW16OTQ1SHoxVzJPMFFuYlV5OURVbDFYSkRBaGZnblZJZ3BCMzEzV2VyeHl3a1U5cm5BV3hDdGNDREgxT0xpY3pGQ1VpYStvZkE0R1V0WnNYUlNNbFN1NGk1S0xJQ2ZrcFJyQWZndXlxU2x3YmdUaDJCaVZEbE00RWJuNDdwV2ROci90V0JZNTU2NFJwcHh0TWlQK3Q4S3cxUzd5b00xWGV3V2lQYVc5RGhVVGtGa3JIM3c1N3RsVnRUMkJOVGM0UFRUUEFjNC96N2VVWXFBbjFnTjVIeGh0VDJrcG5sSURiSkhKSWVvMnR2ZWMxb0NHd3F3ZWFiM3JqZkV1Q0R5bDhIQlhtT3g1MnFPdXRpTDBjaDI2RUlFeTFyeGN1bXJ0RXQ4SjI1cE04WEtGa1RhNXB0YXdvM2NCVStqWmFpOC9CZGNhTEhqT3VadGlZZnQ1MFl0RkJNbE93d0VyOUh6SllGd1hlb2VEOUpzUVdvd2JOeEcxdXNjejJvSzR5SHhCS2taRVdNMy9uOU1UcmRBRmZVNzYzSnJLU1pDbGcvZmZWRjZseWx2Z1ptaHFYODI3K05hOUZRS2tsbFhyQjlXN3hTMzl3VW8vMW9YTnJ6UTVvWFJsTENXWUF5YVkrR2xiaDlnT1FPdXVDeXY1NUFVM2pZQXR2YlVQTTJKVlBhb21iYTVXRmJqM0wrOXZzcVZSS25LcUF2dnZtdk9uZXRET0xOTjMrZTdEelVQVW0yMXJOY3MvdEtMWUt1YStIRTdXRHI1dzBDUCs3ZUNHS1VMWk1VY3BIa0RXZTlqSXNrTC9laVcwVWYreHhQZ1ppVEFnSmlpSUZWbkNYeGNJMUQ4dXJXZEgvMEZ3T2Z2ZXQ3em1HVC9Qc1RSazlQQnQ4ejVGN2FaNTk5dFo3TmI2aHpsZUJweCtYa2lML2wxcFA3QTB2ZjR0Y0ZwdE5rc2gvUkhWRk1oaVJlU1lTaGRoNjdrdXpyVkNmMm9aVm5vSEwvN2xXcDFjQ0t1bWtrUkZPT1JQOVdiVURaOVdSMzBzUGNUUXlTZWhRbjc3SmJUU2V6NmhxN09CdEJ0aFVEMkpGQnp6emp4MXZFMlAwRTljOWJUb2lwTnVmQzA5Rk00Mk04bFZlSmt4aFhSNk9KVEJyMFlFeGZLaTREWUw2WE91L0F2VW5tM3VxWUNnV2t4eXhJbHFlakhTbWVGajJud3ZjdFBtS3FaQnJxTlVEUEVxajZ4ODRIWStlSkdaRlgxTzRPZjR2YzdNMFZnSU83cU5IN0E4MC9XQUg2Vk02QjF0cDdicUpVTlNZcGQxNStQdTZzYkFsMmVoNndTQnM0SW0zYmQ0VFh6TTc4YWtWUnU1bEx6NkIzVkZlYjdrQ0FXWUplY0lkb2hNZGxnYmNZSFl5dERJQUhDaXBaQzBUVGtKVThxUDRCOGZEM1Z0ajZjc2RHZUVXNlU0QkF6Qm1WMTlxSmx6dklndEYwNDhmMjhDN1lMVTBvUTVENkl1bmRUekQ0Z2lKTUpzTzhPanN4RHVpSldkZEtrMzVyQ21nZGtIZzYzdDVLZUs3Y3BzL2VPUjg5V3NxaTQ4WUxWdEovaE9ZeHVINUdsMmxJUWFOeHpFRzdrZEF1c0dyYTBoNDJBOHdiZ094RnA4Q244ZTZYdktMS0poQm9OQnRWVHpBQ2NkUEp2b2l3aG01S1Vhd0g0THNxa3BjRzRFNGRnWWxYRlFIOWVpSVpPbzNtbE5pOVY5aU5TdUVhYWNiVElqL3JmQ3NOVXU4cUROb2FBY2l6OU9DUXBkTDRKMGxhcS82M2I2eE8vTWJlYjN6ckpZRDJkdnFIeE9OTzV3RVE3WENyQSsyUjlyV3F4NE91TDR2NERkbmRwekxGODBaYm9ZNU05WkEzMnZDb3h4Y2M2UzdJWjh5L1g3ZHV6TnRlRWt3NDluMVc3UHV4em43UkxmQ2R1YVRQRnloWkUydWFiV3NKZ0tXSmRUb0YwSDRsQzEyUERhSFF5d2ZiT2I4aFd4YnV4UUtaQVdBUWtLTjhJM3NlZDJNRHZEWlo4MEVGNXRiUkMwQi9jSTNRK0pvQjVZR0hYQk1rWkZlTHpoa1dvL2NDOEZseGpUOWJwbTMxUmVwY3BiNEdab2FsL051L2pXdlJVQ3BKWlY2d2ZWdThVdC9jRktQOWFVSEVQTlZvMmxlQzQzN05qZ0VCZ1ZVR3l5UDFib015Kyt6ckZZaDVZbzJ5QUZQUTA1KzU4V0gxam00bnJ2aGJ6M05jYmJ3d2phMTBocklRY09EbmkwY01hU3AwcGp6UW1udUxPTFhhcmdWN1NpMkNybXZoeE8xZzYrY05Bai91MHVISVFPbElpNWJ3NFIwalE2VVpMM3dKWmZBNGlIOWVTWkluWUg1SDBuVWJkM2VtbXZYUEg3YU9HNFpTZ05kL29GMHUyem1qRjRBSDRZai9rRUJUZVJcIjtcblxuZnVuY3Rpb24gaGFuZGxlQnVzaW5lc3NSZXBheW1lbnRQbGFuUmVzcG9uc2UoYmxvY2spIHtcbiAgICBibG9jayhidXNpbmVzc1JlcGF5bWVudFBsYW5EYXRhKTtcbn1cblxuZXhwb3J0IHsgaGFuZGxlQnVzaW5lc3NSZXBheW1lbnRQbGFuUmVzcG9uc2UgfSIsImxldCBmdW5kTG9hblRvdGFsRGF0YSA9IFwiNmNIbitrL1VWN2JSVHE0bTRYU29zVGU1L1ZLV3pYbXNmU1JNcG9TZllrcEIwYmZJcWFpc2ozbnVkUUlIL09mZ0luWDdUR2ErNytIZmdyQjJlcGpHbCtIa2xaOE5UVmhMVVk1TXh2dm92ME5xSk5OZGFDUXorUTNmakE1cXlzVDJ5QVI3V1lWSGc1THh2QklZb01hRlNHdmdtUDVaQmhROXQ2Y1p2OC82TjRXam9vTVprWEEvcWsvSlVyMXhUbjVxU20wR243c1pUaEVrV2xmQmp6QXRyVjgyNVlybjJtd2dqMXZaMDJHMWlFQW1zb0RSVjFORVJZUEx5UzFKNG1pUnV6MVN4cGloRzZCc0U5aWkrMzBSeDN1UjNXbE01R3d3ZHJmZjF2VFNUZXAvTTcxb0JiYWt2VFZaK21ZL3NzMUMxR2lPYjQ2WHkzQUkwQUMvdEZ1a3oxQUVDUGdYczNmVldKSEFyWGZ5Rm5rbmVsVjVzbnRONFhYZ2ZyUGhqVjZSMC9BWHBWUmRESUVrdm5UdWRvOU9UaVlYcmw3NTZWWS9tS295a2E5V3RYR2dKLzloVjkzQnNSTm5Ud3pRWUlreVVDYnZISmNxdGtCSythbWYwajE4LzJ2aTdWWlZ5d0pUMjJHNUtIMW11K0lheEVublZyOEE0YmVQUjFadXRMYWQ2RUUrQ0J5b1NlbXh4TmVJWDZKdm9aQVNtckxsYW1hY1RkWG5rNVd0ZDB2OTV3WTFDeVo1K0JxTlMxeGwxY1prSVV5cXVmbFlGQjRCeFI4d2tqRXhocm1EcXlYZGZTQXVTVGI1RlluTTg5TVJmMFdwNXBmWFNsbE1UUjM2Z0s4VDcycDY1VWNlYW5iU3M0cDNzUm1sQzVVQnhMWWNtUGRiOG14UTFFMWhrdUY2cXAwMHhReDNhSm5Jbmc4VFZIcTBKMG95UTcxbjZOT0YxUlJQSE15dnJSTklLRVFaS2l0ZzhPSFlKckhOSTYrRTJ6OGNVMUNuSmdyTlNDMm9xVTBtbnNTRWJlNkVHWmQwVTJVZkpkVWxhVkM3c2xOTXMxZGxpcER6a2NLM3JhNi9ma2RiSHFDN3haNTRMOVpnU2VMbnBlUkE5QXVzN21vVngrRDVwOU5nTjEyb3lzQkIzSGZ1WjhrU3IwTlBrSHYxU2ZqQm5Uc2xHQWZqMW12Y0o2Tk1tMTNSeFJRb1ZncHBUYkJRVUs4Vk9naitjc2pnNmpiZFN1dnE2cmcvWGdvTnlmNHlpN2h2TmdOeXZJNFFjU3E2MWo1VVdqbXVuenU2ZFJveGxGMDRCOGZ6ME1mQTZOYnBuZ09xYjdRczlGZmhmRTUrWktuVXNuNG93ZThDNlNSWFBjdy9vU1VCdk9GUEwzTFh2SXZlMkdsU09sa2F2amRGYWFWeDZiTHBZOFNuR2pPMWNBNFRYcmJkR001enpXMUVGZkcrYVJuZ3lBVTZlc3oxcmRVUTd5UkMxdDBmZTI5RGQ3SmdLUXdUS20zMzU2dVVwZUR4WmJQaWVEcERZdzR6WXMzUmtFRHpCZTJwZ2J4K3EwcWhKaCtSLzFEWDFUMXovL0l3YStMQUliaml1eFFRMnZsUGZ6dUx5WWZ6eEI4WkV1M2Ztd1NWanZrOENVcWNsWS81L0lPMkhhNitxZVdjenh1clFVM1dSbUJEOEJKL3RteTV0RU5NYVBPWjBZQzZUV0FsR2Q2U3gxVzVlNHRtaWR4T1BzNGhxa242SFhLcE41Q2JxUDc0WUgzdWdhOW5kajExQUNkVTFwNDdWdmFzeHBENytjNUVtTXc5cE9sOUdvV29YNVUvdXpiSDc4SkgvME9PM05IaTJXS3kvdGdpeExjdjBoNVNDangrMm1pd1AwUHVraUxCTExmVjZFVlpNQWJ4WFhhYk5xdXM5czBzd1NJcjdTQXFHbG91eXlrTkltcFNaUVg0dkZVM0ovU1RYMzZlVllEZlZmUW42V05xODB5VDZuREZQVHJpdmJuU2RFMXBUSElRL2lhR215bkNEaDlBRXNxbEN2VytsMFc5Qktnb0M0VVJZTFdPSmFDU29QTFdxc25TWnBoUk1rVWZNdW9vRnNTY2czcz1cIjtcblxuXG5mdW5jdGlvbiBoYW5kbGVGdW5kTG9hblRvdGFsUmVzcG9uc2UoYmxvY2spIHtcbiAgICBibG9jayhmdW5kTG9hblRvdGFsRGF0YSk7XG59XG5cbmV4cG9ydCB7IGhhbmRsZUZ1bmRMb2FuVG90YWxSZXNwb25zZSB9IiwibGV0IGZ1bmRSZXBheW1lbnRQbGFuRGF0YSA9IFwiaHVJMjljWE9LaFlKT092ZGdKSFhiRHVOaE84OFJHRTNmdzZVNStaQUZqaExFZkNPc0JtWlVjeGd1Q1dIb1pndzJVS3VwZVQrcDdLVnBWdHZ5SEI5TVYrS2xVMldoRXRMOW9tQ3lLRE5JdnBiTVd6ZXJtU05UQzdFK29PNkVSbmJxVTBzamgzaE1xWGpWaFNkaTJmRWNReG94ekt1QS9RRytoNmtIZkxxVWVsL0RXQlVsZDNRY1FuM1hsS1JFSk5rcVM0SHd0ZEtQWXNmNlpjUnBVdVFjSVpvZG5FS242WDFkYkJReWRGWVVrVVFRWTdJZU9TclR4RjNkOWtHZ21BOVhyLzZEUXpJeVNla3JuVHdwWHhzN0l0T0RBSmNlQ01hcHZUdWxOdkZVa3E0UHptY0lqNnBYWjJTZmY0c2hSQ0c2eUlUWDYrYmhLUXNaK2cwR3FsNTJ2b2RkcjduTUhRWTNXZjhGYnZLUGtDenVjaTdDZnVzUnlUNlNBdjJrMmlDZ0N1WUpSd3VRY2VBRkR3U0EvU1FuYTRhVGE3MnJxYkFjVUxpUU9LNlBsZ2JtaStCVnZ4MEpFUlpybHFjMWZpcVgxc0RLcTlOY2xFU0pHVS9YMVpHSWJUVExvK0NzSUx6VjJhUzVxN21ML3I2TDFqRmdRQW93SStWcytTV0E0U3pVZzg2QnJwbkZwL3hNVmVENmZuRkVtNGxWS3U5TkJZQS9GQ3g1blYyUzNCSXkzcFRQQUJnaGpQa1VDd1NLenprTGpwb0NDRDZ3VmFaMG5tUWhEQWUrdVpDQjhuVXVBZXVUUzRlQm8vTVdIQkhDd2svTnFwZ2ZQVW5TYWh0MUJZR0JPWXhLY3JPOWN3ZEFuNVlyVnlhRU5KWXVYUndUTmhITW5mUHQrYVlHMTZXZWhEUHNIN1pId3BrdHdHUzhHVWRzWHRVeXI2czZVQldxVHRzOWZiTHEvaXJKTjYyNU14Qng2WmhuRU1EMkJTL1pSZjVjWWNDMXMwa0QrQXRvMDA3cHkyQm1CVUZsL0w2b1EwMVhoTFIzUUxWMm1sV09EMHhnVUJON2ZmcENqYnR5Zi9sZkxiSTZKeUdCbHI1ZTlyQTRybE9LdzBWM3p2VjRCOFlQbTJ1V01Db201T3pQbUpBMUlSZ2NpOUJMWHlxc0hDRVV3UFR1UEtvektFWWpqNlIyTEdaZVlGenI5cFVLdHB1ZFMzQXo0aTZWOHRONVJSRzRHQWpsRWtKdnNhRDVKK2grUUlZMnU5MnN5OVEvcU43VlFKS2xZMGthc1k1amJoeWZPS2JNODFsQ0MxSlJQeFp0VmZ3M2ZBZC9qVjFLa0pvUzhPRExTYVBDbStFWUNEUnVvOE1ZVlNsMW44b2dqb1MxSVgxR0FJMUVRVWZtb1FWRlpOSm5KRmNOQ2VKWEpCa2trZTVndzhQZXhyMkcxSkFyK2tyWmFQeHlmc2JwMHhKNlJodS9LNkFJckhnVnJHOWZjQXBhNVZvVjF0bi9hMndPazUvUkYrcFB2SDJFdlBkSlRwMUNrdkhPeERFMytJN01mbGluM0pQZ0JNYjNiL3FUd21EN2xqWkY3UW9nZ2VORDBoYVN6aHJBb0NYTVJQVjFoTERJV2JUeUtFMDJETG1QZW0zQk1sUXB1QzMrUGJKcURSdjFFN2g4Q0Z0cUw0YlR1M1l5ektnVUJoQWQ2UHRiNDB6Vit3c1Btc3pudDMzWkVReWRCekNEeWNVNXo1VzFmb2FxVTBJdW91Ujd5anBnRGNMa2ZxampTQkZ3NWk1MjZNZklhY25tMGNHN1RnQ3l4cjFnb2pPeS9kV0FoZVg4WEhFazhwTzJtRGZuSlpyZnJpeXFTV3J2cWwxbGMvOWRzR3R6dTNYWWFyb0IxMnpoQjBEb1Jqam5RNzdYOGYwSUdId3lXZnhoVFZLQWt0RHVnbTJoR1I1bHdIT3dIWmthTUpmcklPdmhTMG1oanBvbldmM0lQY1Zsd2VwZVdFcitQcFYrNjV5WnJ0TEpXS1pKakRTQnBLWWZhcmNGSytWTndJTFp6SDVGSWVWYzRNd1g3bVlaZXJ0N2RBNnl4bHVleEFFVGJNNzlJVi9GbzVzWSt3Nm1Ma0tKeGtrNVBFVjRtTG1xTzVYM0VxTmJERi9COWZyL0l0T0RBSmNlQ01hcHZUdWxOdkZVa3JheWw4QjYvWHBpVkY2eE5IbGN6bGxxT24zejJNd1pVK1hBM042SVJpQTFtMmdCb205QU5zRGEvYW9YdytQQXcyenVjaTdDZnVzUnlUNlNBdjJrMmlDMXJPemJtT0FHck1XSk9aK2NPZ1BaSHVLc3A5bDhweUppM01xVnhDQjRpaCtTL0xnTjJlQUZ4OWduZzVBSzhLWlgxc0RLcTlOY2xFU0pHVS9YMVpHSWRrYVdGSDFaaktleFFDcHNuMmRMRmF2TDRvdjVSVjVuejdKblgvT1JqZVdVZzg2QnJwbkZwL3hNVmVENmZuRkVtNGxWS3U5TkJZQS9GQ3g1blYyUzNCSXkzcFRQQUJnaGpQa1VDd1NLenprWWhDckVjcHlZbXliZHVjUUMyNDMxYjh5M3pZUDRBR1IweU11SEpjTkhLWT1cIjtcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUZ1bmRSZXBheW1lbnRQbGFuUmVzcG9uc2UoYmxvY2spIHtcclxuICAgIGJsb2NrKGZ1bmRSZXBheW1lbnRQbGFuRGF0YSk7XHJcbn1cclxuXHJcbmV4cG9ydCB7IGhhbmRsZUZ1bmRSZXBheW1lbnRQbGFuUmVzcG9uc2UgfSIsImxldCBjYXJMb2FuVG90YWxEYXRhID0gXCJiZDNvY0Zrek43MGxhK1BCN2kzdFFpS3AySWsyUnJkcDRTell6RzBqK1MzTEVaUm9SRTErMHA0dFM2aThtNzU4YzJOWVMvWHpDTWtRV1ZmdlFwTlZSTHBLWFl0bVgveDJtU0M2U1EvTHVlNUUwSzgyWHZoUzFOaW5PS0NSaTd0S05UUGE4WnZKdVcyWnRYSGY1RGNpdGxXV3ZCZkYyVThrVm83K0ZQYmhaLzNzOENEd2pQbTZQQTNQdDhJSlRTV1hUVzFmKzlobGpHOWNRT0dROFAxYU54NDB3K0lvcjB3ZTRHQ2hoQXM0RlFaRWExYzBwU1lmWTUzb1EzdXRaYjNrN0s5SThqTHNQWTBLTHMyejNyaWhXOWtpdDhKajdlUGh2d2JrQzV6SmJ6TkJTdy9TZnJlQ1hmbGdJRGdIbE9lb2NBQWF4VXdJaGxSRUl4ZWxyM1pOQVNtMUJFQzMzRytsK2hOY2JLbUlZbWl4QVAyaENDU3BnSzdROUVwbE9ybmFOMXBaNWJJYWNERW1kRXdtTGEydjZZV0RGUWhEZzVBVFlYVnJpU3BTYXNiRGNVc2dWM2N6S083TmNKMllPMnFtSTRKZVppTGQ2TEplNWE5bFNlUktDajFKNjQwRy9ZY0FCVUs0SzA4S1RoZGEzNHB2alk2QlRSb2cyMjI5ekxwSU82azNvSGFvNUlhbXV1QkVpcWxKWEg1UGRlYlNFOFJOLzVXK1ZZVTBVb2EyYnVxaVZoYUkwcE5HNXZPTjJKTWNEekw2cDlyM1JWcFdNdURDVytYLzV0ckFiVi9PWFhuMmVCckVvZ3JkK0wrRnhrQU1DWE1kL0ZGOU14aUtsNnZIM0ZHY0JxQjBieENSN2h6aWVTTExHVENWRTZHZjVhdmFnRjRNUWxIRmVPVzZJRGJpbkluMUV0NXpUa3E2S0pzSzFTUTUwbnRYcVYvUUt5RVlmNnRqZExoZlhiV3A4WDdXeUphR0JtNDF3ejJCVHZUei83REZRczJzQW84MlB6RWZSY2tQSnRDMEhLM09IS0NGK3grOVBkTWg0QnpJTndCNmFqTmZ4YXk1TDRmZzFyQS93bmNFSm84Wng2OC9MZ1JVTHduZS9IdE82ZFBvVVVmR2lNV1BKdFR0cEYrWHZWeVA3RzZpTnRnbHJRUy9PdEFDNmlsNVNjVTAwSjBLeFZtN3k5U0U5TEVNS1FvMlhhWGdlcUdGallPSUJvQnAvd2VwMC9vQ3pRT3d3d3gvbi9jcEJNVE13bzNvRExnWnhOZGROT00yTzVhTVRlblJiMnZVWlo0c1A4RmlQMzB3Smw0Vzg3Z3BxMjZRUVQ3Z2JNdWxhY3ZNYmZkbkF2L0RtSG5ncGl5TDFuN2h1emhkU05ERXJ5bmZTNEFEM3dEU09UaE5jOUZDeXFtWkI1d3J2RHNJT2gzRVFxQW5SSjQwMlVKSkdkTkhJMVVhaVRnV3U2eGNnWTZUMDQ3RWpTK1pVVTl4M09vTG5DTzNIVFVydi95c3I0WXFVaURmVEJlTlVhN2RnWVdya3FJVkJtNUN3TEJicUl5U2s5dkd6TzJEdzQvSzNDK0RsVCtrMFZuSGhKRCtLWkZSQlBGUkpVNExwdytHcC9ORHhLeXlIQXMvMy9KSFZUZy9oZWZxbWZvekRHZTVxcjBRd0JMbHVrT3FzSWw1eW1VYWlpMWs1SDN1MldPSjg3Z3E4S1AyTXo1cXpndjByQ2Zya3ZFS3NqNS9tYVJEOENjYjdQRkRVaDdybmtWK3BwTS81NDIxMHhlaHk0RnpnbEV6bHZ6OC9uRkpvKzM3VDNiMjBvbi9LMFlLRlFMVkJ2NnpCU1V5U2c4cFZOWkF3Y3JaWFgvcWJacjJNQ0JzNFc0N01wS2FoeUNJQkpoMmt1MzFwakhNZ3NqZm9qMlY2M2RSRWJFMlVBWjdoT3N0RmpndDRXNnp3NmJqSzhyditQWDFkd21uWFdUbWNDWTJUZk1TMi9rV1JSNmJCSVRGTzVZMnlYcDNCdWRlNFB1bjd2SlRoRHZGdDE0OTZ5dFB2eEVBa3dmd1hzbmxQR3l5b3d4QVJoNVRUNVlNaXM1aklIZkc5TVhZbU1WNHpheVEyMFJkSHZGcFN2Sm5hR2JvQldnQitwaE1ZWkJ5bkhQSm9UaDNoVWlvRzNjcUswMEtxNGVOdS9zOFFZODJIeGJYa01TamYvUVVNbjJXeFhpWi9XSHA3QXIrMmFFa0xTVm5hTCtSQ21WTDZEdG9SQ3lUbXNQWmhiZlJYRmQrQzZHVVE2WHh5OUhVd09XU0IrQXVMT2pXTmt0dWVjT3R6MGcySlFoUXRNZm5lWHZETFJKMlg2Q1hnenZ5c3N0c1I5S0dSTVhLNmlyZnNpZk9ncStzVUxOVTRzRWtrVk1wSmtjTlgrR3dRRWF1YUhiT0t3QnVEd0FUdFZ0QnpuajRHdmI1YTlydENuaWlGL3ZIYml1ZzIxaFdRbnN5bys5SmJQK1N3bjF4aGtJT2RsTytIVlVwMWpkNmxrVFpZdXJFYkwveHMwNkZPZjRJQlBBOWVpUVNrQWQxMW0zcDJkN0hPMnlEanpRb0t5czRxVHZET2J5aTMvTko2SHZpdzZUdzl0eDA5MTczb1FlOXArYmlOQ1dOY0d5L0JoVjI3YUs3ckNEODVBMkpQVXRtOUs0ZXh2QUNJcGFTR3c4TDMyaTJjVjRydm12LzIvWHQrWEVjRTEwTk1yMVBUWlUxNWVmSURWeS8wdFZLWnB3NFVSTnpvZTFvMWZvV2JBT3VSRlJNemF5cGViakNrdWY5NUM3WHovMTlpOTJ1OE1Wam9hUlpZU1pyMW5YblJHdVRCN1JqMDRHS2VvSnZLWlNQY0tISkhKZEtrZ0Fwc1ppZnJ5SXpuTlBWdUZLSWM2d2xJRlQ1elM4Q1A1QTZvZWV0bEZrTHBtT1dtQUhzdElEVk5vYldaVmtLaTBZSzFQOGFPc01acnZFWXErTWRRZjE3M2QraGQ5d1VkbEpPUXVNWEN3ckl0TU51TndDV08xaGVTa3IzRGNnZjJPNFROazRrWmhWTnIybzZUaTl5SjYwa3BKemoyU2JyYmZNeTd6YkJVYm9MT3YyM2NsS2tHOXRVMm1OTERrbERkM2ZlTndJb0M0TkROVlZKSGNqSGVqTE0raVNnMS93Ny82c09mdFErYjU4cW5PNjBTQ2txVkRwek44VkkzQW9zS1d2SWswQXd1ZWJCTEdBNFQwWUtacEUvRFh4SUlSanRQRms0THFuNHFqd3FMUGRPRnBwTDl2R2FqNS9RQXF0eVBGVDUwa3c1SWRQak1Zb1pZdWRQZStTdzNPaHJVK0w0YlVYcWQxeC9SRURvbmdpL1JHQmo0OW5ZeDRkb3RPSVpIemRHMHZiU3hIa01ZMzRaT01IVUdWT29Ibk42eXpBeUsrUmhMeTVONXpCSitjaVU3L3UzQXFGZHZzWllZeWx0Y09yaHpZZUZWM0NwdXE5STFGdnl1VzNWd0Y1aXgwdHR0Q0x1R1AxeEc3YTdxbFJaNjIxQm5jendLdDUxVE9GZ0VzQjMrZ2twTW5kVHpNMFl0MFVJd3Rxc0RQYmY1czE1THh0TXpIRXRJN0VqdmIvZ0VGRE9uMEkzbTRrQ29QY0NXd1B2VnJpY1VxcFBrVUowK2oza3lrTXBSS2k1UFU2S1V4M1RIZXF1TEc4WUR6US92c0xGTVNWVTJuNnc1amh0L1NoUmZtWlZYRytCQUkzK2l1S21DVmp1YzNZcWVVMGFmWTMzS3BaNHJPQk1GSTVuUENIS01tbi9IaEFGV1ZnSEdSWUkyVVNpd1EzNGVLRzJmcUI1WE1oYUROamlLZDZNeEdUd0R4OGZUaXZPWTlwRmJ2ck40M1RmZDh6bGtpM3c1NTZWejVjZHJxVktoSWw2YVJ3ayt4UzlWM0FwVFh4aEhvendEZ0RLZ0pCMjBHbjdMT0JlVG52ZWgwekI1QzhYTjc5RnpQSWM4RFBTV2RHT3FNNDZYWld4OGdYSHk5OEI5T1lxVHRDWDdPS05QSGpXVXVqR2lBQmpUVndwejJkNHRLTndCSnd5a1orcU1YU0FOQTJ2eEVpRGV2ejRJVWE1MzRhbFZIenQvYmV2SnFxU21qZmJzbmZIa2ZraXpZOXFLdUwvU3liRmVKeHdUSHNmNTZPUW1LYWZadDhGRHMwWEk3eXJ3VzhUM2tJam55eGEzMFVtM2NPbHZCbHhCWU40ZTd0bExjZ3h3Y3ZuZnZVODlXSUNSTzJXSitLc3RuT3Rydm1VVGo2SytiQnY2WU1QRE10aXFCSnVMZTl4WnR6YWhGUVBsOXFSR3djS0ZxTUo0ZFJ5UEJ3YjJEdzdXbjByaXVsUWtuMUpDdnlkRk4vc21YbGVJWXR6N3hrZGpTUmZtclhOMjBITHBiMTRYdVJZeVlyeGZZRnZSVzlGeHE1WW1kcVFQZz09XCI7XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVDYXJMb2FuVG90YWxSZXNwb25zZShibG9jaykge1xyXG4gICAgYmxvY2soY2FyTG9hblRvdGFsRGF0YSk7XHJcbn1cclxuXHJcbmV4cG9ydCB7IGhhbmRsZUNhckxvYW5Ub3RhbFJlc3BvbnNlIH0iLCJsZXQgY2FyUmVwYXltZW50UGxhbkRhdGEgPSBcImJkM29jRmt6TjcwbGErUEI3aTN0UWl1QXhBUUhFQjVsVUE5dlFXclp3TkhMRVpSb1JFMSswcDR0UzZpOG03NThaWm0vVldiaWJCN3NGZmw2VnJMdUtsQkE5UnZ4cERIbWx5V09XKzlyNEFsRTBLODJYdmhTMU5pbk9LQ1JpN3RLTlRQYThadkp1VzJadFhIZjVEY2l0bFdXdkJmRjJVOGtWbzcrRlBiaFovM3M4Q0R3alBtNlBBM1B0OElKVFNXWFRXMWYrOWhsakc5Y1FPR1E4UDFhTng0MHcrSW9yMHdlNEdDaGhBczRGUVpFYTFjMHBTWWZZNTNvUTN1dFpiM2s3SzlJOGpMc1BZMEtMczJ6M3JpaFc5a2l0OEpqN2VQaHZ3YmtDNXpKYnpOQlN3L1NmcmVDWGZsZ0lEZ0hsT2VvY0FBYXhVd0lobFJFSXhlbHIzWk5BU20xQkVDMzNHK2wraE5jYkttSVltaXhBUDJoQ0NTcGdLN1E5RXBsT3JuYU4xcFo1YklhY0RFbWRFd21MYTJ2NllXREZRaERnNUFUWVhWcmlTcFNhc2JEY1VzZ1YzY3pLTzdOY0oyWU8ycW1GREJFRzc2ZXlKTDZBMEdOemp4S1pEWEcvWmR2Tmp1ZXgzbFBPdktWREo5MUkvaG02VDMwS0RxcHgyRnVCdW5TRVJRQWltYUdYMndiZkpKeTlJRjQwUHdKZGUvT0x5R3RTN0hhOUxhR0dnYlJnVU9Wd1k4N0pYdHJNaU41OWhlZGVmbVhqVDA0eTBERDBEbWlOeVpqeGZmbTJxY3B3WHFSb1c4eDdsd1Znekp1U21Va0dyckN1UGUyQWFMZlRXU2hycTVqZEhNUXg5a1V5bVptMUZlYVU4WlU1SUc5WlhMMS9Leis1d2F0blVMOHV4TW9WV3Q5aklsWmgraHNDMU5Vd3dLeHM3Ujg2ekRhZEx2c0NxRm1nQzk2OHd4ZTAzV1A5SXZBM2FvR3lydG82VjZiY1NwTk1tb0h4clQ1Mm1sN3F2VlIrVG5VZUdEbE9oYkcyL0xaRTRzWG44UFdjVWRxdVRFVXV2U2NqYjB4R0ZXdHBZL2czNDVyQUVZN016Yzl0dVVZSlM1RDFrTmxYMXVVRGthRVoycU1Za1plOHNMcVFwcDY2M1FENmo0REg0YitrT2JYaFBRc0VoK0VBUEF1czJkanZOU3ZXYWc0Z1NQMVpvL0VreTUwTE5EYjR3NlI2eDRMK2JmbUlIWnlUcE5BSUZ5cVhSa3dPbjBMZ3hsaDNGVkk5a0pWeGp1RFQxOFlpVEVCallFb0lUZTdpbUFldllpd29RdURyKzRTcTA3RVdJM2ZBeTFUMGorc0g2Z1AxL090RjRqS2hKTlNablVDNDEzUVJubzREU1RGaTR0eUNQRHo2aXhYVEkyc3R0VDFVMUpIalVsUFBCbnpMclNtekdjSmIzbDJ6RUZqVERFWmU0Z010NXByRHJLVlVmT2tVa0s5dnZtTjZOZFlNMzhyM0lFM2UzNUtJQnlYcnpweVFpSHNyVVVNNVd5SUxpdWc2VmoxWHdQeTFmeTM1aENLTEo5ZzUzM1NUM3lqZGN4WUUzRE5LMHgyMXpZeXJnRTZYRXJTL0xhRmE3MGF5UkU4UUwyS3JZQzZrcUFMOEU0a3V4eSt4QWFMaFppVHhxSG5FbEE3MnlOUnJmOWpCdy9NMEd0NjJkN1hBWk1BejR5ZVE3cVFXN1VZYnNVVVBKYm1rd3hETDltS1Z1MHdaNm82VnVSamdOYWZMYXV2Zzl3bFBud3dlcXFUNEJoMUZNeGlYWEFMV2NjenhDOFRUbUFHUDlWbWtldXg3VmlYNFVsVnUzMEhUQWFZRjM1Z2RiZ01NdXl4aEJQRmpDT3Q4aVROelNmTU1od001ODlYTWhBb1VzdndvbWZxZzBqTXhudzRzVHIrVGNJMms2YzEwUFB5Q3FralVIcHA5VHNGczgzZytSV3hZaUNWN0xuZnhEY0Z5MnZ0Y01jekY3OTY1bjl5STlRajhSN0p4K05wWGVHVkR2STJDNzcyWXEzSk1HaFppSE5GUFFZL204NnRhVnltWEpMdis5aFpGM3BJOUk1bW5xMUhFZTdJTXRPRUF6VThidHhWNllCU3pnR0tSN3h6OUw1QjFFZUVVRXRZNkt2K3h4eEY2ajJta3doVTM2QXJxb1dKZEpPalkwOXV3TWNpQzQ5OGxPMmhiQ2ZoN3VWekt2RmllRWNKY3ZDTU90RGJYR3FXUEZXTzM4c0ZiajV3SGR3bG9Bbi9ZVHdvckVJL1dvR2VNdW1FMGUzeFpqWndIa1gzZ1A5eHhFZlMyTCtBS2Y4YzE4b3VyV2hhMDRYMDhaWWFIbU1NcEU4aFUxMXkxOFBoMlJnOTNQcW9nT3IyYjFIUTNsNHRSZFNBbUNzT3N6OTJHYzR3OHh3NUFXelg2Y3NhTFladS92aVNWN1k0K3ZuVkI3VHRZdXMxdEVaMG4yN08rZVJsNlgwMmVneStwTDlvQkNUREl4OTNMR09vdnA0NnhYd0FRQy9RU1NFWnF2Q2hyeUVQay9IRmZUaFgzRWRabUZnZ0RWbFYvd3NlTkJ3a2tidWFCRUdLVW5ZR1hlT3Q0L0ZWNGZtSndlalR3dmdMUFIvY1c1Q0F2RkdsUHhXQmZUNVdxVStPbkZvdWpXc0JLQnhwZy9YclZNaHFJeDRaQ1YyelhkMGVWMXBWT0VNKzlGSUhHSzRJV25NNnpGaXdWbUp6citMR0ozMjBoRWdSSHBRN3U2NnROeXRFNzBjbUprUy8rL3lNMzNQdEV3b2J3YzBjUTNOQy9OTVhsMytHS0NHMTBKTjJidjZIeGk3bHI1L0RhMUtMbG40U3lVd0RtVHZ6WlE5bnhuVk9EcEtEaDk5RkNiZ05sOG5KR0dGckRXMEJ3cGg4UitZMVROYXA2TENIeWlrOUlSb1UxUCtSYWRDSHc2QXhRSHYvUHFyMnAxSWEvTEF2UmZxTi9sR3pZbGFyUnJJNE5jZTlEVzQ4NnJNWUVNNzZEeFJxOEUvWjNTR29DdnU4SFd6ODdoMVdCQlVVMHhxQzQyNUVxcXo5WWN6Wk4yM21ZQ25kelBRWmpNYmsxVi9FSEJsd09nTEQwMnZwUlhMQVllUFEvY1ZEQitzWmdlRk5aUEZUamdjWVlzWCtlTDZEVllWN2p0Y0wwbjdDZ1QzZDlFR21Vemd2UHdDRUJuZ1pwcXZ1eGxMMGd6b3JPcjgzRGZyRXFwQWVqd3VDRWFhM0RBNXlxRTFuU3ZsMXhtTFFPa3RhTGhYZHNyamRjM1l0NzAzZ3hHZ3BiMTR4b3prMmVSelh6Sk1DMkppV3dKU1dCVHhIRmMrb0xONThvczU2R3pCREZpQXhmelBxRzM1RGJlUGd4WlV3aWhWSUhZWlNDZlJkSWdFWThON3phMHpHL01xbldMOGl6WWo0UjB5eU9FVUxUVUpJdnlTaExEckdUbDd5NUE0SjNndWpVbVpZOTBUSXRIVWlTZVJZVFZVWHB3VGdvWFJKUmZmQS8rcFJDY3plVmdvTVQyWTVPc2Y1NGNGZ0ovYWoycDhTUlQrcVYrb3BTRnE3aHRrTTFWMnZLWVk4dnY0aXYwMmlid3p2MGRES2N1MGZZZkl0aStqWWFQNTZHV01vQS82d1Q0NTNiblFNK1QreGptMDhzRENVRUhWb3l0SzNTQ2NkQ3RiYmJtTHpQdnJ3YVBNY0svbVpVQXFNQ25aV25BdmpVQXg5eEZINEZBNUN4cy9WMUtzaGlVRnJQMzJzVExRVkRjejJ1Uk5malJPMXFOQUZYQnRiS0lNN0lPWmFjQjFscWlGNXB2cXJHM0JpTHpYSE9GRzAxQWtMR2VkYUpnWDdIQ1gwbUNrdDluWG05N0RqSGh5K1FteVNWT0w3VkpUNXVPTU1weXlQaVlKbncvcjUxUWUwN1dMck5iUkdkSjl1enZsSWtLN0s4aWtDeDFhVmJ3NDFkSDZCNUN0QW5BLy9VZTloNXpVMUlpSjd1ZGl2TVY0eGo4RFN3cGN3Ni93OWlXUThTeE4weGVRcndwS3V2bTlBUnFvMmlsSjJCbDNqcmVQeFZlSDVpY0hvMDhMNEN6MGYzRnVRZ0x4UnBUOFZnWDJhQlBlVC8wUzZlOWxFRjUya2N4dmU2MVRJYWlNZUdRbGRzMTNkSGxkYVZUaERQdlJTQnhpdUNGcHpPc3hZc0ZaaWM2L2l4aWQ5dElSSUVSNlVPN3V1clRjclJPOUhKaVpFdi92OGpOOXo3Uk1LRzhITkhFTnpRdnpURjVkL2hpZ2h0ZENUZG03K2g4WXU1YStmdzJ0U3FNZVdKZ29QRmtmclF0ZEJqQ1p3WlE2U2c0ZmZSUW00RFpmSnlSaGhhdzF0QWNLWWZFZm1OVXpXcWVpd2g4b3BsYVBFNWxTZnIvenZ0NUh5Z2lWYUxjd1RFeXdHWXlxQmNCcnZSVXZGR3NmRDljTDVDTWhzOHhpbjQyOFZ6QU9WU2pCVGFoZW83WmxEOGFaWTlMekRIMVZINGVvL2lSTE0vWTlEWWswd01xbTV2SWFrcDhub0FqdE41SGF3UzBHWmdMcVNvQXZ3VGlTN0hMN0VCb3VGbUpQR29lY1NVRHZiSTFHdC8yTUhEOHpQbzZFekRZa3JOYy9kbGlZNms1Rlh0Umh1eFJROGx1YVRERU12MllwVzdUQm5xanBXNUdPQTFwOHRxNitEM0NVK2ZEQjZxcFBnR0hVVXpHSmRjQXRaeHpQRUx4Tk9ZQVkvMVdhUjY3SHRXSmZoU1ZXN2ZRZE1CcGdYZm1CMXVBeDNRQzNjeXpxVjJtWlllT1ZmMkxYei9JcC9naG02S2lwV2tGdDVUUGdHVGN6R2ZEaXhPdjVOd2phVHB6WFE4L0t5cVJqNXBtNXpPVzlCSkY2ZHd0cTFablRUbGtjUXdhWXIwRllLU05ZQWtUclFwR2dSL1BuNHd4VFlhNVNHdzB2ekE4S3pGaFFQNUdPU1QyNEJKaG5SaWR0QXRhTC9pR0UrVlZGM2NVWW4wa2x3SE4wUWFtMi9uNG9yakRMOFJwTjFJL2htNlQzMEtEcXB4MkZ1QnVuU0VSUUFpbWFHWDJ3YmZKSnk5SUY0MEpXVVV3cWx5aDNYTmswWVIzSjZ3RWZwOTBRQko4VnJlVE5ncWdpcG9JbnJmaWZMMUFsQzBIZlovNTFUWGt2WFVsV0Z2ZmxUOXhsekduajRmOFJNVFluS2JrZkhraUNoRlM0OTY4UDZjdjBiemVzTDdIUkk4eFJ5S25KS21tdHRacVlkQVAwcU13NXh3V1RvdzJGNDBYWkdlOHRSMXpwNDdrclU3YWN0MUtHRno4dUxQQTFJakhad3JVeXN3TkJYMmdPY3ZUc0s0OWV4Yk9tczFncmVZWVBSZFl6VHFwaGYxemtycUxSc2pRSWFHMmhGbFl2TENOUXpiQ001NU90V2tjTytBRTRRN2dCdGxsZGNFc3g2eXc0S0Y4UFdNNDhiWmhRODd2ZTVqdFVWYTFleXRCd0NtMVpySWk3d0s5eXhvcnExeG5DaGVldVhGUnhJUWV4N0VHSUdSdXVMcUQ2clVON0RhSUdZNWRMV04vVHZFY0pCMzArVW9kQ1JTdWcrMjl6UHhjQ0dyQUUvcXl5K1JhRTgyZEo4UkNxRjBHVkJxczRoZzltU3o3YklVK0M2RkZXM0dCaEVvdjNXc09KTEx6ZEZLdGlzcDUvRFdNSEtqaHhTai9UUjY4QkJtOTlOVGZqU2E0Yys2YWp1czBUTlJieCtadFp3aUpOMjhsTmExYlBHZm94TWRlNDVrNlFHdjQrVFMwRVZTWU94NmxtSTAxTWRJSEovZ0RzTEMvRmJ3WFo3aHhEOHBUZ0NzTmRBM05hakJFRXM1NTI0eSsreStzQk90bGV5T0VVTFRVSkl2eVNoTERyR1RsN3lCMTU2WEN5WEFES2NGVDVaYmFlU2FyOWdDRGsweDFJRGlUV0hpRFB5b1VhZnNXTGkwUG8zRndtcXpUM2NmSkdhSi9hajJwOFNSVCtxVitvcFNGcTdodGtNMVYydktZWTh2djRpdjAyaWJ3enYwZERLY3UwZllmSXRpK2pZYVA1NnZIcmFxZHRjTWY2djlnb1JDV1NQaGd1UGZKVHRvV3duNGU3bGN5cnhZbmhIQ1hMd2pEclEyMXhxbGp4Vmp0L0xCVzQrY0IzY0phQUovMkU4S0t4Q1AxcUJuakxwaE5IdDhXWTJjQjVGOTREL2NjUkgwdGkvZ0NuL0hOZktMcTFvV3RPRjlQR1dHaDVqREtSUElWTmRjaEsrcWEvallvQVMyVXJDM3FwMGN2WmVMVVhVZ0pnckRyTS9kaG5PTVBNY3JFZGhwTE1rSU5vYlg3Um5Ib1lpYTJqcFhwdHhLazB5YWdmR3RQbmFhWHRvTnJ5VGtacXBOVnBZd1hocDdEdnRRcG5uZWVBUnBSbVprRExPZ2lBUmcvREVGT0RNbnJVeDBINmRzd2NaOVVRSWhCTXlGUGhRcVlEVXpVTG1WclBPRmlmeEQyQ3V0VEdXYU9sUnczTFd4Z01maHY2UTV0ZUU5Q3dTSDRRQThDNGRsUy9HSjhKRndOREwxL2tCSnVyVDNOM1FHYWpDS0I3UGdpNm5tNzd6djUrSS9HTTlsUTA2TVAyczZEdkFlc01XNThsNHd0a1BqMXVaL0pKWGJjbURPKzN0ckdNTTN6V3E2c0hXT3RlNnU2K3ltWHNSaVluNXVQOEl4WHBlZEErOGpEWVlKZ1RtaDk0dmlIRGhqbUNUOGhzMU8yd3pBZ0lRdDFzZ3ZPTmZMaHV5eUprblpYblgxbC9FMWliTGZoRXB1OW1za3NxU1kra3orT3hBM3pORFR0SFgyTXJ3RitocDNPTEF4K0dwYVdaV3l3dlVYWnhNZS9Ic1N5aElFYjB4RVlGTXF0ZWlYVnhvbTBxZEp6WGZ6UzlOUDFFWDBQaEc2aDN1U0Qzd0o2R3F4eEt5b1k5NUJCcENiQlR3Sk1tQkdQcnRyT2V6bG1Cc29UNnhxVi9zZ3FNcmFJbllwVFFmYUx3S2sySS9PVXo4QlZubkVKY0ZSZmNCRTNnajZZby8wT2J1SWxMeDg0V3NESEhVYzhPNEY5czVVQ244RUpWOCtRUHBPSFl6WnpvcENRQ2pHdGE5bE5ONGErUnJ1aktpREFzYlZQTXZTUUNyenNBclZNSlJtS0Jqakl6d1JLa2JFcnF5OUdFZnY1VWJZQndVM2wvRXF5SUcwRGs3RklLYmxQSGxsQnZnTGZESVF6VnVxekZ0ZW45ak9BOEhza0RxeXlKNnRQZmwxYVpNZ09aajJBbXZuK3VwZWxncUFMTTUyb1pSbU4xeThDdDF6U1MvU1ZXNmg5alhqTjQ4TGNqcWltM3ZmZDE5RUljNnZCU2dVTGZRRk5hbUVaRVpCWkpPaXd1elVyTCtjMS9LMjE2UW1Oa2haR21SWXhicTlhdXFXRU84L24yejFCRzgxK1ZySHREZ3JSUklSQ0F3NXhwd2xYZGprWnNjV3lqR1EwNStJcXhDaFVacGp0UnRGL0hNSW9FTldqWDZGaXFiVldXQVFUbEhqaFNTSnVWQ29nVHJWTWhxSXg0WkNWMnpYZDBlVjFwVk9FTSs5RklIR0s0SVduTTZ6Rml3Vm1KenIrTEdKMzIwaEVnUkhwUTd1NjZ0Tnl0RTcwY21Ka1MvKy95TTMzUHRFd29id2MwY1EzTkMvTk1YbDMrR0tDRzEwSk4yYnY2SHhpN2xyNS9EYTFKbmhGWUZkOVF6ak1iN2ZsNWlmMThnRHBLRGg5OUZDYmdObDhuSkdHRnJEVzBCd3BoOFIrWTFUTmFwNkxDSHlpazFYNWoxTnRkZ1hiQWt6RkNyN0R3V09UclNUUFVuK2k1anF4dlNOSVlwOFF1RmxHUFNtTS9wWForMDJkSzJ1VE5abWNTSFdId3Y4QlduYjBidHVNc0R2eUluNXB0N3BtWFE4SXAxeHF1MURybThocVNueWVnQ08wM2tkckJMUVptQXVwS2dDL0JPSkxzY3ZzUUdpNFdZazhhaDV4SlFPOXNqVWEzL1l3Y1B6TzYxbC96TFZvNUdQRnFGNDZ1NVFqWk9RMW93YVRnelZCREsxWFFsaVNMZ1RMeS9oWmc3UlAreElORWFUU2hJdElrS2lMYnU5dzR2eFYxR2pEWVc3RU52K0wxS21qMHdqcWVmRnlDL1hFTDhLeWRYdTlzcHhnV3d4Rkl0akRobWZWSUtuaGFwVW0vQW1POElLamFlYmUwZmN0dDJKTGxlUDU1T0kyY2hYTmZVbXlINFFUancrbjZBWmRtUUtoOGtMeU9waXpneXpHZWduZFNvNjVJcVIzdkM1SWUyb1hZdndCVXhFNGs2Y0ZEUUN4Rk5SdCtJa01iL2FRNjg2Zk9WVFlKeXNvRWFUeW80dGd3SXNxVnhXTHV4RWlweWRzLzRtM1FOcnBiekc2UTFUMXZwVlVxKzNRdThzMFAyR0RqSUdmajRGRGdUKy9YekNNUDdQZjZzRjlPWlJHV3dXczMzbDhpMGZhRzI0UTBXZEZINktIdFQ0YWt0S3NVTDNVRTVCNWJ0Y3pOMnVuNGUxK3hvNWN2cERUUU01cHVpdmNEQm9OczJSMndHOXVzdmVxdktRbFRDcFVGNzhoTVorZnZuRlVJamQ4OUR2T1F0YldyY0srSnhkeVJZa1hzWXZsUWNSbmIwNUgzS25ubVpJWk45NjdWSkQ1RG81cG1Tci9Ca2xRM3lGS0dsSTVjYVdVY042enZZU2owL0lrNHJlT0JNWFgzK1dkNFVzSVJuRWJNT0VQdXk1aVBMVVNRb3pMdU9HQjZ2UDB4aTFQbzRaK2xVZ3dTcitvMktzZTJ1ckRvNzBaY1NRc1dSbVk2ckxCa1Z5Zk5xRE0zMG41bVRIbC9GMjlueUd3WE9zdlI5cld1a3MyTGxCNkhCRDBubU5IYjk1VllBaExBcTc1ZjRaTGhFYnM4WVBCU01ma1lRb1FyQmdLSXNhbDJLeEpiNUE2ZVBLOG5FNHA2K0ZnS0s1SmQrVHpneVFvRXRZcHJ3eGY1NHZvTlZoWHVPMXd2U2ZzS0JQZDMwUWFaVE9DOC9BSVFHZUJtbXErN0dVdlNET2lzNnZ6Y04rc1Nxa0I2UEM0SVJwcmNNRG5Lb1RXZEsrWFhHWXRBNlMxb3VGZDJ5dU4xemRpM3ZUZURFYUNsdlhqR2pPVFo1SE5mTWt3TFlSSWNuT1pPY2ordnZwbC9TbGZVdzlHeTVqd2VwZFhsUjEwQ2xVUDYwV0FyRmxUQ0tGVWdkaGxJSjlGMGlBUmp3MWpMNWhqNURaVTlSbkpUVnk3RWJseUNWN0xuZnhEY0Z5MnZ0Y01jekY3OTBKYStoRmtyODZnU1dXdU1JU1pOZTA4RnJXTnJKNVVrMTVjdkNyV2VRazc0Qkw5SG9oL1ZRSzJLY21JUE5GWFY0RTBUVVJ0dFBvb3hITUllQXF3N2didHhWNllCU3pnR0tSN3h6OUw1QjFFZUVVRXRZNkt2K3h4eEY2ajJta3dnOHdyazZOYkxjMkNCc3IvQ3JYOGF3MFlGRGxjR1BPeVY3YXpJamVmWVhuWG41bDQwOU9NdEF3OUE1b2pjbVk4WDM1dHFuS2NGNmthRnZNZTVjRllNeWJrcGxKQnE2d3JqM3RnR2kzMDFrb2E2dVkzUnpFTWZaRk1wbVp0UlhtbFBHVk9TQnZXVnk5ZnlzL3VjR3JaMUNqNkJwbGhOMTh6WURkMEJmRkZSaFpzTUNzYk8wZk9zdzJuUzc3QXFoWm9DVi9XcGlEWklCcmYzTm1ELzROTGpBM08wYzVVYzAySlZzR2NlWjEveldqZklLT3dUOHR4amw0TzMrT2FtSFNvWHdDZ3NUVHRGRFhPb1FnOHhUT3NsamxzZVViMDlxaU1ITml5cU16UCsyNi9BWnljbitVUTJ0YVYrSEQyM09RWDdNZ2tQRnVHS1FhWHk5Z1V5UW8xOThuWkR0b1RXaUQvQUlnWmNaOWx2U1ZsREFvL1NxSVExWlpObGdqZXR2TTU0VFg0RlhITVdMakFHcU1KZDlwUGkvQzlFK3NWY0FVbWFLT1JXaGVIR3pPSGpnMmYrQ09IaHhBWDZpL09VR3p1QWhvcDZDL0ZPWHNmM2hIeDhQVHlSOTZrKzR4aE01U29jSm10VnhjNnJ0cjFuaVlXVVY2N1ZMd29KZDFlWG80OGFXa3FXMGF2NzdBcFluYTNSMWJTdVZtOE9rUnZSZE12YnozcC9CeEViblBJVmxyL0RCNURSQnZhU0hUN1FTUGp3MHU2TnViaU5FM3lqaWl2ejRRZjhQejAxRGMwcDBHYVZwQ0ZJTCtzVkdZMHRVcmNHRHI4Z2FOYTZqK1ZDYk80aWVKU2s5MGFLeEJDM0hIVWpMbWZKMktTQUZIdUorem1vZ1BhdmRpQUdrZURkWnFqSnJGZDNIQkQ5WitadnkwbHhMRGtsRGQzZmVOd0lvQzRORE5WVkpyUUdyaUdlbHZSM1RkUDBmVnZQNks0VHduZ3pTVFFuSnBWUWRhTUdIdlNWdFBMQXdsQkIxYU1yU3QwZ25IUXJXMjI1aTh6NzY4R2p6SEN2NW1WQUtqQXAyVnB3TDQxQU1mY1JSK0JRT1FzYlAxZFNySVlsQmF6OTlyRXkwRlEzTTlya1RYNDBUdGFqUUJWd2JXeWlET3lEbVduQWRaYW9oZWFiNnF4dHdZaStFTFdBSHNjYkJFUExpeVB5Q21ra0o5SmdwTGZaMTV2ZXc0eDRjdmtKc2tsR3MzcGZvU1NmbmVmZ1owc042ZUNmNitkVUh0TzFpNnpXMFJuU2Ziczc1bUp3MWtvcjJoUGVER3JYaGFsRzdkNVloNks0VzFtdTZlK09OcHllMFlHbE5aL2YyMVYzQi9TN04zZnM4bGhIb21xVm5YRzladk1xRnNDMVRpVFRnU29wU2RnWmQ0NjNqOFZYaCtZbkI2TlBDK0FzOUg5eGJrSUM4VWFVL0ZZRjkwbUFrS2dlVWExMzJEOUpHZWR4YzFTNTBMTkRiNHc2UjZ4NEwrYmZtSUhaeVRwTkFJRnlxWFJrd09uMExneGxoM0ZWSTlrSlZ4anVEVDE4WWlURUJqWUVvSVRlN2ltQWV2WWl3b1F1RHIrNFNxMDdFV0kzZkF5MVQwaitzSDZnUDEvT3RGNGpLaEpOU1puVUM0MTNRUnJxZ1RJd3VHbW14ZzVQU1lWMVA3VWlzdHRUMVUxSkhqVWxQUEJuekxyU216R2NKYjNsMnpFRmpUREVaZTRnTXQycGZWQWFCSVVrTzBYdlBiZ3ZhMFdyVGtTUmxlenNDQ3piTitRUGF2VEdzb1paYVJGNHR4bDJBSDU3dTFRR0xtM2k4bGU4Nm8xUTlnRDFMWG9DUENENWVwbjJXcW1ybEdyWXd5VjZXSVhjcE9YeFdmOFJUUUorQ2lGQWRFdlRkQjlhY0FUeGJXSmpnaFhrdWQrSjBCdE0xcVdwOGIyT0hhL3hRMUtWKzZySHFnUExPM240U05ON0xVaGlxRkFRbks5Qy9ZdFpCMjA0OS9hVC9wbTBTMnJhM1dYM1FVdE9kcE42YzBSTk5sOUpVT2ZnSW5QR0ZwTUdBN1RRa2E4cURVNzd4UVdkWm9IQ0VvQmoyQlJTWUhlcWlicDZxcmtVVzZoTVpBN1ZBTzFxNjVUNVhlUHdlb0JpS21pa2RIekVNa3p2ck9lWWhiT29ha05NTGo5VjJhQ2FiSWZoQk9QRDZmb0JsMlpBcUh5UXZBampZWUhWcVpGRFJ4RTY4WUdHckVzTGtoN2FoZGkvQUZURVRpVHB3VU5Dc3czWURNZjk5cHBVNG9mUkliaTlXOG0zOUpaamcwS3hCZXlnK2hsZG5QMFJYWWxuaERDOHlnR0dWQ0drU0xCQlBXK2xWU3I3ZEM3eXpRL1lZT01nWitQZ1VPQlA3OWZNSXcvczkvcXdYMDVsRVpiQmF6ZmVYeUxSOW9iYmhEUlpOQlFtcHBYVTN3MGtTM1hRNk8ybWdsdTF6TTNhNmZoN1g3R2pseStrTk5Bem1tNks5d01HZzJ6WkhiQWIyNnk5NnE4cENWTUtsUVh2eUV4bjUrK2NWUWlOM3owTzg1QzF0YXR3cjRuRjNKRmlSZXhpK1ZCeEdkdlRrZmNxZWVaa2hrMzNydFVrUGtPam1tWkt2OEdTVjZGRGdaZm9WRmUrZ0VEaDZVbnRzaU0vTGl6d05TSXgyY0sxTXJNRFFWOXBvQ29YQ0huakJuMlN2RkJuOGYzSkYwWFdNMDZxWVg5YzVLNmkwYkkwQ0dwREIyb0sxTWlSZVh5Sm5nYXVERWdSOWllQlBnNjV2a1ZPMDBPa3BENFlxSXptam1TSzVYSElUdnFISGZJSGg0b3cybDNGZ2pUVmRrK1dGQ1RSTi9aNkhxMkFlM1A3cWJzQkZSWURMVjNtQ0JrYnJpNmcrcTFEZXcyaUJtT1hTMWcyb3duUGFYd3dRS1V4bk5oQjdxbHpjejhYQWhxd0JQNnNzdmtXaFBOblNmRVFxaGRCbFFhck9JWVBaa3MrMnlGUGd1aFJWdHhnWVJLTDkxckRpU3k4M1JTcllyS2VmdzFqQnlvNGNVby8wMGV2QVFadmZUVTM0MG11SFB1bW83ck5FelVXOGZtYldjSWlUZHZKVFd0WFR6c25BR2xlK3dxQ1Jtd3V0ZmIvV1F2emZGNmxWQWJQSkI1cCt4WE80c29WbHIvREI1RFJCdmFTSFQ3UVNQanpJTU5vSEFQT2RnZlBrOW0wd1A0Vkl6MDFEYzBwMEdhVnBDRklMK3NWR1kvMGF0d3hMUUc2T3Z2ZFdPQmpyQmREbEk4LzRPZk5MYWo3RTdETVBMRUpCNzdOZ3RVYlhSK3FRMzF0UElMTnV1ZVJ2TGdqeU5vU2xQV0sxN1I0QUYvZExEa2xEZDNmZU53SW9DNE5ETlZWSnJRR3JpR2VsdlIzVGRQMGZWdlA2SzZzNHA3Zk9RREFzN3NzODVhNEhlUkJ0UExBd2xCQjFhTXJTdDBnbkhRclcyMjVpOHo3NjhHanpIQ3Y1bVZBS2pBcDJWcHdMNDFBTWZjUlIrQlFPUXNiUDFkU3JJWWxCYXo5OXJFeTBGUTNNOXJrVFg0MFR0YWpRQlZ3Yld5aURPeURtV25BZFphb2hlYWI2cXh0d1lpL1lNSXZ5S1ZaNkNpYVpEeUk4Z0wxMHBreUE1bVBZQ2ErZjY2bDZXQ29BczRmZ1FDRHVWelRUUVVUKzNpMnRma1NIMk5lTTNqd3R5T3FLYmU5OTNYMFF4aTAweUYvbSthQUpYaUNWUHovc3dDYlZKbFYwTjZFSzhiMkV2WkxaMGRXc2pyQ3lnaFI5azREN1prbHhLK3hlRWJ6WDVXc2UwT0N0RkVoRUlERG5HbkNWZDJPUm14eGJLTVpEVG40aXJFS0ZSbW1PMUcwWDhjd2lnUTFhTmZvV1loUlpBcEpleUhXSVJ5YzA5dElTbGV0VXlHb2pIaGtKWGJOZDNSNVhXbFU0UXo3MFVnY1lyZ2hhY3pyTVdMQldZbk92NHNZbmZiU0VTQkVlbER1N3JxMDNLMFR2UnlZbVJMLzcvSXpmYyswVENodkJ6UnhEYzBMODB4ZVhmNFlvSWJYUWszWnUvb2ZHTHVXdm44TnJVdk5YLy9WWUhhMXBRTjBWbkthSEJ5UFNCZFBxZUtoL1dWb0tjMTF2V0NqNVBVdjdjKzFyL3BhTlc0bUhNaDBOb3B3YWFjUDBTVkR3VW5FUWYwQTNoV3owc1JJRndvb3R3TjFHWEk3WFk4ZzZ3NmpNaW9FK3ltc2tVTjZleHVoUkcvVitzakxDOXQ0aVRKTWNWZVdmRDcyOXlRaW1EK09Hc0JpaE15M3h0b21Vek5rM2JlWmdLZDNNOUJtTXh1VFZYOFFjR1hBNkFzUFRhK2xGY3NCaDQ5QmM0SitaWW9xc2gzQzFzS21yZGVkbWFkTFBhNUJzcmZidU9XZWsxTjRjVDdVWWJzVVVQSmJta3d4REw5bUtWdTB3WjZvNlZ1UmpnTmFmTGF1dmc5d2xQbnd3ZXFxVDRCaDFGTXhpWFhBTFdjY3p4QzhUVG1BR1A5Vm1rZXV4N1ZpWDRVbFZ1MzBIVEFhWUYzNWdkYmdNMG0xWlUvT3VFSGJ1MkhYc2ZmUklSaFhmUU1kQTJYb09nUmdWVXovZkprdkZsVENLRlVnZGhsSUo5RjBpQVJqd01Ec1BiWFMwL1gzVlFYVHdtdFU1QVNDVjdMbmZ4RGNGeTJ2dGNNY3pGNy9ETlBhRnkrdTZjL1Fnamc3R0J5TlhxV0NOdEhRT2lzc2RmTTJHMjFEZjUyblBPVUtGOEhDYmxBeVk5cW02WDV4NEUwVFVSdHRQb294SE1JZUFxdzdnYnR4VjZZQlN6Z0dLUjd4ejlMNUIxRWVFVUV0WTZLdit4eHhGNmoybWt3alprNXFCRG9EdTFWdXJPbklPWmFrLzBZRkRsY0dQT3lWN2F6SWplZllYblhuNWw0MDlPTXRBdzlBNW9qY21ZOFgzNXRxbktjRjZrYUZ2TWU1Y0ZZTXlia3BsSkJxNndyajN0Z0dpMzAxa29hNnVZM1J6RU1mWkZNcG1adFJYbWxQR1ZPU0J2V1Z5OWZ5cy91Y0dyWjFDOEZlUytLZDgyT3kyUFhWTUc2NlRpbDR0UmRTQW1Dc09zejkyR2M0dzh4ejNLVWpMYk4wQUVXYjVrdjlsYjBDRWFPbGVtM0VxVFRKcUI4YTArZHBwZXdPVFpGOEJlc252QU5tM1o2VXRMY0ticjZ6WFUvbStwNC9CeG16ajBFaFhZSVlUOVVWeFNyVWs5aGVtdDZLemN3b1diM2NFNnJOVHZQelRMUC9XSWJRTUVXTXh5NmJvbEVGakcwdzFVaHg3QXgrRy9wRG0xNFQwTEJJZmhBRHdMcTlCQmNRcEo5ZU9oVXk5aDJsZmQ2TGMzZEFacU1Jb0hzK0NMcWVidnZPL240ajhZejJWRFRvdy9hem9POEI2d3hibnlYakMyUStQVzVuOGtsZHR5WU03N2Uyc1l3emZOYXJxd2RZNjE3cTdyN0taZXhHSmlmbTQvd2pGZWw1MEQ3eU1OaGdtQk9hSDNpK0ljT0dPWUpOTkdWMlhKYTMwRkUySEwxenBqbi9XckxiVTlWTlNSNDFKVHp3Wjh5NjBwc3huQ1c5NWRzeEJZMHd4R1h1SURMZXdxd1N3NmZ3N2pwV2s1SXFkck5BVzA1RWtaWHM3QWdzMnpma0QycjB4cktuWEtMeEdtYS9DallEamdpSDYrNUp2YlhJUFlUSXdpMm5jWnJnY2ZHYWNRRjMzbjM3NUpiN05GZjhHR0s5Z1dJNTNqdGVqVllpdXhwSnFWMzZXMGo3V25BRThXMWlZNElWNUxuZmlkQWJUTmFscWZHOWpoMnY4VU5TbGZ1cXg2aE00dlVnTXhrZmVJMmtpaTNBOVp2YlF2MkxXUWR0T1BmMmsvNlp0RXRxMnQxbDkwRkxUbmFUZW5ORVRUWmZTVkRuNENKenhoYVRCZ08wMEpHdktnMU8rOFVGbldhQndoS0FZOWdVVW1CM3FvbTZlcXE1RkZ1b1RHUU8xUUR0YXVnWTdnUEZDSVRWdXNpTFhkaXdwa0l5aHMwR2RodEtNS3FGSHUyRG1od1ZobXlINFFUancrbjZBWmRtUUtoOGtMOG1Gc2MranQxODA3Y09HVGtTM0JhekM1SWUyb1hZdndCVXhFNGs2Y0ZEUW5IWnJEVkFXa2YzRG9qOERGR2o2ZXB0UjduKzNuTGd5MDJCT3pBV1gyOUZJUWQ1Y0pZQ0FlQ1BVTzZLVEh0dDhUMXZwVlVxKzNRdThzMFAyR0RqSUdmajRGRGdUKy9YekNNUDdQZjZzRjlPWlJHV3dXczMzbDhpMGZhRzI0UTBXQVU0WEFRRW9VNTBwM3o5YlFIUytmSmJ0Y3pOMnVuNGUxK3hvNWN2cERUUU01cHVpdmNEQm9OczJSMndHOXVzdmVxdktRbFRDcFVGNzhoTVorZnZuRlVJamQ4OUR2T1F0YldyY0srSnhkeVJZa1hzWXZsUWNSbmIwNUgzS25ubVpJWk45NjdWSkQ1RG81cG1Tci9Ca2xWR29aZGpDYXVpVlpkTHUrckxhQURiUHk0czhEVWlNZG5DdFRLekEwRmZhOW4zTTF1YWsvRHdVbzN4VmpPR1cwdEYxak5PcW1GL1hPU3VvdEd5TkFocXlwWjNlditpREZDb3VwMGRKek9OcGo5dUNWYmlwMUNqaWpQeWRESG9Uc0g0SElncVhEVmJNcVk1UU5DNUczdTJUYkIrS1dGd2RRSUtaSkE5dWxUNkx1clhHY0tGNTY1Y1ZIRWhCN0hzUVlnWkc2NHVvUHF0UTNzTm9nWmpsMHRiNElneGl5QXV4SzNxTXRsT1ovTFNUM00vRndJYXNBVCtyTEw1Rm9UelowbnhFS29YUVpVR3F6aUdEMlpMUHRzaFQ0TG9VVmJjWUdFU2kvZGF3NGtzdk4wVXEyS3lubjhOWXdjcU9IRktQOU5IcndFR2IzMDFOK05Kcmh6N3BxTzZ6Uk0xRnZINW0xbkNJazNieVUxclZJMExBY083MkZaRmUxMzdaSU5STTlWSnIrcmhqaVZnT3NQWnlMK3FjMFptRlphL3d3ZVEwUWIya2gwKzBFajQ4encra2tHSmxJQS9mS1MxVmxXZjNFczlOUTNOS2RCbWxhUWhTQy9yRlJtTjZaTVZWUW92Q0xFRWJ6OGdoeEc3RXZjNW1ibjBwOGx2OVVsVlp5bTlDWnZaWUtVaFBobExuaUFDbVgxN3ZyYkVtUVFNaUtDaXppcHIrNHc2OHpLNGRTdzVKUTNkMzNqY0NLQXVEUXpWVlNhMEJxNGhucGIwZDAzVDlIMWJ6K2l0aEh5U3ZuWkovUmc4dmxDWGx1KzlXYlR5d01KUVFkV2pLMHJkSUp4MEsxdHR1WXZNKyt2Qm84eHdyK1psUUNvd0tkbGFjQytOUURIM0VVZmdVRGtMR3o5WFVxeUdKUVdzL2ZheE10QlVOelBhNUUxK05FN1dvMEFWY0cxc29nenNnNWxwd0hXV3FJWG1tK3FzYmNHSXZNTjBhS1NqUDY1YURaVS9naW5LNnphWk1nT1pqMkFtdm4rdXBlbGdxQUxPV2ovODNZTmtIYTh5MFgzY3ZIbXhyaDlqWGpONDhMY2pxaW0zdmZkMTlFSWM3WXJzOEhSM20rU3pCa0p3cjdxYnQwcUpXOWlIS3JRUXQrMldveUlBZXJJNndzb0lVZlpPQSsyWkpjU3ZzWGlYVXVqcHhWUThtaXV6cTZrWjNEdmluMUs5UGZIUFJMWEpvV0N3dFlrOHhoVVpwanRSdEYvSE1Jb0VOV2pYNkZvbmlTSFBYRGVSNW5uVFdrUStCeDl6clZNaHFJeDRaQ1YyelhkMGVWMXBWT0VNKzlGSUhHSzRJV25NNnpGaXdWbUp6citMR0ozMjBoRWdSSHBRN3U2NnROeXRFNzBjbUprUy8rL3lNMzNQdEV3b2J3YzBjUTNOQy9OTVhsMytHS0NHMTBKTjJidjZIeGk3bHI1L0RhMUpHV0hLZlFDQml2Q0dDbnNES05jTFQwZ1hUNm5pb2YxbGFDbk5kYjFnbytUMUwrM1B0YS82V2pWdUpoeklkRGFJOUlSb1UxUCtSYWRDSHc2QXhRSHYvV2tYcVp6SEdPWFFQUEhXTVFDNzVSV21aRDFPUXpoSEo0MzNjY1JENDFWS0FJVUZxNnZ5RnFiS1pFMXBSaWRIYjZldW0zN1ZSWW1PeGVYZCtRQURSWVJkWFB0cGdESWxPc1FGWHNlemtSNTNFSEJsd09nTEQwMnZwUlhMQVllUFFqaTRtY3FEZS9rMzgvN2xQZE55VUtBM2cxcDFvM2duQytJRUI0WW01RjR5MUdHN0ZGRHlXNXBNTVF5L1ppbGJ0TUdlcU9sYmtZNERXbnkycnI0UGNKVDU4TUhxcWsrQVlkUlRNWWwxd0MxbkhNOFF2RTA1Z0JqL1ZacEhyc2UxWWwrRkpWYnQ5QjB3R21CZCtZSFc0REMwZ1dNZjVBR3FHenJkOUZIV3o0NVZiVG9WU2JoNmtBMWNkSjlUY1FaRUh4WlV3aWhWSUhZWlNDZlJkSWdFWThNeEY0QWx0VkdNaXdBdTN4NW9mbmhZZ2xleTUzOFEzQmN0cjdYREhNeGUvNEpPZDhZNXRrV2JkZG1MbEQwdWFheWM0bzlkazVScFJBU3Y4UTZ1aklPVHg3ZWdjZDRrWWtodnZaSDZPZWNhdWVCTkUxRWJiVDZLTVJ6Q0hnS3NPNEc3Y1ZlbUFVczRCaWtlOGMvUytRZFJIaEZCTFdPaXIvc2NjUmVvOXBwTUlqSm9IZm9jdjh6VUUxSGh5N1VjVGR0R0JRNVhCanpzbGUyc3lJM24yRjUxNStaZU5QVGpMUU1QUU9hSTNKbVBGOStiYXB5bkJlcEdoYnpIdVhCV0RNbTVLWlNRYXVzSzQ5N1lCb3Q5TlpLR3VybU4wY3hESDJSVEtabWJVVjVwVHhsVGtnYjFsY3ZYOHJQN25CcTJkUW1mWXVRZDBHTmhEVjJCYVRLUzk0N1JlTFVYVWdKZ3JEck0vZGhuT01QTWNsZ1FXd3Zyak9GTkRPdG1Fb0dKbldXanBYcHR4S2sweWFnZkd0UG5hYVhzWnVjU2tjdUhleXhweGFiNXErT1dKbjl2dzJpa2ZkS2NEMlpsUW93YmZsbFRMNmRBVzFseFJoTGx6YVp6cDFvc25mbWVINXQxVS9JR0hsZkNiWUMzZWFveGlSbDd5d3VwQ21ucnJkQVBxUGdNZmh2NlE1dGVFOUN3U0g0UUE4QzdsaG92VXlvRDRiSk4wUnB6bjBCYWIzTjNRR2FqQ0tCN1BnaTZubTc3enY1K0kvR005bFEwNk1QMnM2RHZBZXNNVzU4bDR3dGtQajF1Wi9KSlhiY21ETyszdHJHTU0zeldxNnNIV090ZTZ1Nit5bVhzUmlZbjV1UDhJeFhwZWRBKzhqRFlZSmdUbWg5NHZpSERoam1DVHJDZXRUdFlscEZKMEFHK1BkR1RmaWF5MjFQVlRVa2VOU1U4OEdmTXV0S2JNWndsdmVYYk1RV05NTVJsN2lBeTMrQWVKdHcvZHFpQ21SUTgxa1hBR3p0T1JKR1Y3T3dJTE5zMzVBOXE5TWF5c1YwZWd6WjZMS3dpQXliZnpPUWVkOEVtK1VVSUJsbnJSRzJZVER4bFpSRGxrbHVNYXFGZ1NkamVWTHVrM2RyK09kNDdYbzFXSXJzYVNhbGQrbHRJKzFwd0JQRnRZbU9DRmVTNTM0blFHMHpXcGFueHZZNGRyL0ZEVXBYN3FzZXI0SHQzb1UrRy83cVBUbDV3OVROakEwTDlpMWtIYlRqMzlwUCttYlJMYXRyZFpmZEJTMDUyazNwelJFMDJYMGxRNStBaWM4WVdrd1lEdE5DUnJ5b05UdnZGQloxbWdjSVNnR1BZRkZKZ2Q2cUp1bnFxdVJSYnFFeGtEdFVBN1dycFRZS1JTN1gvRVZ2eUZqSmRhdWJGTzYrVDNFNkNFZmpVSWVEdGJRa2xJTTVzaCtFRTQ4UHArZ0dYWmtDb2ZKQzlnb2pJVG04QlFOZzh0UzByenR2bjN3dVNIdHFGMkw4QVZNUk9KT25CUTBDUzlPVy8xUnQ4NnlMclkzV0JGRVBGODhMN2kycFRUYVpQM3o0NGRVdlN1ajh2MnYzWXFyeDVhOENlK3lwOThMazliNlZWS3Z0MEx2TE5EOWhnNHlCbVoyZng2Sk1TZW42VHpUWlY5Tkkxcm1VUmxzRnJOOTVmSXRIMmh0dUVORnJ1RjUwOGFaT3pTeUhVZFZlN2t0Mk9XN1hNemRycCtIdGZzYU9YTDZRMDBET2Fib3IzQXdhRGJOa2RzQnZickwzcXJ5a0pVd3FWQmUvSVRHZm43NXhWQ0kzZlBRN3prTFcxcTNDdmljWGNrV0pGN0dMNVVIRVoyOU9SOXlwNTVtU0dUZmV1MVNRK1E2T2Faa3Evd1pKV2l1cktlQ254ajJ3YmxzQVZpc2pKN3o4dUxQQTFJakhad3JVeXN3TkJYMmdJbGtlRUVyQ2VuaklvSmhQQzlCbXpSZFl6VHFwaGYxemtycUxSc2pRSWFiNlVGbEE3UjVjWk45Uy8xU3J2ZERmQWdYR1Y2dzhwaThSUjJpN052ejZkT0JMMjhXcjJlQW9WZThUOERtOElhNGl5ZkMxUWZwWmJJeis3WVZPVVFtWWVyWUI3Yy91cHV3RVZGZ010WGVZSUdSdXVMcUQ2clVON0RhSUdZNWRMVzZKUWE2QVcrdUJqYzZLazNnc3B2K056UHhjQ0dyQUUvcXl5K1JhRTgyZEo4UkNxRjBHVkJxczRoZzltU3o3YklVK0M2RkZXM0dCaEVvdjNXc09KTEx6ZEZLdGlzcDUvRFdNSEtqaHhTai9UUjY4QkJtOTlOVGZqU2E0Yys2YWp1czBUTlJieCtadFp3aUpOMjhsTmExVTFjazBDanJMWnFzV1ZVdkRzM1hmOThNcXhRSU03dnI4WERjRWZqYnNFdGhXV3Y4TUhrTkVHOXBJZFB0QkkrUENsbExWckNiRE1jUEVjeWp1aU1kUFhQVFVOelNuUVpwV2tJVWd2NnhVWmpUaFRHKzFuemZ1K3hsdk1lRVh5SlNoVmVYK1lHbTFqLzVsUUI4WWlJaG4vc0lwNEpqYUdjRHRDTDlGUndaWStFTjFtcU1tc1YzY2NFUDFuNW0vTFNYRXNPU1VOM2Q5NDNBaWdMZzBNMVZVbXRBYXVJWjZXOUhkTjAvUjlXOC9vcnM1WTdXRWUyTlh5NjB4WllzaUFxR1cwOHNEQ1VFSFZveXRLM1NDY2RDdGJiYm1MelB2cndhUE1jSy9tWlVBcU1DblpXbkF2alVBeDl4Rkg0RkE1Q3hzL1YxS3NoaVVGclAzMnNUTFFWRGN6MnVSTmZqUk8xcU5BRlhCdGJLSU03SU9aYWNCMWxxaUY1cHZxckczQmlMd254cUNCdW1Uam9oNU13OWltaC9pNm1USURtWTlnSnI1L3JxWHBZS2dDejVlZDNkRTF2V1ViTkt0bVdPaDJIT0lmWTE0emVQQzNJNm9wdDczM2RmUkRhU290N05KNDgybmJkK09qK3c4ajg5VlpneUhmV0ZmZDBkL25TTGthaXRXM2I0Tmw2c3VDZWhMRjVtZmVvUTRkS3Ryb1dNMm9HNTg3K01IeXZoQ1RxY0pWM1k1R2JIRnNveGtOT2ZpS3NRb1ZHYVk3VWJSZnh6Q0tCRFZvMStoWWhKL2VOTHNNczZVRUxkclBPeFdXUDYxVElhaU1lR1FsZHMxM2RIbGRhVlRoRFB2UlNCeGl1Q0Zwek9zeFlzRlppYzYvaXhpZDl0SVJJRVI2VU83dXVyVGNyUk85SEppWkV2L3Y4ak45ejdSTUtHOEhOSEVOelF2elRGNWQvaGlnaHRkQ1RkbTcraDhZdTVhK2Z3MnRTL2g5ZGJwWTBVNDQ5UXVMN1hYMFM2OUlGMCtwNHFIOVpXZ3B6WFc5WUtQbWtwUlFaZW9Zbk1qdEZickZZanFwVlRsc295M1dwY2EwSDBoaWxzbzUrOHZMYXVOQThqdE9FQmpUbnRHdURJLzgvWGVQTHpWVnRubW84ZmE0ZDZ3eTg2TGN5UzVYUlpVMlZSZS8vTGJwYXcwYWtNbGc2dTY5MGpOd2lHT3NhY3dZWFZ6N2FZQXlKVHJFQlY3SHM1RWVkeEJ3WmNEb0N3OU5yNlVWeXdHSGowQ3grbElwRnZucWJZMHUvdzh0aU5pK3FkY0hrWkxVek9HcEhxSWxWWU4vWnRSaHV4UlE4bHVhVERFTXYyWXBXN1RCbnFqcFc1R09BMXA4dHE2K0QzQ1UrZkRCNnFwUGdHSFVVekdKZGNBdFp4elBFTHhOT1lBWS8xV2FSNjdIdFdKZmhTVlc3ZlFkTUJwZ1hmbUIxdUF5cWFrZUpKa1ZhaFp1cWlWMkEvemY0ZXZCUGcvU2wvK1NKNllEekhqZkxOc1dWTUlvVlNCMkdVZ24wWFNJQkdQQnpSSE43RFNWOWNSTnc0b2JGRHZXdUlKWHN1ZC9FTndYTGErMXd4ek1YdnlxN09JTEM1NUxBdDhkTkhJc3E4N0FvRTZ2eUdYaGk1eWtjUW5KZWpuMnZ6aW5FanFXOUU3MGxXR3BkVTJtSG5rajBqbWFlclVjUjdzZ3kwNFFETlR4dTNGWHBnRkxPQVlwSHZIUDB2a0hVUjRSUVMxam9xLzdISEVYcVBhYVRDSUlGRmx3cWFuWDlSSzJwdWJFZ0MwblJnVU9Wd1k4N0pYdHJNaU41OWhlZGVmbVhqVDA0eTBERDBEbWlOeVpqeGZmbTJxY3B3WHFSb1c4eDdsd1Znekp1U21Va0dyckN1UGUyQWFMZlRXU2hycTVqZEhNUXg5a1V5bVptMUZlYVU4WlU1SUc5WlhMMS9Leis1d2F0blVLcmRtd2FZaW5XMEh2bWV4NlVQa3RaWGkxRjFJQ1lLdzZ6UDNZWnpqRHpIRjdib2sySEQ2ODFYWDdMZlh4UTJHSm82VjZiY1NwTk1tb0h4clQ1Mm1sN2xVSXZoNHFoZDUxdUZPcmw5K0FNMXlCUm41VW91K01KUE9STnk1U3JsdEpNV3lrRWJCVzF2R1lxLzZvY0VLUDdzRjJ3eXN1d2dhcjZEeStaTmN6RkZCWW44UTlncnJVeGxtanBVY055MXNZREg0YitrT2JYaFBRc0VoK0VBUEF1WjY1OWc5WEM1cXdwcStoNmJ1RUd4OXpkMEJtb3dpZ2V6NEl1cDV1Kzg3K2ZpUHhqUFpVTk9qRDlyT2c3d0hyREZ1ZkplTUxaRDQ5Ym1meVNWMjNKZ3p2dDdheGpETjgxcXVyQjFqclh1cnV2c3BsN0VZbUorYmovQ01WNlhuUVB2SXcyR0NZRTVvZmVMNGh3NFk1Z2s3SEo5bk1oczBHV2E4U2hWdjFBQm4rc3R0VDFVMUpIalVsUFBCbnpMclNtekdjSmIzbDJ6RUZqVERFWmU0Z010M3Y1b3B3bEdhMlpya2ZWeWl4RHNRM1RrU1JsZXpzQ0N6Yk4rUVBhdlRHc1ByZm8rK3lBQURCZUpoUFIyNTlQZVJMblVRRUE5eGNpT2tPaFVLRFJpRGlyYWR6cmYzWjNzdWtvUFhOSjhaclVPWHhXZjhSVFFKK0NpRkFkRXZUZEI5YWNBVHhiV0pqZ2hYa3VkK0owQnRNMXFXcDhiMk9IYS94UTFLVis2ckhxcUNpMXBva3VxSDVYbFBZOUgrb0gxTkMvWXRaQjIwNDkvYVQvcG0wUzJyYTNXWDNRVXRPZHBONmMwUk5ObDlKVU9mZ0luUEdGcE1HQTdUUWthOHFEVTc3eFFXZFpvSENFb0JqMkJSU1lIZXFpYnA2cXJrVVc2aE1aQTdWQU8xcTZJUzBmbjV3eENNMmhmUzMyZk56ZTdRQnBhYmEyT1IwZWdGeWtnamNpT2VHYklmaEJPUEQ2Zm9CbDJaQXFIeVF2dGlVVHcxeTJtd29wbTN2SDFjbGYrTUxraDdhaGRpL0FGVEVUaVRwd1VORGd2ZVIxQWxJT25CaU9obVpCSHRocllhQ1JRV3BDNlJ2dDJxbUFoeitETldmWkVQYnJUVk1WQnMwNkVRZHJDeGxQVytsVlNyN2RDN3l6US9ZWU9NZ1orUGdVT0JQNzlmTUl3L3M5L3F3WDA1bEVaYkJhemZlWHlMUjlvYmJoRFJieWdiNEt2NnI4L2VoVHQvWEY5eURBbHUxek0zYTZmaDdYN0dqbHkra05OQXptbTZLOXdNR2cyelpIYkFiMjZ5OTZxOHBDVk1LbFFYdnlFeG41KytjVlFpTjN6ME84NUMxdGF0d3I0bkYzSkZpUmV4aStWQnhHZHZUa2ZjcWVlWmtoazMzcnRVa1BrT2ptbVpLdjhHU1Y4R2x6V29ReFRqR3p5NXg4NEVyTHJjL0xpendOU0l4MmNLMU1yTURRVjlxSzB6UEJmKzNQQTdURGxtMmQ0bVpxMFhXTTA2cVlYOWM1SzZpMGJJMENHcjdMZnNyME9zaDQxYXl4R3JnQlY4WDdYTmErMDluTDdMQ1VaU094Y0tCUGw0NzR5UVRpcis1UFRkdWx3bGVMcmhielFCUXRZTGtWbDdnUGJQQis4SHlIcTJBZTNQN3Fic0JGUllETFYzbUNCa2JyaTZnK3ExRGV3MmlCbU9YUzFxQ25heVE1YUEwaGRqdXZjOUo2c2diY3o4WEFocXdCUDZzc3ZrV2hQTm5TZkVRcWhkQmxRYXJPSVlQWmtzKzJ5RlBndWhSVnR4Z1lSS0w5MXJEaVN5ODNSU3JZcktlZncxakJ5bzRjVW8vMDBldkFRWnZmVFUzNDBtdUhQdW1vN3JORXpVVzhmbWJXY0lpVGR2SlRXdFZ1UUcxUVVwY1VlMkpDNTV1VUtCaTZUSmtSYmdXZythb3ZLMmc1TWY3TDVvVmxyL0RCNURSQnZhU0hUN1FTUGp3ZzlsQkdVMndQeCtIcmZqMS9sZERqejAxRGMwcDBHYVZwQ0ZJTCtzVkdZMHZXZ3lwcnlzcC95NGRNdVZaT0ZjQUlHeStsdXVkaUJuSkUxVnJLMGNTMVc4QnZlclI1Rjc4Smw2V3AxNjY3MitSdkxnanlOb1NsUFdLMTdSNEFGL2RMRGtsRGQzZmVOd0lvQzRORE5WVkpyUUdyaUdlbHZSM1RkUDBmVnZQNksrcHJVZ3dkNVhiOEdYUFExdFUzMHFCdFBMQXdsQkIxYU1yU3QwZ25IUXJXMjI1aTh6NzY4R2p6SEN2NW1WQUtqQXAyVnB3TDQxQU1mY1JSK0JRT1FzYlAxZFNySVlsQmF6OTlyRXkwRlEzTTlya1RYNDBUdGFqUUJWd2JXeWlET3lEbVduQWRaYW9oZWFiNnF4dHdZaTk0TkE0NWpxVlNOVkdWVFRwczZJdHNwa3lBNW1QWUNhK2Y2Nmw2V0NvQXN3R0RyZldZcERuMjYrWTNoNEc4SlhTSDJOZU0zand0eU9xS2JlOTkzWDBRdVZrd1pGUGlDQmVwaTh4V3h5S2ZhbWo0TjhpSytRNlNtSlg1ekV3V1Rjc1lOSHhKb3cxMXhvS3lNYUFaNTQ2R0Vielg1V3NlME9DdEZFaEVJRERuR25DVmQyT1JteHhiS01aRFRuNGlyRUtGUm1tTzFHMFg4Y3dpZ1ExYU5mb1c5NTZuZEErd0VsRHdodVlyQnU3VkJ1dFV5R29qSGhrSlhiTmQzUjVYV2xVNFF6NzBVZ2NZcmdoYWN6ck1XTEJXWW5PdjRzWW5mYlNFU0JFZWxEdTdycTAzSzBUdlJ5WW1STC83L0l6ZmMrMFRDaHZCelJ4RGMwTDgweGVYZjRZb0liWFFrM1p1L29mR0x1V3ZuOE5yVWx0a0RiQ2ZZcXFtMVpiWHkzWWlGSlhTQmRQcWVLaC9XVm9LYzExdldDajVOT2RkTWFFUHduRjExMWw4ZHlxZ0hLYmtpSDBxZDlnYUpnMW1CbWpjMUZ1S0owd1dXN1VidllGWjY1cnJHWTVxUGZFamdGVlZVV094R2JxMXZScit4YmIvaW5qUXN5NnlPMjlGN0ZrUWFkd0pKRUZPMU5FcHBnTzhKTWI0SGlPenpOazNiZVpnS2QzTTlCbU14dVRWWDhRY0dYQTZBc1BUYStsRmNzQmg0OUNPM3VPOURuU2U4cnNTNWFKaHd1UXdYaWg2bnZWb2NFREQ0TlNDZUZLZ0lMVVlic1VVUEpibWt3eERMOW1LVnUwd1o2bzZWdVJqZ05hZkxhdXZnOXdsUG53d2VxcVQ0QmgxRk14aVhYQUxXY2N6eEM4VFRtQUdQOVZta2V1eDdWaVg0VWxWdTMwSFRBYVlGMzVnZGJnTTU5ekpYNVJsRWxIdlBGWE9wWEdCK3NOenBod25pV2R5NmpSY0U4L0FQeXpGbFRDS0ZVZ2RobElKOUYwaUFSandyemVQVHExRHZwNTdMRStqMDAyK215Q1Y3TG5meERjRnkydnRjTWN6Rjc5WWZLMEpFN0hGdzRydWFHVm5iZGVFWDB5VnVmb1pING51c1pCMHdlcSt3ZWs4TzZvR3NUYXpPSldKcTcrU0pSMTRFMFRVUnR0UG9veEhNSWVBcXc3Z2J0eFY2WUJTemdHS1I3eHo5TDVCMUVlRVVFdFk2S3YreHh4RjZqMm1rd2k3VnNnQ2hrdUY2U2dWaHdUK1M3aDUwWUZEbGNHUE95VjdheklqZWZZWG5YbjVsNDA5T010QXc5QTVvamNtWThYMzV0cW5LY0Y2a2FGdk1lNWNGWU15YmtwbEpCcTZ3cmozdGdHaTMwMWtvYTZ1WTNSekVNZlpGTXBtWnRSWG1sUEdWT1NCdldWeTlmeXMvdWNHcloxQ2xLdzRyOU1NTU0vcVp1enZuN2lJeTE0dFJkU0FtQ3NPc3o5MkdjNHc4eHdtbHRyamZnalhKSGE5K25lZFR4b3NhT2xlbTNFcVRUSnFCOGEwK2RwcGUvTEJxeC8xRytPSHZKWmFtcXdNT3J5Q1hneWdMWEZNOCtBOHNnUmhBbTIxRDNCSExWRitMRGlRWmVaOHM3YmNLeklvSDhpVUp0L0F1bEFzYnUzL3RiZ0dBNDBvM1hudldIUzhObXgzajlLand2Z0xQUi9jVzVDQXZGR2xQeFdCZldQSzExemRTdlVsMjJiS0FaWkRTMnN1ZEN6UTIrTU9rZXNlQy9tMzVpQjJjazZUUUNCY3FsMFpNRHA5QzRNWllkeFZTUFpDVmNZN2cwOWZHSWt4QVkyQktDRTN1NHBnSHIySXNLRUxnNi91RXF0T3hGaU4zd010VTlJL3JCK29EOWZ6clJlSXlvU1RVbVoxQXVOZDBFYUxhWjdxOUU5NzBmVEZKcDg3NkN4MjBnWFQ2bmlvZjFsYUNuTmRiMWdvK1RUblhUR2hEOEp4ZGRkWmZIY3FvQnlLOHJBSXNqSm9PWnJoOFZReGJSb3RmdjVCUWpJaW1aZ2ZtQTFTUm9jVStIQjljQlAyeENGKzhaVHA4eXZlU0JaZEh0bjUydEp5M0pIT1J3NGtjekRaenZVTStxdzFPb0VTVzgvMUNXL3dZYkQ1aXYvU0M2cTdqL25uR0xOQWpwV2lMR3BkaXNTVytRT25qeXZKeE9LZU5MOHEyTmJlaHluZDNzQzJBSHd0U01YK2VMNkRWWVY3anRjTDBuN0NnVDNkOUVHbVV6Z3ZQd0NFQm5nWnBxdnV4bEwwZ3pvck9yODNEZnJFcXBBZWp3dUNFYWEzREE1eXFFMW5TdmwxeG1MUU9rdGFMaFhkc3JqZGMzWXQ3MDNneEdncGIxNHhvemsyZVJ6WHpKTUMyT3BIVGpYWFVFQnN2cDZoVWJUdDUyL1ZJVkVwNHJsbXVlSGxtOTlMcHA0ZWhXV3Y4TUhrTkVHOXBJZFB0QkkrUE1ySXdmbWhxeWdEQ0RKc09ibXVLT1RQVFVOelNuUVpwV2tJVWd2NnhVWmpiSDJTLytaVGhUYUhsUTBlbXozYWUzNU1BWUV0VlAyOVJ6c1Avc0ZEanFFaXFKTVh2cUh1eWtYTkU1ZzFueHZpYVdmRFVyVmpkUzM3MG40d0xmak52b0tqSzJpSjJLVTBIMmk4Q3BOaVB6bE0vQVZaNXhDWEJVWDNBUk40SSttS0NGa2Y4TTZPOGNGZWNaeENrZzVqOEJmYk9WQXAvQkNWZlBrRDZUaDJNMmM2S1FrQW94cld2WlRUZUd2a2E3b3lvZ3dMRzFUekwwa0FxODdBSzFUQ1VaaWdZNHlNOEVTcEd4SzZzdlJoSDcrVkcyQWNGTjVmeEtzaUJ0QTVPeFNDMEhOVDZZSjdHeXdtS0phTTlsczhrNU9VNjRHRGhKeEpjbEJNTCtVSE5DS2JJZmhCT1BENmZvQmwyWkFxSHlRdlQyQklQODhDWS9xSWVTZWhPNlZ3Y01Ma2g3YWhkaS9BRlRFVGlUcHdVTkN5dUhOWmZRaHhoYnNXUnROUXBIdU5BMGNxMVE4ck9JVWNiZHR1U1ViL3BuT1dYTFdPaU5rSzZhTW5LaDZTbzVqWmFNUFBCcWp4bERGN29yN2RFMGFtYnR4VjZZQlN6Z0dLUjd4ejlMNUIxRWVFVUV0WTZLdit4eHhGNmoybWt3aVVXVDhSTGxQdkxsOTEzb01SUCtVWmY5bkhnLzd2YnJzekZBUldlb2FiU21rZm13cGxQcnh2Ykhic2NPdmRsT0IyTkpXc3RUeWpoa2FoTm9wOGxIcWlia3BsSkJxNndyajN0Z0dpMzAxa29hNnVZM1J6RU1mWkZNcG1adFJYbWxQR1ZPU0J2V1Z5OWZ5cy91Y0dyWjFDcEUrRktmVlJEd2lYZ0lXbUs2WDllcHNoK0VFNDhQcCtnR1haa0NvZkpDLzlZczNaRERaa24wS1Z5aW52NFlhbXd1U0h0cUYyTDhBVk1ST0pPbkJRMEhwQmxwOWp3M0QyZFdvRitOOU5WWHdYRVRmUkhOOUhzenprZ3RQUURyMUh3SG1VSEdNSEN5UmpvTEUvUXE4bGI0eTA2ZXY3SXM2ak95cXJsRVFoUFNnam1PcGFvcGZOSU1pRk1vSXdIL2VCVE5mZGJ2VVQzR2UveHRmVVJtVnNwMkRaUFROcS82WERNeUUrdWNZbUZqN3k2dm94RkU2WlE4OXJ1V0djbU9vSXJYSHRNVWhkUXlBNzlVYWxXZFJ2dHc9PVwiO1xyXG5cclxuZnVuY3Rpb24gaGFuZGxlQ2FyUmVwYXltZW50UGxhblJlc3BvbnNlKGJsb2NrKSB7XHJcbiAgICBibG9jayhjYXJSZXBheW1lbnRQbGFuRGF0YSk7XHJcbn1cclxuXHJcbmV4cG9ydCB7IGhhbmRsZUNhclJlcGF5bWVudFBsYW5SZXNwb25zZSB9Il0sInNvdXJjZVJvb3QiOiIifQ==